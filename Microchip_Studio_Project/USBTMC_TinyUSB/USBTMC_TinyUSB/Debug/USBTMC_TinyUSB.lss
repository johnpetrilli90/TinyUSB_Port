
USBTMC_TinyUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081d8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  000081d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000414  200002b0  00008488  000202b0  2**2
                  ALLOC
  3 .stack        00002004  200006c4  0000889c  000202b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025c71  00000000  00000000  00020331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003326  00000000  00000000  00045fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000085e0  00000000  00000000  000492c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  000518a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b20  00000000  00000000  00051fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000061a7  00000000  00000000  00052ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008d01  00000000  00000000  00058c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000911e5  00000000  00000000  00061978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002014  00000000  00000000  000f2b60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
       0:	c8 26 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .&. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	59 06 00 00 15 01 00 00 15 01 00 00 15 01 00 00     Y...............
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	a1 04 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 19 02 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002b0 	.word	0x200002b0
      d4:	00000000 	.word	0x00000000
      d8:	000081d8 	.word	0x000081d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002b4 	.word	0x200002b4
     108:	000081d8 	.word	0x000081d8
     10c:	000081d8 	.word	0x000081d8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	000081d8 	.word	0x000081d8
     1ac:	20000000 	.word	0x20000000
     1b0:	200002b0 	.word	0x200002b0
     1b4:	200002b0 	.word	0x200002b0
     1b8:	200006c4 	.word	0x200006c4
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	000059cd 	.word	0x000059cd
     1d8:	000002fd 	.word	0x000002fd

000001dc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     1dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     1de:	4a06      	ldr	r2, [pc, #24]	; (1f8 <_sbrk+0x1c>)
     1e0:	6812      	ldr	r2, [r2, #0]
     1e2:	2a00      	cmp	r2, #0
     1e4:	d004      	beq.n	1f0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     1e6:	4a04      	ldr	r2, [pc, #16]	; (1f8 <_sbrk+0x1c>)
     1e8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     1ea:	18c3      	adds	r3, r0, r3
     1ec:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     1ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     1f0:	4902      	ldr	r1, [pc, #8]	; (1fc <_sbrk+0x20>)
     1f2:	4a01      	ldr	r2, [pc, #4]	; (1f8 <_sbrk+0x1c>)
     1f4:	6011      	str	r1, [r2, #0]
     1f6:	e7f6      	b.n	1e6 <_sbrk+0xa>
     1f8:	200002cc 	.word	0x200002cc
     1fc:	200026c8 	.word	0x200026c8

00000200 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
     200:	b510      	push	{r4, lr}
	void *const hw = device->hw;
     202:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
     204:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
     206:	07d2      	lsls	r2, r2, #31
     208:	d400      	bmi.n	20c <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
     20a:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
     20c:	2201      	movs	r2, #1
     20e:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
     210:	6803      	ldr	r3, [r0, #0]
     212:	4798      	blx	r3
}
     214:	e7f9      	b.n	20a <tc_interrupt_handler+0xa>
	...

00000218 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
     218:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc6_dev);
     21a:	4b02      	ldr	r3, [pc, #8]	; (224 <TC6_Handler+0xc>)
     21c:	6818      	ldr	r0, [r3, #0]
     21e:	4b02      	ldr	r3, [pc, #8]	; (228 <TC6_Handler+0x10>)
     220:	4798      	blx	r3
}
     222:	bd10      	pop	{r4, pc}
     224:	200002d0 	.word	0x200002d0
     228:	00000201 	.word	0x00000201

0000022c <tud_mount_cb>:
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
  blink_interval_ms = BLINK_MOUNTED;
     22c:	2200      	movs	r2, #0
     22e:	4b01      	ldr	r3, [pc, #4]	; (234 <tud_mount_cb+0x8>)
     230:	601a      	str	r2, [r3, #0]
}
     232:	4770      	bx	lr
     234:	20000004 	.word	0x20000004

00000238 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
  blink_interval_ms = BLINK_NOT_MOUNTED;
     238:	22fa      	movs	r2, #250	; 0xfa
     23a:	4b01      	ldr	r3, [pc, #4]	; (240 <tud_umount_cb+0x8>)
     23c:	601a      	str	r2, [r3, #0]
}
     23e:	4770      	bx	lr
     240:	20000004 	.word	0x20000004

00000244 <tud_suspend_cb>:
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
     244:	4a01      	ldr	r2, [pc, #4]	; (24c <tud_suspend_cb+0x8>)
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <tud_suspend_cb+0xc>)
     248:	601a      	str	r2, [r3, #0]
}
     24a:	4770      	bx	lr
     24c:	000009c4 	.word	0x000009c4
     250:	20000004 	.word	0x20000004

00000254 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
  blink_interval_ms = BLINK_MOUNTED;
     254:	2200      	movs	r2, #0
     256:	4b01      	ldr	r3, [pc, #4]	; (25c <tud_resume_cb+0x8>)
     258:	601a      	str	r2, [r3, #0]
}
     25a:	4770      	bx	lr
     25c:	20000004 	.word	0x20000004

00000260 <led_indicator_pulse>:


volatile uint8_t doPulse = false;
// called from USB context
void led_indicator_pulse(void) {
	doPulse = true;
     260:	2201      	movs	r2, #1
     262:	4b01      	ldr	r3, [pc, #4]	; (268 <led_indicator_pulse+0x8>)
     264:	701a      	strb	r2, [r3, #0]
}
     266:	4770      	bx	lr
     268:	200002d4 	.word	0x200002d4

0000026c <led_blinking_task>:

void led_blinking_task(void)
{
     26c:	b510      	push	{r4, lr}
  static uint32_t start_ms = 0;
  static bool led_state = false;
  if(blink_interval_ms == BLINK_MOUNTED) // Mounted
     26e:	4b1e      	ldr	r3, [pc, #120]	; (2e8 <led_blinking_task+0x7c>)
     270:	681b      	ldr	r3, [r3, #0]
     272:	2b00      	cmp	r3, #0
     274:	d123      	bne.n	2be <led_blinking_task+0x52>
  {
    if(doPulse)
     276:	4b1d      	ldr	r3, [pc, #116]	; (2ec <led_blinking_task+0x80>)
     278:	781b      	ldrb	r3, [r3, #0]
     27a:	2b00      	cmp	r3, #0
     27c:	d104      	bne.n	288 <led_blinking_task+0x1c>
      led_state = true;
      board_led_write(true);
      start_ms = board_millis();
      doPulse = false;
    }
    else if (led_state == true)
     27e:	4b1b      	ldr	r3, [pc, #108]	; (2ec <led_blinking_task+0x80>)
     280:	785b      	ldrb	r3, [r3, #1]
     282:	2b00      	cmp	r3, #0
     284:	d10c      	bne.n	2a0 <led_blinking_task+0x34>
    start_ms += blink_interval_ms;

    board_led_write(led_state);
    led_state = 1 - led_state; // toggle
  }
}
     286:	bd10      	pop	{r4, pc}
      led_state = true;
     288:	4c18      	ldr	r4, [pc, #96]	; (2ec <led_blinking_task+0x80>)
     28a:	2301      	movs	r3, #1
     28c:	7063      	strb	r3, [r4, #1]
      board_led_write(true);
     28e:	2001      	movs	r0, #1
     290:	4b17      	ldr	r3, [pc, #92]	; (2f0 <led_blinking_task+0x84>)
     292:	4798      	blx	r3
      start_ms = board_millis();
     294:	4b17      	ldr	r3, [pc, #92]	; (2f4 <led_blinking_task+0x88>)
     296:	4798      	blx	r3
     298:	6060      	str	r0, [r4, #4]
      doPulse = false;
     29a:	2300      	movs	r3, #0
     29c:	7023      	strb	r3, [r4, #0]
     29e:	e7f2      	b.n	286 <led_blinking_task+0x1a>
      if ( board_millis() - start_ms < 750) //Spec says blink must be between 500 and 1000 ms.
     2a0:	4b14      	ldr	r3, [pc, #80]	; (2f4 <led_blinking_task+0x88>)
     2a2:	4798      	blx	r3
     2a4:	4b11      	ldr	r3, [pc, #68]	; (2ec <led_blinking_task+0x80>)
     2a6:	685b      	ldr	r3, [r3, #4]
     2a8:	1ac0      	subs	r0, r0, r3
     2aa:	4b13      	ldr	r3, [pc, #76]	; (2f8 <led_blinking_task+0x8c>)
     2ac:	4298      	cmp	r0, r3
     2ae:	d9ea      	bls.n	286 <led_blinking_task+0x1a>
      led_state = false;
     2b0:	2200      	movs	r2, #0
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <led_blinking_task+0x80>)
     2b4:	705a      	strb	r2, [r3, #1]
      board_led_write(false);
     2b6:	2000      	movs	r0, #0
     2b8:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <led_blinking_task+0x84>)
     2ba:	4798      	blx	r3
     2bc:	e7e3      	b.n	286 <led_blinking_task+0x1a>
    if ( board_millis() - start_ms < blink_interval_ms) return; // not enough time
     2be:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <led_blinking_task+0x88>)
     2c0:	4798      	blx	r3
     2c2:	4b0a      	ldr	r3, [pc, #40]	; (2ec <led_blinking_task+0x80>)
     2c4:	685b      	ldr	r3, [r3, #4]
     2c6:	1ac0      	subs	r0, r0, r3
     2c8:	4a07      	ldr	r2, [pc, #28]	; (2e8 <led_blinking_task+0x7c>)
     2ca:	6812      	ldr	r2, [r2, #0]
     2cc:	4290      	cmp	r0, r2
     2ce:	d3da      	bcc.n	286 <led_blinking_task+0x1a>
    start_ms += blink_interval_ms;
     2d0:	4c06      	ldr	r4, [pc, #24]	; (2ec <led_blinking_task+0x80>)
     2d2:	189b      	adds	r3, r3, r2
     2d4:	6063      	str	r3, [r4, #4]
    board_led_write(led_state);
     2d6:	7860      	ldrb	r0, [r4, #1]
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <led_blinking_task+0x84>)
     2da:	4798      	blx	r3
    led_state = 1 - led_state; // toggle
     2dc:	7863      	ldrb	r3, [r4, #1]
     2de:	2201      	movs	r2, #1
     2e0:	4053      	eors	r3, r2
     2e2:	7063      	strb	r3, [r4, #1]
     2e4:	e7cf      	b.n	286 <led_blinking_task+0x1a>
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	20000004 	.word	0x20000004
     2ec:	200002d4 	.word	0x200002d4
     2f0:	000004b1 	.word	0x000004b1
     2f4:	00000669 	.word	0x00000669
     2f8:	000002ed 	.word	0x000002ed

000002fc <main>:
{
     2fc:	b510      	push	{r4, lr}
  board_init();
     2fe:	4b07      	ldr	r3, [pc, #28]	; (31c <main+0x20>)
     300:	4798      	blx	r3
  tud_init(BOARD_TUD_RHPORT);
     302:	2000      	movs	r0, #0
     304:	4b06      	ldr	r3, [pc, #24]	; (320 <main+0x24>)
     306:	4798      	blx	r3

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
     308:	2100      	movs	r1, #0
     30a:	2001      	movs	r0, #1
     30c:	4240      	negs	r0, r0
     30e:	4b05      	ldr	r3, [pc, #20]	; (324 <main+0x28>)
     310:	4798      	blx	r3
    led_blinking_task();
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <main+0x2c>)
     314:	4798      	blx	r3
    usbtmc_app_task_iter();
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <main+0x30>)
     318:	4798      	blx	r3
     31a:	e7f5      	b.n	308 <main+0xc>
     31c:	000004d1 	.word	0x000004d1
     320:	00002119 	.word	0x00002119
     324:	000028c9 	.word	0x000028c9
     328:	0000026d 	.word	0x0000026d
     32c:	0000077d 	.word	0x0000077d

00000330 <clock_init>:
		.bit.ID = gclk,           // GCLK_GENERATOR_X
	};
	GCLK->GENCTRL.reg = genctrl.reg;
}

void clock_init(void){
     330:	b530      	push	{r4, r5, lr}

	/* ----------------------------------------------------------------------------------------------
	* 1) Set Flash wait states for 48 MHz (per Table 37-40 in data sheet)
	*/
	
	NVMCTRL->CTRLB.bit.RWS = 1;		/* 1 wait state required @ 3.3V & 48MHz */
     332:	4a50      	ldr	r2, [pc, #320]	; (474 <clock_init+0x144>)
     334:	6853      	ldr	r3, [r2, #4]
     336:	211e      	movs	r1, #30
     338:	438b      	bics	r3, r1
     33a:	391c      	subs	r1, #28
     33c:	430b      	orrs	r3, r1
     33e:	6053      	str	r3, [r2, #4]
	/* ----------------------------------------------------------------------------------------------
	* 2) Enable XOSC32K clock (External on-board 32.768kHz oscillator), will be used as DFLL48M reference.
	*/
	
	// Configure SYSCTRL->XOSC32K settings
	SYSCTRL_XOSC32K_Type sysctrl_xosc32k = {
     340:	2208      	movs	r2, #8
     342:	2304      	movs	r3, #4
     344:	431a      	orrs	r2, r3
     346:	2380      	movs	r3, #128	; 0x80
     348:	009b      	lsls	r3, r3, #2
     34a:	4313      	orrs	r3, r2
		.bit.AAMPEN = 0,		/* Disable automatic amplitude control */
		.bit.EN32K = 1,			/* 32kHz output is disabled */
		.bit.XTALEN = 1			/* Crystal connected to XIN32/XOUT32 */
	};
	// Write these settings
	SYSCTRL->XOSC32K.reg = sysctrl_xosc32k.reg;
     34c:	b29b      	uxth	r3, r3
     34e:	4a4a      	ldr	r2, [pc, #296]	; (478 <clock_init+0x148>)
     350:	8293      	strh	r3, [r2, #20]
	// Enable the Oscillator - Separate step per data sheet recommendation (sec 17.6.3)
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
     352:	8a93      	ldrh	r3, [r2, #20]
     354:	430b      	orrs	r3, r1
     356:	8293      	strh	r3, [r2, #20]
	
	// Wait for XOSC32K to stabilize
	while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
     358:	4b47      	ldr	r3, [pc, #284]	; (478 <clock_init+0x148>)
     35a:	68db      	ldr	r3, [r3, #12]
     35c:	079b      	lsls	r3, r3, #30
     35e:	d5fb      	bpl.n	358 <clock_init+0x28>
	* 3) Put XOSC32K as source of Generic Clock Generator 1
	*/
	
	// Set the Generic Clock Generator 1 output divider to 1
	// Configure GCLK->GENDIV settings
	GCLK_GENDIV_Type gclk1_gendiv = {
     360:	2301      	movs	r3, #1
     362:	2180      	movs	r1, #128	; 0x80
     364:	0049      	lsls	r1, r1, #1
     366:	4319      	orrs	r1, r3
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K	/* Apply division factor to Generator 1 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk1_gendiv.reg;
     368:	4844      	ldr	r0, [pc, #272]	; (47c <clock_init+0x14c>)
     36a:	6081      	str	r1, [r0, #8]
	
	// Configure Generic Clock Generator 1 with XOSC32K as source
	GCLK_GENCTRL_Type gclk1_genctrl = {
     36c:	22a0      	movs	r2, #160	; 0xa0
     36e:	00d2      	lsls	r2, r2, #3
     370:	431a      	orrs	r2, r3
     372:	2380      	movs	r3, #128	; 0x80
     374:	025b      	lsls	r3, r3, #9
     376:	431a      	orrs	r2, r3
     378:	2380      	movs	r3, #128	; 0x80
     37a:	029b      	lsls	r3, r3, #10
     37c:	4313      	orrs	r3, r2
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x05,		/* Generator source: XOSC32K output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_XOSC32K			/* Generator ID: 1 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk1_genctrl.reg;
     37e:	6043      	str	r3, [r0, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
     380:	4b3e      	ldr	r3, [pc, #248]	; (47c <clock_init+0x14c>)
     382:	785b      	ldrb	r3, [r3, #1]
     384:	09db      	lsrs	r3, r3, #7
     386:	d1fb      	bne.n	380 <clock_init+0x50>
		.bit.CLKEN = 1,			/* Enable the Generic Clock */
		.bit.GEN = GENERIC_CLOCK_GENERATOR_XOSC32K, 	/* Generic Clock Generator 1 is the source */
		.bit.ID = 0x00			/* Generic Clock Multiplexer 0 (DFLL48M Reference) */
	};
	// Write these settings
	GCLK->CLKCTRL.reg = gclk_clkctrl.reg;
     388:	2380      	movs	r3, #128	; 0x80
     38a:	01db      	lsls	r3, r3, #7
     38c:	2280      	movs	r2, #128	; 0x80
     38e:	0052      	lsls	r2, r2, #1
     390:	4313      	orrs	r3, r2
     392:	4a3a      	ldr	r2, [pc, #232]	; (47c <clock_init+0x14c>)
     394:	8053      	strh	r3, [r2, #2]
	// Enable the DFLL48M in open loop mode. Without this step, attempts to go into closed loop mode at 48 MHz will
	// result in Processor Reset (you'll be at the in the Reset_Handler in startup_samd21.c).
	// PCLKSR.DFLLRDY must be one before writing to the DFLL Control register
	// Note that the DFLLRDY bit represents status of register synchronization - NOT clock stability
	// (see Data Sheet 17.6.14 Synchronization for detail)
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     396:	4b38      	ldr	r3, [pc, #224]	; (478 <clock_init+0x148>)
     398:	68db      	ldr	r3, [r3, #12]
     39a:	06db      	lsls	r3, r3, #27
     39c:	d5fb      	bpl.n	396 <clock_init+0x66>
	SYSCTRL->DFLLCTRL.reg = (uint16_t)(SYSCTRL_DFLLCTRL_ENABLE);
     39e:	2202      	movs	r2, #2
     3a0:	4b35      	ldr	r3, [pc, #212]	; (478 <clock_init+0x148>)
     3a2:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     3a4:	4b34      	ldr	r3, [pc, #208]	; (478 <clock_init+0x148>)
     3a6:	68db      	ldr	r3, [r3, #12]
     3a8:	06db      	lsls	r3, r3, #27
     3aa:	d5fb      	bpl.n	3a4 <clock_init+0x74>
	
	// Set up the Multiplier, Coarse and Fine steps
	SYSCTRL_DFLLMUL_Type sysctrl_dfllmul = {
     3ac:	4b34      	ldr	r3, [pc, #208]	; (480 <clock_init+0x150>)
     3ae:	4a35      	ldr	r2, [pc, #212]	; (484 <clock_init+0x154>)
     3b0:	431a      	orrs	r2, r3
     3b2:	23f8      	movs	r3, #248	; 0xf8
     3b4:	05db      	lsls	r3, r3, #23
     3b6:	4313      	orrs	r3, r2
		.bit.CSTEP = 31,		/* Coarse step - use half of the max value (63) */
		.bit.FSTEP = 511,		/* Fine step - use half of the max value (1023) */
		.bit.MUL = 1465			/* Multiplier = MAIN_CLK_FREQ (48MHz) / EXT_32K_CLK_FREQ (32768 Hz) */
	};
	// Write these settings
	SYSCTRL->DFLLMUL.reg = sysctrl_dfllmul.reg;
     3b8:	4a2f      	ldr	r2, [pc, #188]	; (478 <clock_init+0x148>)
     3ba:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Wait for synchronization
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     3bc:	4b2e      	ldr	r3, [pc, #184]	; (478 <clock_init+0x148>)
     3be:	68db      	ldr	r3, [r3, #12]
     3c0:	06db      	lsls	r3, r3, #27
     3c2:	d5fb      	bpl.n	3bc <clock_init+0x8c>
	
	// To reduce lock time, load factory calibrated values into DFLLVAL (cf. Data Sheet 17.6.7.1)
	// Location of value is defined in Data Sheet Table 10-5. NVM Software Calibration Area Mapping
	
	// Get factory calibrated value for "DFLL48M COARSE CAL" from NVM Software Calibration Area
	tempDFLL48CalibrationCoarse = *(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR;
     3c4:	4b30      	ldr	r3, [pc, #192]	; (488 <clock_init+0x158>)
     3c6:	681a      	ldr	r2, [r3, #0]
	tempDFLL48CalibrationCoarse &= FUSES_DFLL48M_COARSE_CAL_Msk;
	tempDFLL48CalibrationCoarse = tempDFLL48CalibrationCoarse>>FUSES_DFLL48M_COARSE_CAL_Pos;
	// Write the coarse calibration value
	SYSCTRL->DFLLVAL.bit.COARSE = tempDFLL48CalibrationCoarse;
     3c8:	492b      	ldr	r1, [pc, #172]	; (478 <clock_init+0x148>)
     3ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     3cc:	0e92      	lsrs	r2, r2, #26
     3ce:	0292      	lsls	r2, r2, #10
     3d0:	482e      	ldr	r0, [pc, #184]	; (48c <clock_init+0x15c>)
     3d2:	4003      	ands	r3, r0
     3d4:	4313      	orrs	r3, r2
     3d6:	628b      	str	r3, [r1, #40]	; 0x28
	// Switch DFLL48M to Closed Loop mode and enable WAITLOCK
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
     3d8:	4b27      	ldr	r3, [pc, #156]	; (478 <clock_init+0x148>)
     3da:	68db      	ldr	r3, [r3, #12]
     3dc:	06db      	lsls	r3, r3, #27
     3de:	d5fb      	bpl.n	3d8 <clock_init+0xa8>
	SYSCTRL->DFLLCTRL.reg |= (uint16_t) (SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_WAITLOCK);
     3e0:	4a25      	ldr	r2, [pc, #148]	; (478 <clock_init+0x148>)
     3e2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     3e4:	492a      	ldr	r1, [pc, #168]	; (490 <clock_init+0x160>)
     3e6:	430b      	orrs	r3, r1
     3e8:	8493      	strh	r3, [r2, #36]	; 0x24
		.bit.IDC = 1,			/* Generator duty cycle is 50/50 */
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x07,		/* Generator source: DFLL48M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_MAIN			/* Generator ID: 0 */
	};
	GCLK->GENCTRL.reg = gclk_genctrl0.reg;
     3ea:	4824      	ldr	r0, [pc, #144]	; (47c <clock_init+0x14c>)
     3ec:	2380      	movs	r3, #128	; 0x80
     3ee:	031b      	lsls	r3, r3, #12
     3f0:	2280      	movs	r2, #128	; 0x80
     3f2:	0292      	lsls	r2, r2, #10
     3f4:	2180      	movs	r1, #128	; 0x80
     3f6:	0249      	lsls	r1, r1, #9
     3f8:	24e0      	movs	r4, #224	; 0xe0
     3fa:	00e4      	lsls	r4, r4, #3
     3fc:	4321      	orrs	r1, r4
     3fe:	430a      	orrs	r2, r1
     400:	4313      	orrs	r3, r2
     402:	6043      	str	r3, [r0, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
     404:	4b1d      	ldr	r3, [pc, #116]	; (47c <clock_init+0x14c>)
     406:	785b      	ldrb	r3, [r3, #1]
     408:	09db      	lsrs	r3, r3, #7
     40a:	d1fb      	bne.n	404 <clock_init+0xd4>
		.bit.PMUX = 7,			/* Peripheral Function H selected (GCLK_IO[0]) */
		.bit.PMUXEN = 1,		/* Enable peripheral Multiplexer */
		.bit.PINMASK = (uint16_t)(1 << (28-16)) /* Select the pin(s) to be configured */
	};
	// Write these settings
	PORT->Group[0].WRCONFIG.reg = port0_wrconfig.reg;
     40c:	4c21      	ldr	r4, [pc, #132]	; (494 <clock_init+0x164>)
     40e:	2380      	movs	r3, #128	; 0x80
     410:	061b      	lsls	r3, r3, #24
     412:	2280      	movs	r2, #128	; 0x80
     414:	05d2      	lsls	r2, r2, #23
     416:	2180      	movs	r1, #128	; 0x80
     418:	0549      	lsls	r1, r1, #21
     41a:	20e0      	movs	r0, #224	; 0xe0
     41c:	04c0      	lsls	r0, r0, #19
     41e:	2588      	movs	r5, #136	; 0x88
     420:	026d      	lsls	r5, r5, #9
     422:	4328      	orrs	r0, r5
     424:	4301      	orrs	r1, r0
     426:	430a      	orrs	r2, r1
     428:	4313      	orrs	r3, r2
     42a:	62a3      	str	r3, [r4, #40]	; 0x28
	
	/* ----------------------------------------------------------------------------------------------
	* 7) Modify prescaler value of OSC8M to produce 8MHz output
	*/

	SYSCTRL->OSC8M.bit.PRESC = 0;		/* Prescale by 1 */
     42c:	4b12      	ldr	r3, [pc, #72]	; (478 <clock_init+0x148>)
     42e:	6a1a      	ldr	r2, [r3, #32]
     430:	4919      	ldr	r1, [pc, #100]	; (498 <clock_init+0x168>)
     432:	400a      	ands	r2, r1
     434:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;	/* Oscillator is always on if enabled */
     436:	6a1a      	ldr	r2, [r3, #32]
     438:	2180      	movs	r1, #128	; 0x80
     43a:	438a      	bics	r2, r1
     43c:	621a      	str	r2, [r3, #32]
	* 8) Put OSC8M as source for Generic Clock Generator 3
	*/
	
	// Set the Generic Clock Generator 3 output divider to 1
	// Configure GCLK->GENDIV settings
	GCLK_GENDIV_Type gclk3_gendiv = {
     43e:	2303      	movs	r3, #3
     440:	3180      	adds	r1, #128	; 0x80
     442:	4319      	orrs	r1, r3
		.bit.DIV = 1,								/* Set output division factor = 1 */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M		/* Apply division factor to Generator 3 */
	};
	// Write these settings
	GCLK->GENDIV.reg = gclk3_gendiv.reg;
     444:	480d      	ldr	r0, [pc, #52]	; (47c <clock_init+0x14c>)
     446:	6081      	str	r1, [r0, #8]
	
	// Configure Generic Clock Generator 3 with OSC8M as source
	GCLK_GENCTRL_Type gclk3_genctrl = {
     448:	22c0      	movs	r2, #192	; 0xc0
     44a:	00d2      	lsls	r2, r2, #3
     44c:	431a      	orrs	r2, r3
     44e:	2380      	movs	r3, #128	; 0x80
     450:	025b      	lsls	r3, r3, #9
     452:	431a      	orrs	r2, r3
     454:	2380      	movs	r3, #128	; 0x80
     456:	029b      	lsls	r3, r3, #10
     458:	4313      	orrs	r3, r2
		.bit.GENEN = 1,			/* Enable the generator */
		.bit.SRC = 0x06,		/* Generator source: OSC8M output */
		.bit.ID = GENERIC_CLOCK_GENERATOR_OSC8M			/* Generator ID: 3 */
	};
	// Write these settings
	GCLK->GENCTRL.reg = gclk3_genctrl.reg;
     45a:	6043      	str	r3, [r0, #4]
	// GENCTRL is Write-Synchronized...so wait for write to complete
	while(GCLK->STATUS.bit.SYNCBUSY);
     45c:	4b07      	ldr	r3, [pc, #28]	; (47c <clock_init+0x14c>)
     45e:	785b      	ldrb	r3, [r3, #1]
     460:	09db      	lsrs	r3, r3, #7
     462:	d1fb      	bne.n	45c <clock_init+0x12c>
	
	/* ----------------------------------------------------------------------------------------------
	* 9) Set CPU and APBx BUS Clocks to 48MHz
	*/
	PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     464:	4b0d      	ldr	r3, [pc, #52]	; (49c <clock_init+0x16c>)
     466:	2200      	movs	r2, #0
     468:	721a      	strb	r2, [r3, #8]
	PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     46a:	725a      	strb	r2, [r3, #9]
	PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     46c:	729a      	strb	r2, [r3, #10]
	PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     46e:	72da      	strb	r2, [r3, #11]
	
     470:	bd30      	pop	{r4, r5, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	41004000 	.word	0x41004000
     478:	40000800 	.word	0x40000800
     47c:	40000c00 	.word	0x40000c00
     480:	01ff0000 	.word	0x01ff0000
     484:	000005b9 	.word	0x000005b9
     488:	00806024 	.word	0x00806024
     48c:	ffff03ff 	.word	0xffff03ff
     490:	00000804 	.word	0x00000804
     494:	41004400 	.word	0x41004400
     498:	fffffcff 	.word	0xfffffcff
     49c:	40000400 	.word	0x40000400

000004a0 <USB_Handler>:

//--------------------------------------------------------------------+
// Forward USB interrupt events to TinyUSB IRQ Handler
//--------------------------------------------------------------------+
void USB_Handler(void)
{
     4a0:	b510      	push	{r4, lr}
  tud_int_handler(0);
     4a2:	2000      	movs	r0, #0
     4a4:	4b01      	ldr	r3, [pc, #4]	; (4ac <USB_Handler+0xc>)
     4a6:	4798      	blx	r3
}
     4a8:	bd10      	pop	{r4, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	000030f1 	.word	0x000030f1

000004b0 <board_led_write>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     4b0:	2800      	cmp	r0, #0
     4b2:	d006      	beq.n	4c2 <board_led_write+0x12>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b4:	2180      	movs	r1, #128	; 0x80
     4b6:	05c9      	lsls	r1, r1, #23
     4b8:	2394      	movs	r3, #148	; 0x94
     4ba:	22c0      	movs	r2, #192	; 0xc0
     4bc:	05d2      	lsls	r2, r2, #23
     4be:	50d1      	str	r1, [r2, r3]
{
  (void)state;
#ifdef LED_PIN
  gpio_set_pin_level(LED_PIN, state ? LED_STATE_ON : (1-LED_STATE_ON));
#endif
}
     4c0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c2:	2180      	movs	r1, #128	; 0x80
     4c4:	05c9      	lsls	r1, r1, #23
     4c6:	2398      	movs	r3, #152	; 0x98
     4c8:	22c0      	movs	r2, #192	; 0xc0
     4ca:	05d2      	lsls	r2, r2, #23
     4cc:	50d1      	str	r1, [r2, r3]
     4ce:	e7f7      	b.n	4c0 <board_led_write+0x10>

000004d0 <board_init>:
{
     4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	clock_init();
     4d2:	4b4d      	ldr	r3, [pc, #308]	; (608 <board_init+0x138>)
     4d4:	4798      	blx	r3
  SystemCoreClock = CONF_CPU_FREQUENCY;
     4d6:	4a4d      	ldr	r2, [pc, #308]	; (60c <board_init+0x13c>)
     4d8:	4b4d      	ldr	r3, [pc, #308]	; (610 <board_init+0x140>)
     4da:	601a      	str	r2, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     4dc:	4a4d      	ldr	r2, [pc, #308]	; (614 <board_init+0x144>)
     4de:	4b4e      	ldr	r3, [pc, #312]	; (618 <board_init+0x148>)
     4e0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     4e2:	484e      	ldr	r0, [pc, #312]	; (61c <board_init+0x14c>)
     4e4:	6a03      	ldr	r3, [r0, #32]
     4e6:	021b      	lsls	r3, r3, #8
     4e8:	0a1b      	lsrs	r3, r3, #8
     4ea:	21c0      	movs	r1, #192	; 0xc0
     4ec:	0609      	lsls	r1, r1, #24
     4ee:	430b      	orrs	r3, r1
     4f0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     4f2:	2300      	movs	r3, #0
     4f4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     4f6:	3307      	adds	r3, #7
     4f8:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4fa:	25c0      	movs	r5, #192	; 0xc0
     4fc:	05ed      	lsls	r5, r5, #23
     4fe:	2780      	movs	r7, #128	; 0x80
     500:	05ff      	lsls	r7, r7, #23
     502:	3381      	adds	r3, #129	; 0x81
     504:	50ef      	str	r7, [r5, r3]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     506:	4c46      	ldr	r4, [pc, #280]	; (620 <board_init+0x150>)
     508:	3320      	adds	r3, #32
     50a:	50e7      	str	r7, [r4, r3]
     50c:	4a45      	ldr	r2, [pc, #276]	; (624 <board_init+0x154>)
     50e:	50e2      	str	r2, [r4, r3]
  board_led_write(false);
     510:	2000      	movs	r0, #0
     512:	4b45      	ldr	r3, [pc, #276]	; (628 <board_init+0x158>)
     514:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     516:	2280      	movs	r2, #128	; 0x80
     518:	0212      	lsls	r2, r2, #8
     51a:	606a      	str	r2, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51c:	4b43      	ldr	r3, [pc, #268]	; (62c <board_init+0x15c>)
     51e:	62a3      	str	r3, [r4, #40]	; 0x28
     520:	4b43      	ldr	r3, [pc, #268]	; (630 <board_init+0x160>)
     522:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     524:	606a      	str	r2, [r5, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     526:	214f      	movs	r1, #79	; 0x4f
     528:	5c63      	ldrb	r3, [r4, r1]
     52a:	2004      	movs	r0, #4
     52c:	4684      	mov	ip, r0
     52e:	4303      	orrs	r3, r0
     530:	b2db      	uxtb	r3, r3
     532:	5463      	strb	r3, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     534:	61aa      	str	r2, [r5, #24]
		PM->APBAMASK.reg |= 1 << peripheral;
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     536:	4e3f      	ldr	r6, [pc, #252]	; (634 <board_init+0x164>)
     538:	69f3      	ldr	r3, [r6, #28]
     53a:	2220      	movs	r2, #32
     53c:	4313      	orrs	r3, r2
     53e:	61f3      	str	r3, [r6, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     540:	6973      	ldr	r3, [r6, #20]
     542:	3220      	adds	r2, #32
     544:	4313      	orrs	r3, r2
     546:	6173      	str	r3, [r6, #20]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     548:	483b      	ldr	r0, [pc, #236]	; (638 <board_init+0x168>)
     54a:	4b3c      	ldr	r3, [pc, #240]	; (63c <board_init+0x16c>)
     54c:	8043      	strh	r3, [r0, #2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     54e:	2380      	movs	r3, #128	; 0x80
     550:	045b      	lsls	r3, r3, #17
     552:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     554:	62a7      	str	r7, [r4, #40]	; 0x28
     556:	4a3a      	ldr	r2, [pc, #232]	; (640 <board_init+0x170>)
     558:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55a:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     55c:	2258      	movs	r2, #88	; 0x58
     55e:	5ca3      	ldrb	r3, [r4, r2]
     560:	4661      	mov	r1, ip
     562:	438b      	bics	r3, r1
     564:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     566:	2380      	movs	r3, #128	; 0x80
     568:	049b      	lsls	r3, r3, #18
     56a:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     56c:	62a7      	str	r7, [r4, #40]	; 0x28
     56e:	4935      	ldr	r1, [pc, #212]	; (644 <board_init+0x174>)
     570:	62a1      	str	r1, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     572:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     574:	2159      	movs	r1, #89	; 0x59
     576:	5c63      	ldrb	r3, [r4, r1]
     578:	4665      	mov	r5, ip
     57a:	43ab      	bics	r3, r5
     57c:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     57e:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     580:	3d03      	subs	r5, #3
     582:	46ac      	mov	ip, r5
     584:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     586:	2701      	movs	r7, #1
     588:	433b      	orrs	r3, r7
     58a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     58c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58e:	3a1c      	subs	r2, #28
     590:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     592:	350e      	adds	r5, #14
     594:	43ab      	bics	r3, r5
	tmp |= PORT_PMUX_PMUXE(data);
     596:	2506      	movs	r5, #6
     598:	432b      	orrs	r3, r5
     59a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     59c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59e:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a0:	4665      	mov	r5, ip
     5a2:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a4:	433b      	orrs	r3, r7
     5a6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a8:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5aa:	5ca1      	ldrb	r1, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ac:	350e      	adds	r5, #14
     5ae:	4029      	ands	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
     5b0:	2360      	movs	r3, #96	; 0x60
     5b2:	4319      	orrs	r1, r3
     5b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b6:	54a1      	strb	r1, [r4, r2]
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     5b8:	6a32      	ldr	r2, [r6, #32]
     5ba:	2380      	movs	r3, #128	; 0x80
     5bc:	005b      	lsls	r3, r3, #1
     5be:	4313      	orrs	r3, r2
     5c0:	6233      	str	r3, [r6, #32]
  TCC0->PER.bit.PER = 48000000 / 1000;
     5c2:	4b21      	ldr	r3, [pc, #132]	; (648 <board_init+0x178>)
     5c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     5c6:	0e12      	lsrs	r2, r2, #24
     5c8:	0612      	lsls	r2, r2, #24
     5ca:	4920      	ldr	r1, [pc, #128]	; (64c <board_init+0x17c>)
     5cc:	4311      	orrs	r1, r2
     5ce:	6419      	str	r1, [r3, #64]	; 0x40
  TCC0->CC[3].bit.CC = 48000000 / 2000;
     5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     5d2:	0e12      	lsrs	r2, r2, #24
     5d4:	0612      	lsls	r2, r2, #24
     5d6:	491e      	ldr	r1, [pc, #120]	; (650 <board_init+0x180>)
     5d8:	4311      	orrs	r1, r2
     5da:	6519      	str	r1, [r3, #80]	; 0x50
  TCC0->CTRLA.bit.ENABLE = true;
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	2202      	movs	r2, #2
     5e0:	430a      	orrs	r2, r1
     5e2:	601a      	str	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e4:	2353      	movs	r3, #83	; 0x53
     5e6:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e8:	4661      	mov	r1, ip
     5ea:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ec:	433a      	orrs	r2, r7
     5ee:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f0:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f2:	2239      	movs	r2, #57	; 0x39
     5f4:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f6:	402b      	ands	r3, r5
	tmp |= PORT_PMUX_PMUXO(data);
     5f8:	2150      	movs	r1, #80	; 0x50
     5fa:	430b      	orrs	r3, r1
     5fc:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fe:	54a3      	strb	r3, [r4, r2]
     600:	4b14      	ldr	r3, [pc, #80]	; (654 <board_init+0x184>)
     602:	8043      	strh	r3, [r0, #2]
}
     604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000331 	.word	0x00000331
     60c:	02dc6c00 	.word	0x02dc6c00
     610:	20000000 	.word	0x20000000
     614:	e000e010 	.word	0xe000e010
     618:	0000bb7f 	.word	0x0000bb7f
     61c:	e000ed00 	.word	0xe000ed00
     620:	41004400 	.word	0x41004400
     624:	c0004000 	.word	0xc0004000
     628:	000004b1 	.word	0x000004b1
     62c:	40028000 	.word	0x40028000
     630:	c0020000 	.word	0xc0020000
     634:	40000400 	.word	0x40000400
     638:	40000c00 	.word	0x40000c00
     63c:	00004006 	.word	0x00004006
     640:	c0000100 	.word	0xc0000100
     644:	c0000200 	.word	0xc0000200
     648:	42002000 	.word	0x42002000
     64c:	0000bb80 	.word	0x0000bb80
     650:	00005dc0 	.word	0x00005dc0
     654:	0000401a 	.word	0x0000401a

00000658 <SysTick_Handler>:

#if CFG_TUSB_OS  == OPT_OS_NONE
volatile uint32_t system_ticks = 0;
void SysTick_Handler (void)
{
  system_ticks++;
     658:	4a02      	ldr	r2, [pc, #8]	; (664 <SysTick_Handler+0xc>)
     65a:	6813      	ldr	r3, [r2, #0]
     65c:	3301      	adds	r3, #1
     65e:	6013      	str	r3, [r2, #0]
}
     660:	4770      	bx	lr
     662:	46c0      	nop			; (mov r8, r8)
     664:	200002dc 	.word	0x200002dc

00000668 <board_millis>:

uint32_t board_millis(void)
{
  return system_ticks;
     668:	4b01      	ldr	r3, [pc, #4]	; (670 <board_millis+0x8>)
     66a:	6818      	ldr	r0, [r3, #0]
}
     66c:	4770      	bx	lr
     66e:	46c0      	nop			; (mov r8, r8)
     670:	200002dc 	.word	0x200002dc

00000674 <tud_usbtmc_open_cb>:
      .UsingTermChar = 0
    }
};

void tud_usbtmc_open_cb(uint8_t interface_id)
{
     674:	b510      	push	{r4, lr}
  (void)interface_id;
  tud_usbtmc_start_bus_read();
     676:	4b01      	ldr	r3, [pc, #4]	; (67c <tud_usbtmc_open_cb+0x8>)
     678:	4798      	blx	r3
}
     67a:	bd10      	pop	{r4, pc}
     67c:	000013a1 	.word	0x000013a1

00000680 <tud_usbtmc_get_capabilities_cb>:
usbtmc_response_capabilities_t const *
#endif
tud_usbtmc_get_capabilities_cb()
{
  return &tud_usbtmc_app_capabilities;
}
     680:	4800      	ldr	r0, [pc, #0]	; (684 <tud_usbtmc_get_capabilities_cb+0x4>)
     682:	4770      	bx	lr
     684:	00007c40 	.word	0x00007c40

00000688 <tud_usbtmc_msg_trigger_cb>:


bool tud_usbtmc_msg_trigger_cb(usbtmc_msg_generic_t* msg) {
  (void)msg;
  // Let trigger set the SRQ
  status |= IEEE4882_STB_SRQ;
     688:	4a03      	ldr	r2, [pc, #12]	; (698 <tud_usbtmc_msg_trigger_cb+0x10>)
     68a:	7813      	ldrb	r3, [r2, #0]
     68c:	2140      	movs	r1, #64	; 0x40
     68e:	430b      	orrs	r3, r1
     690:	b2db      	uxtb	r3, r3
     692:	7013      	strb	r3, [r2, #0]
  return true;
}
     694:	2001      	movs	r0, #1
     696:	4770      	bx	lr
     698:	200002e0 	.word	0x200002e0

0000069c <tud_usbtmc_msgBulkOut_start_cb>:

bool tud_usbtmc_msgBulkOut_start_cb(usbtmc_msg_request_dev_dep_out const * msgHeader)
{
  (void)msgHeader;
  buffer_len = 0;
     69c:	2200      	movs	r2, #0
     69e:	4b09      	ldr	r3, [pc, #36]	; (6c4 <tud_usbtmc_msgBulkOut_start_cb+0x28>)
     6a0:	605a      	str	r2, [r3, #4]
  if(msgHeader->TransferSize > sizeof(buffer))
     6a2:	7903      	ldrb	r3, [r0, #4]
     6a4:	7942      	ldrb	r2, [r0, #5]
     6a6:	0212      	lsls	r2, r2, #8
     6a8:	431a      	orrs	r2, r3
     6aa:	7983      	ldrb	r3, [r0, #6]
     6ac:	041b      	lsls	r3, r3, #16
     6ae:	431a      	orrs	r2, r3
     6b0:	79c3      	ldrb	r3, [r0, #7]
     6b2:	061b      	lsls	r3, r3, #24
     6b4:	4313      	orrs	r3, r2
     6b6:	2be1      	cmp	r3, #225	; 0xe1
     6b8:	d801      	bhi.n	6be <tud_usbtmc_msgBulkOut_start_cb+0x22>
  {

    return false;
  }
  return true;
     6ba:	2001      	movs	r0, #1
}
     6bc:	4770      	bx	lr
    return false;
     6be:	2000      	movs	r0, #0
     6c0:	e7fc      	b.n	6bc <tud_usbtmc_msgBulkOut_start_cb+0x20>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	200002e0 	.word	0x200002e0

000006c8 <tud_usbtmc_msgBulkIn_complete_cb>:
  tud_usbtmc_start_bus_read();
  return true;
}

bool tud_usbtmc_msgBulkIn_complete_cb()
{
     6c8:	b510      	push	{r4, lr}
  if((buffer_tx_ix == buffer_len) || idnQuery) // done
     6ca:	4b0b      	ldr	r3, [pc, #44]	; (6f8 <tud_usbtmc_msgBulkIn_complete_cb+0x30>)
     6cc:	689a      	ldr	r2, [r3, #8]
     6ce:	685b      	ldr	r3, [r3, #4]
     6d0:	429a      	cmp	r2, r3
     6d2:	d003      	beq.n	6dc <tud_usbtmc_msgBulkIn_complete_cb+0x14>
     6d4:	4b08      	ldr	r3, [pc, #32]	; (6f8 <tud_usbtmc_msgBulkIn_complete_cb+0x30>)
     6d6:	7b1b      	ldrb	r3, [r3, #12]
     6d8:	2b00      	cmp	r3, #0
     6da:	d008      	beq.n	6ee <tud_usbtmc_msgBulkIn_complete_cb+0x26>
  {
    status &= (uint8_t)~(IEEE4882_STB_MAV); // clear MAV
     6dc:	4b06      	ldr	r3, [pc, #24]	; (6f8 <tud_usbtmc_msgBulkIn_complete_cb+0x30>)
     6de:	781a      	ldrb	r2, [r3, #0]
     6e0:	2110      	movs	r1, #16
     6e2:	438a      	bics	r2, r1
     6e4:	701a      	strb	r2, [r3, #0]
    queryState = 0;
     6e6:	2200      	movs	r2, #0
     6e8:	81da      	strh	r2, [r3, #14]
    bulkInStarted = 0;
     6ea:	611a      	str	r2, [r3, #16]
    buffer_tx_ix = 0;
     6ec:	609a      	str	r2, [r3, #8]
  }
  tud_usbtmc_start_bus_read();
     6ee:	4b03      	ldr	r3, [pc, #12]	; (6fc <tud_usbtmc_msgBulkIn_complete_cb+0x34>)
     6f0:	4798      	blx	r3

  return true;
}
     6f2:	2001      	movs	r0, #1
     6f4:	bd10      	pop	{r4, pc}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	200002e0 	.word	0x200002e0
     6fc:	000013a1 	.word	0x000013a1

00000700 <tud_usbtmc_msgBulkIn_request_cb>:

static unsigned int msgReqLen;

bool tud_usbtmc_msgBulkIn_request_cb(usbtmc_msg_request_dev_dep_in const * request)
{
     700:	b570      	push	{r4, r5, r6, lr}
  rspMsg.header.MsgID = request->header.MsgID,
  rspMsg.header.bTag = request->header.bTag,
  rspMsg.header.bTagInverse = request->header.bTagInverse;
  msgReqLen = request->TransferSize;
     702:	7901      	ldrb	r1, [r0, #4]
     704:	7943      	ldrb	r3, [r0, #5]
     706:	021b      	lsls	r3, r3, #8
     708:	430b      	orrs	r3, r1
     70a:	7981      	ldrb	r1, [r0, #6]
     70c:	0409      	lsls	r1, r1, #16
     70e:	430b      	orrs	r3, r1
     710:	79c1      	ldrb	r1, [r0, #7]
     712:	0609      	lsls	r1, r1, #24
     714:	4319      	orrs	r1, r3
     716:	4b17      	ldr	r3, [pc, #92]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     718:	6159      	str	r1, [r3, #20]

#ifdef xDEBUG
  uart_tx_str_sync("MSG_IN_DATA: Requested!\r\n");
#endif
  if(queryState == 0 || (buffer_tx_ix == 0))
     71a:	89db      	ldrh	r3, [r3, #14]
     71c:	b29b      	uxth	r3, r3
     71e:	2b00      	cmp	r3, #0
     720:	d003      	beq.n	72a <tud_usbtmc_msgBulkIn_request_cb+0x2a>
     722:	4b14      	ldr	r3, [pc, #80]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     724:	689a      	ldr	r2, [r3, #8]
     726:	2a00      	cmp	r2, #0
     728:	d108      	bne.n	73c <tud_usbtmc_msgBulkIn_request_cb+0x3c>
  {
    TU_ASSERT(bulkInStarted == 0);
     72a:	4b12      	ldr	r3, [pc, #72]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     72c:	691b      	ldr	r3, [r3, #16]
     72e:	2b00      	cmp	r3, #0
     730:	d11e      	bne.n	770 <tud_usbtmc_msgBulkIn_request_cb+0x70>
    bulkInStarted = 1;
     732:	2201      	movs	r2, #1
     734:	4b0f      	ldr	r3, [pc, #60]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     736:	611a      	str	r2, [r3, #16]
    tud_usbtmc_transmit_dev_msg_data(&buffer[buffer_tx_ix], txlen,
        (buffer_tx_ix+txlen) == buffer_len, false);
    buffer_tx_ix += txlen;
  }
  // Always return true indicating not to stall the EP.
  return true;
     738:	2001      	movs	r0, #1
}
     73a:	bd70      	pop	{r4, r5, r6, pc}
    size_t txlen = tu_min32(buffer_len-buffer_tx_ix,msgReqLen);
     73c:	4b0d      	ldr	r3, [pc, #52]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     73e:	685b      	ldr	r3, [r3, #4]
     740:	1a98      	subs	r0, r3, r2
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
     742:	000c      	movs	r4, r1
     744:	4281      	cmp	r1, r0
     746:	d900      	bls.n	74a <tud_usbtmc_msgBulkIn_request_cb+0x4a>
     748:	0004      	movs	r4, r0
    tud_usbtmc_transmit_dev_msg_data(&buffer[buffer_tx_ix], txlen,
     74a:	4d0a      	ldr	r5, [pc, #40]	; (774 <tud_usbtmc_msgBulkIn_request_cb+0x74>)
     74c:	0028      	movs	r0, r5
     74e:	3018      	adds	r0, #24
     750:	1880      	adds	r0, r0, r2
        (buffer_tx_ix+txlen) == buffer_len, false);
     752:	1912      	adds	r2, r2, r4
    tud_usbtmc_transmit_dev_msg_data(&buffer[buffer_tx_ix], txlen,
     754:	1a9a      	subs	r2, r3, r2
     756:	4251      	negs	r1, r2
     758:	4151      	adcs	r1, r2
     75a:	b2ca      	uxtb	r2, r1
     75c:	2300      	movs	r3, #0
     75e:	0021      	movs	r1, r4
     760:	4e05      	ldr	r6, [pc, #20]	; (778 <tud_usbtmc_msgBulkIn_request_cb+0x78>)
     762:	47b0      	blx	r6
    buffer_tx_ix += txlen;
     764:	68ab      	ldr	r3, [r5, #8]
     766:	469c      	mov	ip, r3
     768:	4464      	add	r4, ip
     76a:	60ac      	str	r4, [r5, #8]
  return true;
     76c:	2001      	movs	r0, #1
     76e:	e7e4      	b.n	73a <tud_usbtmc_msgBulkIn_request_cb+0x3a>
    TU_ASSERT(bulkInStarted == 0);
     770:	2000      	movs	r0, #0
     772:	e7e2      	b.n	73a <tud_usbtmc_msgBulkIn_request_cb+0x3a>
     774:	200002e0 	.word	0x200002e0
     778:	000010a1 	.word	0x000010a1

0000077c <usbtmc_app_task_iter>:

void usbtmc_app_task_iter(void) {
     77c:	b510      	push	{r4, lr}
  switch(queryState) {
     77e:	4b6c      	ldr	r3, [pc, #432]	; (930 <usbtmc_app_task_iter+0x1b4>)
     780:	89db      	ldrh	r3, [r3, #14]
     782:	b29b      	uxth	r3, r3
     784:	2b02      	cmp	r3, #2
     786:	d04e      	beq.n	826 <usbtmc_app_task_iter+0xaa>
     788:	d943      	bls.n	812 <usbtmc_app_task_iter+0x96>
     78a:	2b03      	cmp	r3, #3
     78c:	d066      	beq.n	85c <usbtmc_app_task_iter+0xe0>
     78e:	2b04      	cmp	r3, #4
     790:	d148      	bne.n	824 <usbtmc_app_task_iter+0xa8>
    if( (board_millis() - queryDelayStart) > resp_delay) {
      queryState = 4;
    }
    break;
  case 4: // time to transmit;
    if(bulkInStarted && (buffer_tx_ix == 0)) {
     792:	4b67      	ldr	r3, [pc, #412]	; (930 <usbtmc_app_task_iter+0x1b4>)
     794:	691b      	ldr	r3, [r3, #16]
     796:	2b00      	cmp	r3, #0
     798:	d044      	beq.n	824 <usbtmc_app_task_iter+0xa8>
     79a:	4b65      	ldr	r3, [pc, #404]	; (930 <usbtmc_app_task_iter+0x1b4>)
     79c:	689b      	ldr	r3, [r3, #8]
     79e:	2b00      	cmp	r3, #0
     7a0:	d140      	bne.n	824 <usbtmc_app_task_iter+0xa8>
      if(idnQuery)
     7a2:	4b63      	ldr	r3, [pc, #396]	; (930 <usbtmc_app_task_iter+0x1b4>)
     7a4:	7b1b      	ldrb	r3, [r3, #12]
     7a6:	2b00      	cmp	r3, #0
     7a8:	d165      	bne.n	876 <usbtmc_app_task_iter+0xfa>
      {
        tud_usbtmc_transmit_dev_msg_data(IDN, tu_min32(sizeof(IDN)-1,msgReqLen),true,false);
        queryState    = 0;
        bulkInStarted = 0;
      }
      else if (adc_query)
     7aa:	4b62      	ldr	r3, [pc, #392]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d000      	beq.n	7b4 <usbtmc_app_task_iter+0x38>
     7b2:	e06f      	b.n	894 <usbtmc_app_task_iter+0x118>
      {
        tud_usbtmc_transmit_dev_msg_data(adc_voltage_str, tu_min32(sizeof(adc_voltage_str)-1,msgReqLen),true,false);
        queryState    = 0;
        bulkInStarted = 0;
      }
      else if (dac_query)
     7b4:	4b5f      	ldr	r3, [pc, #380]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7b6:	785b      	ldrb	r3, [r3, #1]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d000      	beq.n	7be <usbtmc_app_task_iter+0x42>
     7bc:	e079      	b.n	8b2 <usbtmc_app_task_iter+0x136>
      {
        tud_usbtmc_transmit_dev_msg_data(dac_voltage_str, tu_min32(sizeof(dac_voltage_str)-1,msgReqLen),true,false);
        queryState    = 0;
        bulkInStarted = 0;
      }
      else if (gpio_lev_query)
     7be:	4b5d      	ldr	r3, [pc, #372]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7c0:	789b      	ldrb	r3, [r3, #2]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d000      	beq.n	7c8 <usbtmc_app_task_iter+0x4c>
     7c6:	e083      	b.n	8d0 <usbtmc_app_task_iter+0x154>
      {
        tud_usbtmc_transmit_dev_msg_data(gpio_lev_str, tu_min32(sizeof(gpio_lev_str)-1,msgReqLen),true,false);
        queryState    = 0;
        bulkInStarted = 0;
      }
      else if (gpio_dir_query)
     7c8:	4b5a      	ldr	r3, [pc, #360]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7ca:	78db      	ldrb	r3, [r3, #3]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d000      	beq.n	7d2 <usbtmc_app_task_iter+0x56>
     7d0:	e08d      	b.n	8ee <usbtmc_app_task_iter+0x172>
      {
        tud_usbtmc_transmit_dev_msg_data(gpio_dir_str, tu_min32(sizeof(gpio_dir_str)-1,msgReqLen),true,false);
        queryState    = 0;
        bulkInStarted = 0;
      }
      else if (rst_cmd || dac_cmd || gpio_lev_cmd || gpio_dir_cmd)
     7d2:	4b58      	ldr	r3, [pc, #352]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7d4:	791b      	ldrb	r3, [r3, #4]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d10c      	bne.n	7f4 <usbtmc_app_task_iter+0x78>
     7da:	4b56      	ldr	r3, [pc, #344]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7dc:	795b      	ldrb	r3, [r3, #5]
     7de:	2b00      	cmp	r3, #0
     7e0:	d108      	bne.n	7f4 <usbtmc_app_task_iter+0x78>
     7e2:	4b54      	ldr	r3, [pc, #336]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7e4:	799b      	ldrb	r3, [r3, #6]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d104      	bne.n	7f4 <usbtmc_app_task_iter+0x78>
     7ea:	4b52      	ldr	r3, [pc, #328]	; (934 <usbtmc_app_task_iter+0x1b8>)
     7ec:	79db      	ldrb	r3, [r3, #7]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d100      	bne.n	7f4 <usbtmc_app_task_iter+0x78>
     7f2:	e08b      	b.n	90c <usbtmc_app_task_iter+0x190>
      { 
        tud_usbtmc_transmit_dev_msg_data(END_RESPONSE, tu_min32(sizeof(END_RESPONSE)-1,msgReqLen),true,false);
     7f4:	4b4e      	ldr	r3, [pc, #312]	; (930 <usbtmc_app_task_iter+0x1b4>)
     7f6:	6959      	ldr	r1, [r3, #20]
     7f8:	2900      	cmp	r1, #0
     7fa:	d000      	beq.n	7fe <usbtmc_app_task_iter+0x82>
     7fc:	2101      	movs	r1, #1
     7fe:	2300      	movs	r3, #0
     800:	2201      	movs	r2, #1
     802:	484d      	ldr	r0, [pc, #308]	; (938 <usbtmc_app_task_iter+0x1bc>)
     804:	4c4d      	ldr	r4, [pc, #308]	; (93c <usbtmc_app_task_iter+0x1c0>)
     806:	47a0      	blx	r4
        queryState    = 0;
     808:	4b49      	ldr	r3, [pc, #292]	; (930 <usbtmc_app_task_iter+0x1b4>)
     80a:	2200      	movs	r2, #0
     80c:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     80e:	611a      	str	r2, [r3, #16]
     810:	e008      	b.n	824 <usbtmc_app_task_iter+0xa8>
  switch(queryState) {
     812:	2b01      	cmp	r3, #1
     814:	d106      	bne.n	824 <usbtmc_app_task_iter+0xa8>
    queryDelayStart = board_millis();
     816:	4b4a      	ldr	r3, [pc, #296]	; (940 <usbtmc_app_task_iter+0x1c4>)
     818:	4798      	blx	r3
     81a:	4b4a      	ldr	r3, [pc, #296]	; (944 <usbtmc_app_task_iter+0x1c8>)
     81c:	67d8      	str	r0, [r3, #124]	; 0x7c
    queryState = 2;
     81e:	2202      	movs	r2, #2
     820:	4b43      	ldr	r3, [pc, #268]	; (930 <usbtmc_app_task_iter+0x1b4>)
     822:	81da      	strh	r2, [r3, #14]
    break;
  default:
    TU_ASSERT(false,);
    return;
  }
}
     824:	bd10      	pop	{r4, pc}
    if( (board_millis() - queryDelayStart) > resp_delay) {
     826:	4b46      	ldr	r3, [pc, #280]	; (940 <usbtmc_app_task_iter+0x1c4>)
     828:	4798      	blx	r3
     82a:	4b46      	ldr	r3, [pc, #280]	; (944 <usbtmc_app_task_iter+0x1c8>)
     82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     82e:	1ac0      	subs	r0, r0, r3
     830:	4b45      	ldr	r3, [pc, #276]	; (948 <usbtmc_app_task_iter+0x1cc>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	4298      	cmp	r0, r3
     836:	d9f5      	bls.n	824 <usbtmc_app_task_iter+0xa8>
      queryDelayStart = board_millis();
     838:	4b41      	ldr	r3, [pc, #260]	; (940 <usbtmc_app_task_iter+0x1c4>)
     83a:	4798      	blx	r3
     83c:	4b41      	ldr	r3, [pc, #260]	; (944 <usbtmc_app_task_iter+0x1c8>)
     83e:	67d8      	str	r0, [r3, #124]	; 0x7c
      queryState=3;
     840:	4b3b      	ldr	r3, [pc, #236]	; (930 <usbtmc_app_task_iter+0x1b4>)
     842:	2203      	movs	r2, #3
     844:	81da      	strh	r2, [r3, #14]
      status |= 0x10u; // MAV
     846:	781a      	ldrb	r2, [r3, #0]
     848:	2110      	movs	r1, #16
     84a:	430a      	orrs	r2, r1
     84c:	b2d2      	uxtb	r2, r2
     84e:	701a      	strb	r2, [r3, #0]
      status |= 0x40u; // SRQ
     850:	781a      	ldrb	r2, [r3, #0]
     852:	2140      	movs	r1, #64	; 0x40
     854:	430a      	orrs	r2, r1
     856:	b2d2      	uxtb	r2, r2
     858:	701a      	strb	r2, [r3, #0]
     85a:	e7e3      	b.n	824 <usbtmc_app_task_iter+0xa8>
    if( (board_millis() - queryDelayStart) > resp_delay) {
     85c:	4b38      	ldr	r3, [pc, #224]	; (940 <usbtmc_app_task_iter+0x1c4>)
     85e:	4798      	blx	r3
     860:	4b38      	ldr	r3, [pc, #224]	; (944 <usbtmc_app_task_iter+0x1c8>)
     862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     864:	1ac0      	subs	r0, r0, r3
     866:	4b38      	ldr	r3, [pc, #224]	; (948 <usbtmc_app_task_iter+0x1cc>)
     868:	681b      	ldr	r3, [r3, #0]
     86a:	4298      	cmp	r0, r3
     86c:	d9da      	bls.n	824 <usbtmc_app_task_iter+0xa8>
      queryState = 4;
     86e:	2204      	movs	r2, #4
     870:	4b2f      	ldr	r3, [pc, #188]	; (930 <usbtmc_app_task_iter+0x1b4>)
     872:	81da      	strh	r2, [r3, #14]
     874:	e7d6      	b.n	824 <usbtmc_app_task_iter+0xa8>
        tud_usbtmc_transmit_dev_msg_data(IDN, tu_min32(sizeof(IDN)-1,msgReqLen),true,false);
     876:	4b2e      	ldr	r3, [pc, #184]	; (930 <usbtmc_app_task_iter+0x1b4>)
     878:	6959      	ldr	r1, [r3, #20]
     87a:	2906      	cmp	r1, #6
     87c:	d900      	bls.n	880 <usbtmc_app_task_iter+0x104>
     87e:	2106      	movs	r1, #6
     880:	2300      	movs	r3, #0
     882:	2201      	movs	r2, #1
     884:	4831      	ldr	r0, [pc, #196]	; (94c <usbtmc_app_task_iter+0x1d0>)
     886:	4c2d      	ldr	r4, [pc, #180]	; (93c <usbtmc_app_task_iter+0x1c0>)
     888:	47a0      	blx	r4
        queryState    = 0;
     88a:	4b29      	ldr	r3, [pc, #164]	; (930 <usbtmc_app_task_iter+0x1b4>)
     88c:	2200      	movs	r2, #0
     88e:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     890:	611a      	str	r2, [r3, #16]
     892:	e7c7      	b.n	824 <usbtmc_app_task_iter+0xa8>
        tud_usbtmc_transmit_dev_msg_data(adc_voltage_str, tu_min32(sizeof(adc_voltage_str)-1,msgReqLen),true,false);
     894:	4b26      	ldr	r3, [pc, #152]	; (930 <usbtmc_app_task_iter+0x1b4>)
     896:	6959      	ldr	r1, [r3, #20]
     898:	2909      	cmp	r1, #9
     89a:	d900      	bls.n	89e <usbtmc_app_task_iter+0x122>
     89c:	2109      	movs	r1, #9
     89e:	2300      	movs	r3, #0
     8a0:	2201      	movs	r2, #1
     8a2:	482b      	ldr	r0, [pc, #172]	; (950 <usbtmc_app_task_iter+0x1d4>)
     8a4:	4c25      	ldr	r4, [pc, #148]	; (93c <usbtmc_app_task_iter+0x1c0>)
     8a6:	47a0      	blx	r4
        queryState    = 0;
     8a8:	4b21      	ldr	r3, [pc, #132]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8aa:	2200      	movs	r2, #0
     8ac:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     8ae:	611a      	str	r2, [r3, #16]
     8b0:	e7b8      	b.n	824 <usbtmc_app_task_iter+0xa8>
        tud_usbtmc_transmit_dev_msg_data(dac_voltage_str, tu_min32(sizeof(dac_voltage_str)-1,msgReqLen),true,false);
     8b2:	4b1f      	ldr	r3, [pc, #124]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8b4:	6959      	ldr	r1, [r3, #20]
     8b6:	2909      	cmp	r1, #9
     8b8:	d900      	bls.n	8bc <usbtmc_app_task_iter+0x140>
     8ba:	2109      	movs	r1, #9
     8bc:	2300      	movs	r3, #0
     8be:	2201      	movs	r2, #1
     8c0:	4824      	ldr	r0, [pc, #144]	; (954 <usbtmc_app_task_iter+0x1d8>)
     8c2:	4c1e      	ldr	r4, [pc, #120]	; (93c <usbtmc_app_task_iter+0x1c0>)
     8c4:	47a0      	blx	r4
        queryState    = 0;
     8c6:	4b1a      	ldr	r3, [pc, #104]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8c8:	2200      	movs	r2, #0
     8ca:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     8cc:	611a      	str	r2, [r3, #16]
     8ce:	e7a9      	b.n	824 <usbtmc_app_task_iter+0xa8>
        tud_usbtmc_transmit_dev_msg_data(gpio_lev_str, tu_min32(sizeof(gpio_lev_str)-1,msgReqLen),true,false);
     8d0:	4b17      	ldr	r3, [pc, #92]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8d2:	6959      	ldr	r1, [r3, #20]
     8d4:	2900      	cmp	r1, #0
     8d6:	d000      	beq.n	8da <usbtmc_app_task_iter+0x15e>
     8d8:	2101      	movs	r1, #1
     8da:	2300      	movs	r3, #0
     8dc:	2201      	movs	r2, #1
     8de:	481e      	ldr	r0, [pc, #120]	; (958 <usbtmc_app_task_iter+0x1dc>)
     8e0:	4c16      	ldr	r4, [pc, #88]	; (93c <usbtmc_app_task_iter+0x1c0>)
     8e2:	47a0      	blx	r4
        queryState    = 0;
     8e4:	4b12      	ldr	r3, [pc, #72]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8e6:	2200      	movs	r2, #0
     8e8:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     8ea:	611a      	str	r2, [r3, #16]
     8ec:	e79a      	b.n	824 <usbtmc_app_task_iter+0xa8>
        tud_usbtmc_transmit_dev_msg_data(gpio_dir_str, tu_min32(sizeof(gpio_dir_str)-1,msgReqLen),true,false);
     8ee:	4b10      	ldr	r3, [pc, #64]	; (930 <usbtmc_app_task_iter+0x1b4>)
     8f0:	6959      	ldr	r1, [r3, #20]
     8f2:	2904      	cmp	r1, #4
     8f4:	d900      	bls.n	8f8 <usbtmc_app_task_iter+0x17c>
     8f6:	2104      	movs	r1, #4
     8f8:	2300      	movs	r3, #0
     8fa:	2201      	movs	r2, #1
     8fc:	4817      	ldr	r0, [pc, #92]	; (95c <usbtmc_app_task_iter+0x1e0>)
     8fe:	4c0f      	ldr	r4, [pc, #60]	; (93c <usbtmc_app_task_iter+0x1c0>)
     900:	47a0      	blx	r4
        queryState    = 0;
     902:	4b0b      	ldr	r3, [pc, #44]	; (930 <usbtmc_app_task_iter+0x1b4>)
     904:	2200      	movs	r2, #0
     906:	81da      	strh	r2, [r3, #14]
        bulkInStarted = 0;
     908:	611a      	str	r2, [r3, #16]
     90a:	e78b      	b.n	824 <usbtmc_app_task_iter+0xa8>
        buffer_tx_ix = tu_min32(buffer_len,msgReqLen);
     90c:	4a08      	ldr	r2, [pc, #32]	; (930 <usbtmc_app_task_iter+0x1b4>)
     90e:	6853      	ldr	r3, [r2, #4]
     910:	6952      	ldr	r2, [r2, #20]
     912:	0019      	movs	r1, r3
     914:	4293      	cmp	r3, r2
     916:	d900      	bls.n	91a <usbtmc_app_task_iter+0x19e>
     918:	0011      	movs	r1, r2
     91a:	4805      	ldr	r0, [pc, #20]	; (930 <usbtmc_app_task_iter+0x1b4>)
     91c:	6081      	str	r1, [r0, #8]
        tud_usbtmc_transmit_dev_msg_data(buffer, buffer_tx_ix, buffer_tx_ix == buffer_len, false);
     91e:	1acb      	subs	r3, r1, r3
     920:	425a      	negs	r2, r3
     922:	415a      	adcs	r2, r3
     924:	b2d2      	uxtb	r2, r2
     926:	3018      	adds	r0, #24
     928:	2300      	movs	r3, #0
     92a:	4c04      	ldr	r4, [pc, #16]	; (93c <usbtmc_app_task_iter+0x1c0>)
     92c:	47a0      	blx	r4
     92e:	e779      	b.n	824 <usbtmc_app_task_iter+0xa8>
     930:	200002e0 	.word	0x200002e0
     934:	200003e0 	.word	0x200003e0
     938:	00007c60 	.word	0x00007c60
     93c:	000010a1 	.word	0x000010a1
     940:	00000669 	.word	0x00000669
     944:	20000360 	.word	0x20000360
     948:	20000008 	.word	0x20000008
     94c:	00007c58 	.word	0x00007c58
     950:	200005e8 	.word	0x200005e8
     954:	200005dc 	.word	0x200005dc
     958:	200005d8 	.word	0x200005d8
     95c:	200005f4 	.word	0x200005f4

00000960 <tud_usbtmc_initiate_clear_cb>:

bool tud_usbtmc_initiate_clear_cb(uint8_t *tmcResult)
{
  *tmcResult = USBTMC_STATUS_SUCCESS;
     960:	2301      	movs	r3, #1
     962:	7003      	strb	r3, [r0, #0]
  queryState = 0;
     964:	4b03      	ldr	r3, [pc, #12]	; (974 <tud_usbtmc_initiate_clear_cb+0x14>)
     966:	2200      	movs	r2, #0
     968:	81da      	strh	r2, [r3, #14]
  bulkInStarted = false;
     96a:	611a      	str	r2, [r3, #16]
  status = 0;
     96c:	701a      	strb	r2, [r3, #0]
  return true;
}
     96e:	2001      	movs	r0, #1
     970:	4770      	bx	lr
     972:	46c0      	nop			; (mov r8, r8)
     974:	200002e0 	.word	0x200002e0

00000978 <tud_usbtmc_check_clear_cb>:

bool tud_usbtmc_check_clear_cb(usbtmc_get_clear_status_rsp_t *rsp)
{
  queryState = 0;
     978:	4b07      	ldr	r3, [pc, #28]	; (998 <tud_usbtmc_check_clear_cb+0x20>)
     97a:	2200      	movs	r2, #0
     97c:	81da      	strh	r2, [r3, #14]
  bulkInStarted = false;
     97e:	611a      	str	r2, [r3, #16]
  status = 0;
     980:	2100      	movs	r1, #0
     982:	7019      	strb	r1, [r3, #0]
  buffer_tx_ix = 0u;
     984:	609a      	str	r2, [r3, #8]
  buffer_len = 0u;
     986:	605a      	str	r2, [r3, #4]
  rsp->USBTMC_status = USBTMC_STATUS_SUCCESS;
     988:	3201      	adds	r2, #1
     98a:	7002      	strb	r2, [r0, #0]
  rsp->bmClear.BulkInFifoBytes = 0u;
     98c:	7843      	ldrb	r3, [r0, #1]
     98e:	4393      	bics	r3, r2
     990:	7043      	strb	r3, [r0, #1]
  return true;
}
     992:	2001      	movs	r0, #1
     994:	4770      	bx	lr
     996:	46c0      	nop			; (mov r8, r8)
     998:	200002e0 	.word	0x200002e0

0000099c <tud_usbtmc_initiate_abort_bulk_in_cb>:
bool tud_usbtmc_initiate_abort_bulk_in_cb(uint8_t *tmcResult)
{
  bulkInStarted = 0;
     99c:	2200      	movs	r2, #0
     99e:	4b03      	ldr	r3, [pc, #12]	; (9ac <tud_usbtmc_initiate_abort_bulk_in_cb+0x10>)
     9a0:	611a      	str	r2, [r3, #16]
  *tmcResult = USBTMC_STATUS_SUCCESS;
     9a2:	2301      	movs	r3, #1
     9a4:	7003      	strb	r3, [r0, #0]
  return true;
}
     9a6:	2001      	movs	r0, #1
     9a8:	4770      	bx	lr
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	200002e0 	.word	0x200002e0

000009b0 <tud_usbtmc_check_abort_bulk_in_cb>:
bool tud_usbtmc_check_abort_bulk_in_cb(usbtmc_check_abort_bulk_rsp_t *rsp)
{
     9b0:	b510      	push	{r4, lr}
  (void)rsp;
  tud_usbtmc_start_bus_read();
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <tud_usbtmc_check_abort_bulk_in_cb+0xc>)
     9b4:	4798      	blx	r3
  return true;
}
     9b6:	2001      	movs	r0, #1
     9b8:	bd10      	pop	{r4, pc}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	000013a1 	.word	0x000013a1

000009c0 <tud_usbtmc_initiate_abort_bulk_out_cb>:

bool tud_usbtmc_initiate_abort_bulk_out_cb(uint8_t *tmcResult)
{
  *tmcResult = USBTMC_STATUS_SUCCESS;
     9c0:	2301      	movs	r3, #1
     9c2:	7003      	strb	r3, [r0, #0]
  return true;

}
     9c4:	2001      	movs	r0, #1
     9c6:	4770      	bx	lr

000009c8 <tud_usbtmc_check_abort_bulk_out_cb>:
bool tud_usbtmc_check_abort_bulk_out_cb(usbtmc_check_abort_bulk_rsp_t *rsp)
{
     9c8:	b510      	push	{r4, lr}
  (void)rsp;
  tud_usbtmc_start_bus_read();
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <tud_usbtmc_check_abort_bulk_out_cb+0xc>)
     9cc:	4798      	blx	r3
  return true;
}
     9ce:	2001      	movs	r0, #1
     9d0:	bd10      	pop	{r4, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	000013a1 	.word	0x000013a1

000009d8 <tud_usbtmc_bulkIn_clearFeature_cb>:

void tud_usbtmc_bulkIn_clearFeature_cb(void)
{
}
     9d8:	4770      	bx	lr
	...

000009dc <tud_usbtmc_bulkOut_clearFeature_cb>:
void tud_usbtmc_bulkOut_clearFeature_cb(void)
{
     9dc:	b510      	push	{r4, lr}
  tud_usbtmc_start_bus_read();
     9de:	4b01      	ldr	r3, [pc, #4]	; (9e4 <tud_usbtmc_bulkOut_clearFeature_cb+0x8>)
     9e0:	4798      	blx	r3
}
     9e2:	bd10      	pop	{r4, pc}
     9e4:	000013a1 	.word	0x000013a1

000009e8 <tud_usbtmc_get_stb_cb>:

// Return status byte, but put the transfer result status code in the rspResult argument.
uint8_t tud_usbtmc_get_stb_cb(uint8_t *tmcResult)
{
     9e8:	b510      	push	{r4, lr}
  uint8_t old_status = status;
     9ea:	4a05      	ldr	r2, [pc, #20]	; (a00 <tud_usbtmc_get_stb_cb+0x18>)
     9ec:	7813      	ldrb	r3, [r2, #0]
     9ee:	b2db      	uxtb	r3, r3
  status = (uint8_t)(status & ~(IEEE4882_STB_SRQ)); // clear SRQ
     9f0:	7811      	ldrb	r1, [r2, #0]
     9f2:	2440      	movs	r4, #64	; 0x40
     9f4:	43a1      	bics	r1, r4
     9f6:	7011      	strb	r1, [r2, #0]

  *tmcResult = USBTMC_STATUS_SUCCESS;
     9f8:	2201      	movs	r2, #1
     9fa:	7002      	strb	r2, [r0, #0]
  // Increment status so that we see different results on each read...

  return old_status;
}
     9fc:	0018      	movs	r0, r3
     9fe:	bd10      	pop	{r4, pc}
     a00:	200002e0 	.word	0x200002e0

00000a04 <tud_usbtmc_indicator_pulse_cb>:

bool tud_usbtmc_indicator_pulse_cb(tusb_control_request_t const * msg, uint8_t *tmcResult)
{
     a04:	b510      	push	{r4, lr}
     a06:	000c      	movs	r4, r1
  (void)msg;
  led_indicator_pulse();
     a08:	4b02      	ldr	r3, [pc, #8]	; (a14 <tud_usbtmc_indicator_pulse_cb+0x10>)
     a0a:	4798      	blx	r3
  *tmcResult = USBTMC_STATUS_SUCCESS;
     a0c:	2301      	movs	r3, #1
     a0e:	7023      	strb	r3, [r4, #0]
  return true;
}
     a10:	2001      	movs	r0, #1
     a12:	bd10      	pop	{r4, pc}
     a14:	00000261 	.word	0x00000261

00000a18 <adc_get_sample>:
  while (ADC->INTFLAG.bit.RESRDY == 0);            // wait for results
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;           // clear result flag
  // uint32_t adc_result = ADC->RESULT.reg;        // throw away first result
}

uint32_t adc_get_sample(void) {
     a18:	b510      	push	{r4, lr}
  ADC->SWTRIG.bit.START = true;                    // Use software trigger to start conversion
     a1a:	4a0b      	ldr	r2, [pc, #44]	; (a48 <adc_get_sample+0x30>)
     a1c:	7b13      	ldrb	r3, [r2, #12]
     a1e:	2102      	movs	r1, #2
     a20:	430b      	orrs	r3, r1
     a22:	7313      	strb	r3, [r2, #12]
  while (ADC->INTFLAG.bit.RESRDY == 0);            // wait for results
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <adc_get_sample+0x30>)
     a26:	7e1b      	ldrb	r3, [r3, #24]
     a28:	07db      	lsls	r3, r3, #31
     a2a:	d5fb      	bpl.n	a24 <adc_get_sample+0xc>
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;           // clear result flag
     a2c:	4b06      	ldr	r3, [pc, #24]	; (a48 <adc_get_sample+0x30>)
     a2e:	2201      	movs	r2, #1
     a30:	761a      	strb	r2, [r3, #24]
  return ADC->RESULT.reg * 2.0;
     a32:	8b58      	ldrh	r0, [r3, #26]
     a34:	b280      	uxth	r0, r0
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <adc_get_sample+0x34>)
     a38:	4798      	blx	r3
     a3a:	0002      	movs	r2, r0
     a3c:	000b      	movs	r3, r1
     a3e:	4c04      	ldr	r4, [pc, #16]	; (a50 <adc_get_sample+0x38>)
     a40:	47a0      	blx	r4
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <adc_get_sample+0x3c>)
     a44:	4798      	blx	r3
}
     a46:	bd10      	pop	{r4, pc}
     a48:	42004000 	.word	0x42004000
     a4c:	000054cd 	.word	0x000054cd
     a50:	00003cb1 	.word	0x00003cb1
     a54:	00003591 	.word	0x00003591

00000a58 <get_value>:
void gpio_setup(void) {
  PORT->Group[0].DIRSET.reg     = PORT_PA10;          // PA10 as output
  PORT->Group[0].OUTCLR.reg     = PORT_PA10;          // PA10 initialized low
}

char * get_value(char *in_string) {
     a58:	b510      	push	{r4, lr}
  char *ptr = strrchr(in_string,' ') + 1;
     a5a:	2120      	movs	r1, #32
     a5c:	4b01      	ldr	r3, [pc, #4]	; (a64 <get_value+0xc>)
     a5e:	4798      	blx	r3
     a60:	3001      	adds	r0, #1
  return ptr;
}
     a62:	bd10      	pop	{r4, pc}
     a64:	00005bd5 	.word	0x00005bd5

00000a68 <ftoa>:
  command[command_len] = '\0';
  return command;
}

void ftoa(float num, char *str)
{
     a68:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6a:	b087      	sub	sp, #28
     a6c:	1c05      	adds	r5, r0, #0
     a6e:	000c      	movs	r4, r1
  int intpart = num;
     a70:	4f1f      	ldr	r7, [pc, #124]	; (af0 <ftoa+0x88>)
     a72:	47b8      	blx	r7
     a74:	0006      	movs	r6, r0
  int intdecimal;
  uint32_t i;
  float decimal_part;
  char decimal[20];

  memset(str, 0x0, 20);
     a76:	2214      	movs	r2, #20
     a78:	2100      	movs	r1, #0
     a7a:	0020      	movs	r0, r4
     a7c:	4b1d      	ldr	r3, [pc, #116]	; (af4 <ftoa+0x8c>)
     a7e:	4798      	blx	r3
  itoa(num, str, 10);
     a80:	220a      	movs	r2, #10
     a82:	0021      	movs	r1, r4
     a84:	0030      	movs	r0, r6
     a86:	4b1c      	ldr	r3, [pc, #112]	; (af8 <ftoa+0x90>)
     a88:	4798      	blx	r3

  strcat(str, ".");
     a8a:	0020      	movs	r0, r4
     a8c:	4b1b      	ldr	r3, [pc, #108]	; (afc <ftoa+0x94>)
     a8e:	4798      	blx	r3
     a90:	1820      	adds	r0, r4, r0
     a92:	2202      	movs	r2, #2
     a94:	491a      	ldr	r1, [pc, #104]	; (b00 <ftoa+0x98>)
     a96:	4b1b      	ldr	r3, [pc, #108]	; (b04 <ftoa+0x9c>)
     a98:	4798      	blx	r3

  decimal_part = num - intpart;
     a9a:	0030      	movs	r0, r6
     a9c:	4b1a      	ldr	r3, [pc, #104]	; (b08 <ftoa+0xa0>)
     a9e:	4798      	blx	r3
     aa0:	1c01      	adds	r1, r0, #0
     aa2:	1c28      	adds	r0, r5, #0
     aa4:	4b19      	ldr	r3, [pc, #100]	; (b0c <ftoa+0xa4>)
     aa6:	4798      	blx	r3
  intdecimal = decimal_part * 1000;
     aa8:	4919      	ldr	r1, [pc, #100]	; (b10 <ftoa+0xa8>)
     aaa:	4b1a      	ldr	r3, [pc, #104]	; (b14 <ftoa+0xac>)
     aac:	4798      	blx	r3
     aae:	47b8      	blx	r7

  if(intdecimal < 0)
     ab0:	2800      	cmp	r0, #0
     ab2:	db05      	blt.n	ac0 <ftoa+0x58>
  {
    intdecimal = -intdecimal;
  }
  itoa(intdecimal, decimal, 10);
     ab4:	220a      	movs	r2, #10
     ab6:	a901      	add	r1, sp, #4
     ab8:	4b0f      	ldr	r3, [pc, #60]	; (af8 <ftoa+0x90>)
     aba:	4798      	blx	r3
  for(i =0;i < (3 - strlen(decimal));i++)
     abc:	2500      	movs	r5, #0
     abe:	e00a      	b.n	ad6 <ftoa+0x6e>
    intdecimal = -intdecimal;
     ac0:	4240      	negs	r0, r0
     ac2:	e7f7      	b.n	ab4 <ftoa+0x4c>
  {
    strcat(str, "0");
     ac4:	0020      	movs	r0, r4
     ac6:	4b0d      	ldr	r3, [pc, #52]	; (afc <ftoa+0x94>)
     ac8:	4798      	blx	r3
     aca:	1820      	adds	r0, r4, r0
     acc:	2202      	movs	r2, #2
     ace:	4912      	ldr	r1, [pc, #72]	; (b18 <ftoa+0xb0>)
     ad0:	4b0c      	ldr	r3, [pc, #48]	; (b04 <ftoa+0x9c>)
     ad2:	4798      	blx	r3
  for(i =0;i < (3 - strlen(decimal));i++)
     ad4:	3501      	adds	r5, #1
     ad6:	a801      	add	r0, sp, #4
     ad8:	4b08      	ldr	r3, [pc, #32]	; (afc <ftoa+0x94>)
     ada:	4798      	blx	r3
     adc:	2303      	movs	r3, #3
     ade:	1a18      	subs	r0, r3, r0
     ae0:	4285      	cmp	r5, r0
     ae2:	d3ef      	bcc.n	ac4 <ftoa+0x5c>
  }
  strcat(str, decimal);
     ae4:	a901      	add	r1, sp, #4
     ae6:	0020      	movs	r0, r4
     ae8:	4b0c      	ldr	r3, [pc, #48]	; (b1c <ftoa+0xb4>)
     aea:	4798      	blx	r3
     aec:	b007      	add	sp, #28
     aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af0:	00003b45 	.word	0x00003b45
     af4:	00005a73 	.word	0x00005a73
     af8:	00005a45 	.word	0x00005a45
     afc:	00005b7f 	.word	0x00005b7f
     b00:	00007c64 	.word	0x00007c64
     b04:	00005a61 	.word	0x00005a61
     b08:	00003b85 	.word	0x00003b85
     b0c:	0000380d 	.word	0x0000380d
     b10:	447a0000 	.word	0x447a0000
     b14:	000035cd 	.word	0x000035cd
     b18:	00007c68 	.word	0x00007c68
     b1c:	00005b65 	.word	0x00005b65

00000b20 <tud_usbtmc_msg_data_cb>:
{
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
     b22:	b083      	sub	sp, #12
     b24:	9001      	str	r0, [sp, #4]
     b26:	000d      	movs	r5, r1
     b28:	0014      	movs	r4, r2
  if(len + buffer_len < sizeof(buffer))
     b2a:	4bae      	ldr	r3, [pc, #696]	; (de4 <tud_usbtmc_msg_data_cb+0x2c4>)
     b2c:	6858      	ldr	r0, [r3, #4]
     b2e:	1847      	adds	r7, r0, r1
     b30:	2fe0      	cmp	r7, #224	; 0xe0
     b32:	d902      	bls.n	b3a <tud_usbtmc_msg_data_cb+0x1a>
    return false; // buffer overflow!
     b34:	2000      	movs	r0, #0
}
     b36:	b003      	add	sp, #12
     b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(&(buffer[buffer_len]), data, len);
     b3a:	001e      	movs	r6, r3
     b3c:	3318      	adds	r3, #24
     b3e:	1818      	adds	r0, r3, r0
     b40:	000a      	movs	r2, r1
     b42:	9901      	ldr	r1, [sp, #4]
     b44:	4ba8      	ldr	r3, [pc, #672]	; (de8 <tud_usbtmc_msg_data_cb+0x2c8>)
     b46:	4798      	blx	r3
    buffer_len += len;
     b48:	6077      	str	r7, [r6, #4]
  queryState     = transfer_complete;
     b4a:	b2a3      	uxth	r3, r4
     b4c:	81f3      	strh	r3, [r6, #14]
  idnQuery       = false;
     b4e:	2300      	movs	r3, #0
     b50:	7333      	strb	r3, [r6, #12]
  rst_cmd        = false;
     b52:	4aa6      	ldr	r2, [pc, #664]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     b54:	7113      	strb	r3, [r2, #4]
  dac_cmd        = false;
     b56:	7153      	strb	r3, [r2, #5]
  dac_query      = false;
     b58:	7053      	strb	r3, [r2, #1]
  adc_query      = false;
     b5a:	7013      	strb	r3, [r2, #0]
  gpio_lev_cmd   = false;
     b5c:	7193      	strb	r3, [r2, #6]
  gpio_lev_query = false;
     b5e:	7093      	strb	r3, [r2, #2]
  gpio_dir_cmd   = false;
     b60:	71d3      	strb	r3, [r2, #7]
  gpio_dir_query = false;
     b62:	70d3      	strb	r3, [r2, #3]
  if(transfer_complete && (len >=4) && !strncasecmp(IDN_QUERY,data,5))
     b64:	2c00      	cmp	r4, #0
     b66:	d019      	beq.n	b9c <tud_usbtmc_msg_data_cb+0x7c>
     b68:	2d03      	cmp	r5, #3
     b6a:	d917      	bls.n	b9c <tud_usbtmc_msg_data_cb+0x7c>
     b6c:	2205      	movs	r2, #5
     b6e:	9901      	ldr	r1, [sp, #4]
     b70:	489f      	ldr	r0, [pc, #636]	; (df0 <tud_usbtmc_msg_data_cb+0x2d0>)
     b72:	4ba0      	ldr	r3, [pc, #640]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     b74:	4798      	blx	r3
     b76:	2800      	cmp	r0, #0
     b78:	d110      	bne.n	b9c <tud_usbtmc_msg_data_cb+0x7c>
    idnQuery = true;
     b7a:	2201      	movs	r2, #1
     b7c:	4b99      	ldr	r3, [pc, #612]	; (de4 <tud_usbtmc_msg_data_cb+0x2c4>)
     b7e:	731a      	strb	r2, [r3, #12]
  if(transfer_complete && !strncasecmp("delay ",data,5))
     b80:	2c00      	cmp	r4, #0
     b82:	d007      	beq.n	b94 <tud_usbtmc_msg_data_cb+0x74>
     b84:	2205      	movs	r2, #5
     b86:	9901      	ldr	r1, [sp, #4]
     b88:	489b      	ldr	r0, [pc, #620]	; (df8 <tud_usbtmc_msg_data_cb+0x2d8>)
     b8a:	4b9a      	ldr	r3, [pc, #616]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     b8c:	4798      	blx	r3
     b8e:	1e04      	subs	r4, r0, #0
     b90:	d100      	bne.n	b94 <tud_usbtmc_msg_data_cb+0x74>
     b92:	e114      	b.n	dbe <tud_usbtmc_msg_data_cb+0x29e>
  tud_usbtmc_start_bus_read();
     b94:	4b99      	ldr	r3, [pc, #612]	; (dfc <tud_usbtmc_msg_data_cb+0x2dc>)
     b96:	4798      	blx	r3
  return true;
     b98:	2001      	movs	r0, #1
     b9a:	e7cc      	b.n	b36 <tud_usbtmc_msg_data_cb+0x16>
  else if (transfer_complete && (len >=4) && !strncasecmp(RST_CMD,data,4))
     b9c:	2c00      	cmp	r4, #0
     b9e:	d014      	beq.n	bca <tud_usbtmc_msg_data_cb+0xaa>
     ba0:	2d03      	cmp	r5, #3
     ba2:	d912      	bls.n	bca <tud_usbtmc_msg_data_cb+0xaa>
     ba4:	2204      	movs	r2, #4
     ba6:	9901      	ldr	r1, [sp, #4]
     ba8:	4895      	ldr	r0, [pc, #596]	; (e00 <tud_usbtmc_msg_data_cb+0x2e0>)
     baa:	4b92      	ldr	r3, [pc, #584]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     bac:	4798      	blx	r3
     bae:	2800      	cmp	r0, #0
     bb0:	d10b      	bne.n	bca <tud_usbtmc_msg_data_cb+0xaa>
    rst_cmd = true;
     bb2:	2201      	movs	r2, #1
     bb4:	4b8d      	ldr	r3, [pc, #564]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     bb6:	711a      	strb	r2, [r3, #4]
    DAC->DATA.reg = 0x0000;                // clear DAC value
     bb8:	2200      	movs	r2, #0
     bba:	4b92      	ldr	r3, [pc, #584]	; (e04 <tud_usbtmc_msg_data_cb+0x2e4>)
     bbc:	811a      	strh	r2, [r3, #8]
    PORT->Group[0].DIRSET.reg = PORT_PA10; // PA10 as output
     bbe:	4b92      	ldr	r3, [pc, #584]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     bc0:	2280      	movs	r2, #128	; 0x80
     bc2:	00d2      	lsls	r2, r2, #3
     bc4:	609a      	str	r2, [r3, #8]
    PORT->Group[0].OUTCLR.reg = PORT_PA10; // drive low value
     bc6:	615a      	str	r2, [r3, #20]
     bc8:	e7da      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
  else if (transfer_complete && (len >=16) && !strncasecmp(DAC_CMD,data,16))
     bca:	2c00      	cmp	r4, #0
     bcc:	d008      	beq.n	be0 <tud_usbtmc_msg_data_cb+0xc0>
     bce:	2d0f      	cmp	r5, #15
     bd0:	d906      	bls.n	be0 <tud_usbtmc_msg_data_cb+0xc0>
     bd2:	2210      	movs	r2, #16
     bd4:	9901      	ldr	r1, [sp, #4]
     bd6:	488d      	ldr	r0, [pc, #564]	; (e0c <tud_usbtmc_msg_data_cb+0x2ec>)
     bd8:	4b86      	ldr	r3, [pc, #536]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     bda:	4798      	blx	r3
     bdc:	2800      	cmp	r0, #0
     bde:	d040      	beq.n	c62 <tud_usbtmc_msg_data_cb+0x142>
  else if (transfer_complete && (len >= 16) && !strncasecmp(DAC_QUERY,data,16))
     be0:	2c00      	cmp	r4, #0
     be2:	d008      	beq.n	bf6 <tud_usbtmc_msg_data_cb+0xd6>
     be4:	2d0f      	cmp	r5, #15
     be6:	d906      	bls.n	bf6 <tud_usbtmc_msg_data_cb+0xd6>
     be8:	2210      	movs	r2, #16
     bea:	9901      	ldr	r1, [sp, #4]
     bec:	4888      	ldr	r0, [pc, #544]	; (e10 <tud_usbtmc_msg_data_cb+0x2f0>)
     bee:	4b81      	ldr	r3, [pc, #516]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     bf0:	4798      	blx	r3
     bf2:	2800      	cmp	r0, #0
     bf4:	d04e      	beq.n	c94 <tud_usbtmc_msg_data_cb+0x174>
  else if (transfer_complete && (len >= 11) && !strncasecmp(ADC_QUERY,data,11))
     bf6:	2c00      	cmp	r4, #0
     bf8:	d008      	beq.n	c0c <tud_usbtmc_msg_data_cb+0xec>
     bfa:	2d0a      	cmp	r5, #10
     bfc:	d906      	bls.n	c0c <tud_usbtmc_msg_data_cb+0xec>
     bfe:	220b      	movs	r2, #11
     c00:	9901      	ldr	r1, [sp, #4]
     c02:	4884      	ldr	r0, [pc, #528]	; (e14 <tud_usbtmc_msg_data_cb+0x2f4>)
     c04:	4b7b      	ldr	r3, [pc, #492]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     c06:	4798      	blx	r3
     c08:	2800      	cmp	r0, #0
     c0a:	d057      	beq.n	cbc <tud_usbtmc_msg_data_cb+0x19c>
  else if (transfer_complete && (len >= 10) && !strncasecmp(GPIO_LEV_CMD,data,10))
     c0c:	2c00      	cmp	r4, #0
     c0e:	d008      	beq.n	c22 <tud_usbtmc_msg_data_cb+0x102>
     c10:	2d09      	cmp	r5, #9
     c12:	d906      	bls.n	c22 <tud_usbtmc_msg_data_cb+0x102>
     c14:	220a      	movs	r2, #10
     c16:	9901      	ldr	r1, [sp, #4]
     c18:	487f      	ldr	r0, [pc, #508]	; (e18 <tud_usbtmc_msg_data_cb+0x2f8>)
     c1a:	4b76      	ldr	r3, [pc, #472]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     c1c:	4798      	blx	r3
     c1e:	2800      	cmp	r0, #0
     c20:	d063      	beq.n	cea <tud_usbtmc_msg_data_cb+0x1ca>
  else if (transfer_complete && (len >= 10) && !strncasecmp(GPIO_LEV_QUERY,data,10))
     c22:	2c00      	cmp	r4, #0
     c24:	d07e      	beq.n	d24 <tud_usbtmc_msg_data_cb+0x204>
     c26:	2d09      	cmp	r5, #9
     c28:	d97c      	bls.n	d24 <tud_usbtmc_msg_data_cb+0x204>
     c2a:	220a      	movs	r2, #10
     c2c:	9901      	ldr	r1, [sp, #4]
     c2e:	487b      	ldr	r0, [pc, #492]	; (e1c <tud_usbtmc_msg_data_cb+0x2fc>)
     c30:	4b70      	ldr	r3, [pc, #448]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     c32:	4798      	blx	r3
     c34:	2800      	cmp	r0, #0
     c36:	d175      	bne.n	d24 <tud_usbtmc_msg_data_cb+0x204>
    gpio_lev_query = true;
     c38:	2201      	movs	r2, #1
     c3a:	4b6c      	ldr	r3, [pc, #432]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     c3c:	709a      	strb	r2, [r3, #2]
    if ((PORT->Group[0].IN.reg & PORT_PA10) || ((PORT->Group[0].DIR.reg & PORT_PA10) && (PORT->Group[0].OUT.reg & PORT_PA10)))
     c3e:	4b72      	ldr	r3, [pc, #456]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     c40:	6a1b      	ldr	r3, [r3, #32]
     c42:	055b      	lsls	r3, r3, #21
     c44:	d407      	bmi.n	c56 <tud_usbtmc_msg_data_cb+0x136>
     c46:	4b70      	ldr	r3, [pc, #448]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	055b      	lsls	r3, r3, #21
     c4c:	d564      	bpl.n	d18 <tud_usbtmc_msg_data_cb+0x1f8>
     c4e:	4b6e      	ldr	r3, [pc, #440]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	055b      	lsls	r3, r3, #21
     c54:	d560      	bpl.n	d18 <tud_usbtmc_msg_data_cb+0x1f8>
      strcpy(gpio_lev_str,"1");
     c56:	2202      	movs	r2, #2
     c58:	4971      	ldr	r1, [pc, #452]	; (e20 <tud_usbtmc_msg_data_cb+0x300>)
     c5a:	4872      	ldr	r0, [pc, #456]	; (e24 <tud_usbtmc_msg_data_cb+0x304>)
     c5c:	4b62      	ldr	r3, [pc, #392]	; (de8 <tud_usbtmc_msg_data_cb+0x2c8>)
     c5e:	4798      	blx	r3
     c60:	e78e      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    dac_cmd            = true;
     c62:	2201      	movs	r2, #1
     c64:	4b61      	ldr	r3, [pc, #388]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     c66:	715a      	strb	r2, [r3, #5]
    char *ptr_value    = get_value(data);
     c68:	9801      	ldr	r0, [sp, #4]
     c6a:	4b6f      	ldr	r3, [pc, #444]	; (e28 <tud_usbtmc_msg_data_cb+0x308>)
     c6c:	4798      	blx	r3
    float dac_voltage  = strtof(ptr_value,NULL);
     c6e:	2100      	movs	r1, #0
     c70:	4b6e      	ldr	r3, [pc, #440]	; (e2c <tud_usbtmc_msg_data_cb+0x30c>)
     c72:	4798      	blx	r3
    uint16_t dac_value = (int)( (dac_voltage / DAC_REF_VOLTAGE) * DAC_MAX_VALUE );
     c74:	4b6e      	ldr	r3, [pc, #440]	; (e30 <tud_usbtmc_msg_data_cb+0x310>)
     c76:	4798      	blx	r3
     c78:	4a6e      	ldr	r2, [pc, #440]	; (e34 <tud_usbtmc_msg_data_cb+0x314>)
     c7a:	4b6f      	ldr	r3, [pc, #444]	; (e38 <tud_usbtmc_msg_data_cb+0x318>)
     c7c:	4d6f      	ldr	r5, [pc, #444]	; (e3c <tud_usbtmc_msg_data_cb+0x31c>)
     c7e:	47a8      	blx	r5
     c80:	2200      	movs	r2, #0
     c82:	4b6f      	ldr	r3, [pc, #444]	; (e40 <tud_usbtmc_msg_data_cb+0x320>)
     c84:	4d6f      	ldr	r5, [pc, #444]	; (e44 <tud_usbtmc_msg_data_cb+0x324>)
     c86:	47a8      	blx	r5
     c88:	4b6f      	ldr	r3, [pc, #444]	; (e48 <tud_usbtmc_msg_data_cb+0x328>)
     c8a:	4798      	blx	r3
     c8c:	b280      	uxth	r0, r0
    DAC->DATA.reg = dac_value;
     c8e:	4b5d      	ldr	r3, [pc, #372]	; (e04 <tud_usbtmc_msg_data_cb+0x2e4>)
     c90:	8118      	strh	r0, [r3, #8]
  {
     c92:	e775      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    dac_query = true;
     c94:	2201      	movs	r2, #1
     c96:	4b55      	ldr	r3, [pc, #340]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     c98:	705a      	strb	r2, [r3, #1]
    float dac_voltage = (float)(DAC->DATA.reg) * (DAC_REF_VOLTAGE / DAC_MAX_VALUE);
     c9a:	4b5a      	ldr	r3, [pc, #360]	; (e04 <tud_usbtmc_msg_data_cb+0x2e4>)
     c9c:	8918      	ldrh	r0, [r3, #8]
     c9e:	b280      	uxth	r0, r0
     ca0:	4b6a      	ldr	r3, [pc, #424]	; (e4c <tud_usbtmc_msg_data_cb+0x32c>)
     ca2:	4798      	blx	r3
     ca4:	4b62      	ldr	r3, [pc, #392]	; (e30 <tud_usbtmc_msg_data_cb+0x310>)
     ca6:	4798      	blx	r3
     ca8:	4a62      	ldr	r2, [pc, #392]	; (e34 <tud_usbtmc_msg_data_cb+0x314>)
     caa:	4b69      	ldr	r3, [pc, #420]	; (e50 <tud_usbtmc_msg_data_cb+0x330>)
     cac:	4d65      	ldr	r5, [pc, #404]	; (e44 <tud_usbtmc_msg_data_cb+0x324>)
     cae:	47a8      	blx	r5
     cb0:	4b68      	ldr	r3, [pc, #416]	; (e54 <tud_usbtmc_msg_data_cb+0x334>)
     cb2:	4798      	blx	r3
    ftoa(dac_voltage,dac_voltage_str);
     cb4:	4968      	ldr	r1, [pc, #416]	; (e58 <tud_usbtmc_msg_data_cb+0x338>)
     cb6:	4b69      	ldr	r3, [pc, #420]	; (e5c <tud_usbtmc_msg_data_cb+0x33c>)
     cb8:	4798      	blx	r3
  {
     cba:	e761      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    adc_query         = true;
     cbc:	2201      	movs	r2, #1
     cbe:	4b4b      	ldr	r3, [pc, #300]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     cc0:	701a      	strb	r2, [r3, #0]
    float adc_voltage =(float)(adc_get_sample()) / ADC_MAX_VALUE * ADC_REF_VOLTAGE;
     cc2:	4b67      	ldr	r3, [pc, #412]	; (e60 <tud_usbtmc_msg_data_cb+0x340>)
     cc4:	4798      	blx	r3
     cc6:	4b61      	ldr	r3, [pc, #388]	; (e4c <tud_usbtmc_msg_data_cb+0x32c>)
     cc8:	4798      	blx	r3
     cca:	21e6      	movs	r1, #230	; 0xe6
     ccc:	0589      	lsls	r1, r1, #22
     cce:	4b65      	ldr	r3, [pc, #404]	; (e64 <tud_usbtmc_msg_data_cb+0x344>)
     cd0:	4798      	blx	r3
     cd2:	4b57      	ldr	r3, [pc, #348]	; (e30 <tud_usbtmc_msg_data_cb+0x310>)
     cd4:	4798      	blx	r3
     cd6:	4a57      	ldr	r2, [pc, #348]	; (e34 <tud_usbtmc_msg_data_cb+0x314>)
     cd8:	4b57      	ldr	r3, [pc, #348]	; (e38 <tud_usbtmc_msg_data_cb+0x318>)
     cda:	4d5a      	ldr	r5, [pc, #360]	; (e44 <tud_usbtmc_msg_data_cb+0x324>)
     cdc:	47a8      	blx	r5
     cde:	4b5d      	ldr	r3, [pc, #372]	; (e54 <tud_usbtmc_msg_data_cb+0x334>)
     ce0:	4798      	blx	r3
    ftoa(adc_voltage,adc_voltage_str);
     ce2:	4961      	ldr	r1, [pc, #388]	; (e68 <tud_usbtmc_msg_data_cb+0x348>)
     ce4:	4b5d      	ldr	r3, [pc, #372]	; (e5c <tud_usbtmc_msg_data_cb+0x33c>)
     ce6:	4798      	blx	r3
  {
     ce8:	e74a      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    gpio_lev_cmd = true;
     cea:	2201      	movs	r2, #1
     cec:	4b3f      	ldr	r3, [pc, #252]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     cee:	719a      	strb	r2, [r3, #6]
    char *ptr_value = get_value(data);
     cf0:	9801      	ldr	r0, [sp, #4]
     cf2:	4b4d      	ldr	r3, [pc, #308]	; (e28 <tud_usbtmc_msg_data_cb+0x308>)
     cf4:	4798      	blx	r3
    int gpio_level = atoi(ptr_value);
     cf6:	4b5d      	ldr	r3, [pc, #372]	; (e6c <tud_usbtmc_msg_data_cb+0x34c>)
     cf8:	4798      	blx	r3
    if (gpio_level == 1)
     cfa:	2801      	cmp	r0, #1
     cfc:	d007      	beq.n	d0e <tud_usbtmc_msg_data_cb+0x1ee>
    else if (gpio_level == 0)
     cfe:	2800      	cmp	r0, #0
     d00:	d000      	beq.n	d04 <tud_usbtmc_msg_data_cb+0x1e4>
     d02:	e73d      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
      PORT->Group[0].OUTCLR.reg = PORT_PA10; // drive low value
     d04:	2280      	movs	r2, #128	; 0x80
     d06:	00d2      	lsls	r2, r2, #3
     d08:	4b3f      	ldr	r3, [pc, #252]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     d0a:	615a      	str	r2, [r3, #20]
     d0c:	e738      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
      PORT->Group[0].OUTSET.reg = PORT_PA10; // drive high value
     d0e:	2280      	movs	r2, #128	; 0x80
     d10:	00d2      	lsls	r2, r2, #3
     d12:	4b3d      	ldr	r3, [pc, #244]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     d14:	619a      	str	r2, [r3, #24]
     d16:	e733      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
      strcpy(gpio_lev_str,"0");
     d18:	2202      	movs	r2, #2
     d1a:	4955      	ldr	r1, [pc, #340]	; (e70 <tud_usbtmc_msg_data_cb+0x350>)
     d1c:	4841      	ldr	r0, [pc, #260]	; (e24 <tud_usbtmc_msg_data_cb+0x304>)
     d1e:	4b32      	ldr	r3, [pc, #200]	; (de8 <tud_usbtmc_msg_data_cb+0x2c8>)
     d20:	4798      	blx	r3
     d22:	e72d      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
  else if (transfer_complete && (len >= 10) && !strncasecmp(GPIO_DIR_CMD,data,10))
     d24:	2c00      	cmp	r4, #0
     d26:	d029      	beq.n	d7c <tud_usbtmc_msg_data_cb+0x25c>
     d28:	2d09      	cmp	r5, #9
     d2a:	d927      	bls.n	d7c <tud_usbtmc_msg_data_cb+0x25c>
     d2c:	220a      	movs	r2, #10
     d2e:	9e01      	ldr	r6, [sp, #4]
     d30:	0031      	movs	r1, r6
     d32:	4850      	ldr	r0, [pc, #320]	; (e74 <tud_usbtmc_msg_data_cb+0x354>)
     d34:	4b2f      	ldr	r3, [pc, #188]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     d36:	4798      	blx	r3
     d38:	2800      	cmp	r0, #0
     d3a:	d11f      	bne.n	d7c <tud_usbtmc_msg_data_cb+0x25c>
    gpio_dir_cmd    = true;
     d3c:	2201      	movs	r2, #1
     d3e:	4b2b      	ldr	r3, [pc, #172]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     d40:	71da      	strb	r2, [r3, #7]
    char *ptr_value = get_value(data);
     d42:	0030      	movs	r0, r6
     d44:	4b38      	ldr	r3, [pc, #224]	; (e28 <tud_usbtmc_msg_data_cb+0x308>)
     d46:	4798      	blx	r3
     d48:	0005      	movs	r5, r0
    if (!strncasecmp("IN",ptr_value,2))
     d4a:	2202      	movs	r2, #2
     d4c:	0001      	movs	r1, r0
     d4e:	484a      	ldr	r0, [pc, #296]	; (e78 <tud_usbtmc_msg_data_cb+0x358>)
     d50:	4b28      	ldr	r3, [pc, #160]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     d52:	4798      	blx	r3
     d54:	2800      	cmp	r0, #0
     d56:	d104      	bne.n	d62 <tud_usbtmc_msg_data_cb+0x242>
      PORT->Group[0].DIRCLR.reg = PORT_PA10; // PA10 as input
     d58:	2280      	movs	r2, #128	; 0x80
     d5a:	00d2      	lsls	r2, r2, #3
     d5c:	4b2a      	ldr	r3, [pc, #168]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     d5e:	605a      	str	r2, [r3, #4]
     d60:	e70e      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    else if (!strncasecmp("OUT",ptr_value,3))
     d62:	2203      	movs	r2, #3
     d64:	0029      	movs	r1, r5
     d66:	4845      	ldr	r0, [pc, #276]	; (e7c <tud_usbtmc_msg_data_cb+0x35c>)
     d68:	4b22      	ldr	r3, [pc, #136]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     d6a:	4798      	blx	r3
     d6c:	2800      	cmp	r0, #0
     d6e:	d000      	beq.n	d72 <tud_usbtmc_msg_data_cb+0x252>
     d70:	e706      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
      PORT->Group[0].DIRSET.reg = PORT_PA10; // PA10 as output
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	00d2      	lsls	r2, r2, #3
     d76:	4b24      	ldr	r3, [pc, #144]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     d78:	609a      	str	r2, [r3, #8]
     d7a:	e701      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
  else if (transfer_complete && (len >= 10) && !strncasecmp(GPIO_DIR_QUERY,data,10))
     d7c:	2c00      	cmp	r4, #0
     d7e:	d100      	bne.n	d82 <tud_usbtmc_msg_data_cb+0x262>
     d80:	e6fe      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
     d82:	2d09      	cmp	r5, #9
     d84:	d800      	bhi.n	d88 <tud_usbtmc_msg_data_cb+0x268>
     d86:	e6fb      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
     d88:	220a      	movs	r2, #10
     d8a:	9901      	ldr	r1, [sp, #4]
     d8c:	483c      	ldr	r0, [pc, #240]	; (e80 <tud_usbtmc_msg_data_cb+0x360>)
     d8e:	4b19      	ldr	r3, [pc, #100]	; (df4 <tud_usbtmc_msg_data_cb+0x2d4>)
     d90:	4798      	blx	r3
     d92:	2800      	cmp	r0, #0
     d94:	d000      	beq.n	d98 <tud_usbtmc_msg_data_cb+0x278>
     d96:	e6f3      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    gpio_dir_query = true;
     d98:	2201      	movs	r2, #1
     d9a:	4b14      	ldr	r3, [pc, #80]	; (dec <tud_usbtmc_msg_data_cb+0x2cc>)
     d9c:	70da      	strb	r2, [r3, #3]
    if (PORT->Group[0].DIR.reg & PORT_PA10)
     d9e:	4b1a      	ldr	r3, [pc, #104]	; (e08 <tud_usbtmc_msg_data_cb+0x2e8>)
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	055b      	lsls	r3, r3, #21
     da4:	d505      	bpl.n	db2 <tud_usbtmc_msg_data_cb+0x292>
      strcpy(gpio_dir_str,"OUT");
     da6:	3203      	adds	r2, #3
     da8:	4934      	ldr	r1, [pc, #208]	; (e7c <tud_usbtmc_msg_data_cb+0x35c>)
     daa:	4836      	ldr	r0, [pc, #216]	; (e84 <tud_usbtmc_msg_data_cb+0x364>)
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <tud_usbtmc_msg_data_cb+0x2c8>)
     dae:	4798      	blx	r3
     db0:	e6e6      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
      strcpy(gpio_dir_str,"IN");
     db2:	2203      	movs	r2, #3
     db4:	4930      	ldr	r1, [pc, #192]	; (e78 <tud_usbtmc_msg_data_cb+0x358>)
     db6:	4833      	ldr	r0, [pc, #204]	; (e84 <tud_usbtmc_msg_data_cb+0x364>)
     db8:	4b0b      	ldr	r3, [pc, #44]	; (de8 <tud_usbtmc_msg_data_cb+0x2c8>)
     dba:	4798      	blx	r3
     dbc:	e6e0      	b.n	b80 <tud_usbtmc_msg_data_cb+0x60>
    queryState = 0;
     dbe:	2200      	movs	r2, #0
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <tud_usbtmc_msg_data_cb+0x2c4>)
     dc2:	81da      	strh	r2, [r3, #14]
    int d = atoi((char*)data + 5);
     dc4:	9801      	ldr	r0, [sp, #4]
     dc6:	3005      	adds	r0, #5
     dc8:	4b28      	ldr	r3, [pc, #160]	; (e6c <tud_usbtmc_msg_data_cb+0x34c>)
     dca:	4798      	blx	r3
    if(d > 10000)
     dcc:	4b2e      	ldr	r3, [pc, #184]	; (e88 <tud_usbtmc_msg_data_cb+0x368>)
     dce:	4298      	cmp	r0, r3
     dd0:	dd00      	ble.n	dd4 <tud_usbtmc_msg_data_cb+0x2b4>
      d = 10000;
     dd2:	0018      	movs	r0, r3
    if(d<0)
     dd4:	2800      	cmp	r0, #0
     dd6:	db02      	blt.n	dde <tud_usbtmc_msg_data_cb+0x2be>
    resp_delay = (uint32_t)d;
     dd8:	4b2c      	ldr	r3, [pc, #176]	; (e8c <tud_usbtmc_msg_data_cb+0x36c>)
     dda:	6018      	str	r0, [r3, #0]
     ddc:	e6da      	b.n	b94 <tud_usbtmc_msg_data_cb+0x74>
      d=0;
     dde:	0020      	movs	r0, r4
     de0:	e7fa      	b.n	dd8 <tud_usbtmc_msg_data_cb+0x2b8>
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	200002e0 	.word	0x200002e0
     de8:	00005a61 	.word	0x00005a61
     dec:	200003e0 	.word	0x200003e0
     df0:	00007c6c 	.word	0x00007c6c
     df4:	00005b8d 	.word	0x00005b8d
     df8:	00007ce8 	.word	0x00007ce8
     dfc:	000013a1 	.word	0x000013a1
     e00:	00007c74 	.word	0x00007c74
     e04:	42004800 	.word	0x42004800
     e08:	41004400 	.word	0x41004400
     e0c:	00007c7c 	.word	0x00007c7c
     e10:	00007c90 	.word	0x00007c90
     e14:	00007ca4 	.word	0x00007ca4
     e18:	00007cb0 	.word	0x00007cb0
     e1c:	00007cbc 	.word	0x00007cbc
     e20:	00007cf0 	.word	0x00007cf0
     e24:	200005d8 	.word	0x200005d8
     e28:	00000a59 	.word	0x00000a59
     e2c:	00006839 	.word	0x00006839
     e30:	00005551 	.word	0x00005551
     e34:	66666666 	.word	0x66666666
     e38:	400a6666 	.word	0x400a6666
     e3c:	000042d1 	.word	0x000042d1
     e40:	40900000 	.word	0x40900000
     e44:	00004939 	.word	0x00004939
     e48:	00005465 	.word	0x00005465
     e4c:	00003c25 	.word	0x00003c25
     e50:	3f6a6666 	.word	0x3f6a6666
     e54:	000055f5 	.word	0x000055f5
     e58:	200005dc 	.word	0x200005dc
     e5c:	00000a69 	.word	0x00000a69
     e60:	00000a19 	.word	0x00000a19
     e64:	000035cd 	.word	0x000035cd
     e68:	200005e8 	.word	0x200005e8
     e6c:	000059c1 	.word	0x000059c1
     e70:	00007c68 	.word	0x00007c68
     e74:	00007cc8 	.word	0x00007cc8
     e78:	00007cd4 	.word	0x00007cd4
     e7c:	00007cd8 	.word	0x00007cd8
     e80:	00007cdc 	.word	0x00007cdc
     e84:	200005f4 	.word	0x200005f4
     e88:	00002710 	.word	0x00002710
     e8c:	20000008 	.word	0x20000008

00000e90 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
     e90:	4800      	ldr	r0, [pc, #0]	; (e94 <tud_descriptor_device_cb+0x4>)
     e92:	4770      	bx	lr
     e94:	00007cf4 	.word	0x00007cf4

00000e98 <tud_descriptor_configuration_cb>:
  (void) index; // for multiple configurations
#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
     e98:	4801      	ldr	r0, [pc, #4]	; (ea0 <tud_descriptor_configuration_cb+0x8>)
#endif
}
     e9a:	3014      	adds	r0, #20
     e9c:	4770      	bx	lr
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00007cf4 	.word	0x00007cf4

00000ea4 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
     ea4:	b570      	push	{r4, r5, r6, lr}
  (void) langid;

  size_t chr_count;

  if ( index == 0)
     ea6:	2800      	cmp	r0, #0
     ea8:	d00e      	beq.n	ec8 <tud_descriptor_string_cb+0x24>
  else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
     eaa:	2804      	cmp	r0, #4
     eac:	d826      	bhi.n	efc <tud_descriptor_string_cb+0x58>

    const char* str = string_desc_arr[index];
     eae:	0080      	lsls	r0, r0, #2
     eb0:	4b13      	ldr	r3, [pc, #76]	; (f00 <tud_descriptor_string_cb+0x5c>)
     eb2:	58c5      	ldr	r5, [r0, r3]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
     eb4:	0028      	movs	r0, r5
     eb6:	4b13      	ldr	r3, [pc, #76]	; (f04 <tud_descriptor_string_cb+0x60>)
     eb8:	4798      	blx	r3
     eba:	23ff      	movs	r3, #255	; 0xff
     ebc:	4018      	ands	r0, r3
    if ( chr_count > 31 ) {
     ebe:	281f      	cmp	r0, #31
     ec0:	d900      	bls.n	ec4 <tud_descriptor_string_cb+0x20>
      chr_count = 31;
     ec2:	201f      	movs	r0, #31
    }

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
     ec4:	2300      	movs	r3, #0
     ec6:	e00e      	b.n	ee6 <tud_descriptor_string_cb+0x42>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
     ec8:	4b0d      	ldr	r3, [pc, #52]	; (f00 <tud_descriptor_string_cb+0x5c>)
     eca:	6819      	ldr	r1, [r3, #0]
     ecc:	2202      	movs	r2, #2
     ece:	480e      	ldr	r0, [pc, #56]	; (f08 <tud_descriptor_string_cb+0x64>)
     ed0:	3002      	adds	r0, #2
     ed2:	4b0e      	ldr	r3, [pc, #56]	; (f0c <tud_descriptor_string_cb+0x68>)
     ed4:	4798      	blx	r3
    chr_count = 1;
     ed6:	2001      	movs	r0, #1
     ed8:	e007      	b.n	eea <tud_descriptor_string_cb+0x46>
    {
      _desc_str[1+i] = str[i];
     eda:	1c5a      	adds	r2, r3, #1
     edc:	5cec      	ldrb	r4, [r5, r3]
     ede:	0051      	lsls	r1, r2, #1
     ee0:	4b09      	ldr	r3, [pc, #36]	; (f08 <tud_descriptor_string_cb+0x64>)
     ee2:	52cc      	strh	r4, [r1, r3]
    for(uint8_t i=0; i<chr_count; i++)
     ee4:	b2d3      	uxtb	r3, r2
     ee6:	4298      	cmp	r0, r3
     ee8:	d8f7      	bhi.n	eda <tud_descriptor_string_cb+0x36>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((((uint16_t)TUSB_DESC_STRING) << 8 ) | (2u*chr_count + 2u));
     eea:	3001      	adds	r0, #1
     eec:	0040      	lsls	r0, r0, #1
     eee:	23c0      	movs	r3, #192	; 0xc0
     ef0:	009b      	lsls	r3, r3, #2
     ef2:	4318      	orrs	r0, r3
     ef4:	4b04      	ldr	r3, [pc, #16]	; (f08 <tud_descriptor_string_cb+0x64>)
     ef6:	8018      	strh	r0, [r3, #0]

  return _desc_str;
     ef8:	0018      	movs	r0, r3
}
     efa:	bd70      	pop	{r4, r5, r6, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
     efc:	2000      	movs	r0, #0
     efe:	e7fc      	b.n	efa <tud_descriptor_string_cb+0x56>
     f00:	2000000c 	.word	0x2000000c
     f04:	00005b7f 	.word	0x00005b7f
     f08:	200003e8 	.word	0x200003e8
     f0c:	00005a61 	.word	0x00005a61

00000f10 <atomicChangeState>:
#define criticalLeave() do {osal_mutex_unlock(usbtmcLock); } while (0)

bool atomicChangeState(usbtmcd_state_enum expectedState, usbtmcd_state_enum newState)
{
  bool ret = true;
  criticalEnter();
     f10:	4b0c      	ldr	r3, [pc, #48]	; (f44 <atomicChangeState+0x34>)
     f12:	681a      	ldr	r2, [r3, #0]
// TODO blocking for now
TU_ATTR_ALWAYS_INLINE static inline bool osal_semaphore_wait (osal_semaphore_t sem_hdl, uint32_t msec)
{
  (void) msec;

  while (sem_hdl->count == 0) { }
     f14:	8813      	ldrh	r3, [r2, #0]
     f16:	b29b      	uxth	r3, r3
     f18:	2b00      	cmp	r3, #0
     f1a:	d0fb      	beq.n	f14 <atomicChangeState+0x4>
  sem_hdl->count--;
     f1c:	8813      	ldrh	r3, [r2, #0]
     f1e:	3b01      	subs	r3, #1
     f20:	b29b      	uxth	r3, r3
     f22:	8013      	strh	r3, [r2, #0]
  usbtmcd_state_enum oldState = usbtmc_state.state;
     f24:	4b08      	ldr	r3, [pc, #32]	; (f48 <atomicChangeState+0x38>)
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	b2db      	uxtb	r3, r3
  if (oldState == expectedState)
     f2a:	4283      	cmp	r3, r0
     f2c:	d005      	beq.n	f3a <atomicChangeState+0x2a>
  {
    usbtmc_state.state = newState;
  }
  else
  {
    ret = false;
     f2e:	2000      	movs	r0, #0
  sem_hdl->count++;
     f30:	8813      	ldrh	r3, [r2, #0]
     f32:	3301      	adds	r3, #1
     f34:	b29b      	uxth	r3, r3
     f36:	8013      	strh	r3, [r2, #0]
  }
  criticalLeave();
  return ret;
}
     f38:	4770      	bx	lr
    usbtmc_state.state = newState;
     f3a:	4b03      	ldr	r3, [pc, #12]	; (f48 <atomicChangeState+0x38>)
     f3c:	7019      	strb	r1, [r3, #0]
  bool ret = true;
     f3e:	2001      	movs	r0, #1
     f40:	e7f6      	b.n	f30 <atomicChangeState+0x20>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	20000428 	.word	0x20000428
     f48:	20000020 	.word	0x20000020

00000f4c <handle_devMsgIn>:

  return true;
}

static bool handle_devMsgIn(void *data, size_t len)
{
     f4c:	b510      	push	{r4, lr}
     f4e:	0004      	movs	r4, r0
  TU_VERIFY(len == sizeof(usbtmc_msg_request_dev_dep_in));
     f50:	290c      	cmp	r1, #12
     f52:	d001      	beq.n	f58 <handle_devMsgIn+0xc>
     f54:	2000      	movs	r0, #0
  if(termCharRequested)
    TU_VERIFY(usbtmc_state.capabilities->bmDevCapabilities.canEndBulkInOnTermChar);

  TU_VERIFY(tud_usbtmc_msgBulkIn_request_cb(msg));
  return true;
}
     f56:	bd10      	pop	{r4, pc}
  bool stateChanged = atomicChangeState(STATE_IDLE, STATE_TX_REQUESTED);
     f58:	3908      	subs	r1, #8
     f5a:	2002      	movs	r0, #2
     f5c:	4b16      	ldr	r3, [pc, #88]	; (fb8 <handle_devMsgIn+0x6c>)
     f5e:	4798      	blx	r3
  TU_VERIFY(stateChanged);
     f60:	2800      	cmp	r0, #0
     f62:	d0f8      	beq.n	f56 <handle_devMsgIn+0xa>
  usbtmc_state.lastBulkInTag = msg->header.bTag;
     f64:	7862      	ldrb	r2, [r4, #1]
     f66:	4915      	ldr	r1, [pc, #84]	; (fbc <handle_devMsgIn+0x70>)
     f68:	2399      	movs	r3, #153	; 0x99
     f6a:	54ca      	strb	r2, [r1, r3]
  usbtmc_state.transfer_size_remaining = msg->TransferSize;
     f6c:	7923      	ldrb	r3, [r4, #4]
     f6e:	7962      	ldrb	r2, [r4, #5]
     f70:	0212      	lsls	r2, r2, #8
     f72:	431a      	orrs	r2, r3
     f74:	79a3      	ldrb	r3, [r4, #6]
     f76:	041b      	lsls	r3, r3, #16
     f78:	431a      	orrs	r2, r3
     f7a:	79e3      	ldrb	r3, [r4, #7]
     f7c:	061b      	lsls	r3, r3, #24
     f7e:	4313      	orrs	r3, r2
     f80:	2290      	movs	r2, #144	; 0x90
     f82:	508b      	str	r3, [r1, r2]
  usbtmc_state.transfer_size_sent = 0u;
     f84:	2200      	movs	r2, #0
     f86:	2394      	movs	r3, #148	; 0x94
     f88:	50ca      	str	r2, [r1, r3]
  termCharRequested = msg->bmTransferAttributes.TermCharEnabled;
     f8a:	7a23      	ldrb	r3, [r4, #8]
     f8c:	07db      	lsls	r3, r3, #31
     f8e:	0fdb      	lsrs	r3, r3, #31
     f90:	b2d9      	uxtb	r1, r3
     f92:	4a0b      	ldr	r2, [pc, #44]	; (fc0 <handle_devMsgIn+0x74>)
     f94:	7113      	strb	r3, [r2, #4]
  termChar = msg->TermChar;
     f96:	7a63      	ldrb	r3, [r4, #9]
     f98:	7153      	strb	r3, [r2, #5]
  if(termCharRequested)
     f9a:	2900      	cmp	r1, #0
     f9c:	d005      	beq.n	faa <handle_devMsgIn+0x5e>
    TU_VERIFY(usbtmc_state.capabilities->bmDevCapabilities.canEndBulkInOnTermChar);
     f9e:	23a0      	movs	r3, #160	; 0xa0
     fa0:	4a06      	ldr	r2, [pc, #24]	; (fbc <handle_devMsgIn+0x70>)
     fa2:	58d3      	ldr	r3, [r2, r3]
     fa4:	795b      	ldrb	r3, [r3, #5]
     fa6:	07db      	lsls	r3, r3, #31
     fa8:	d503      	bpl.n	fb2 <handle_devMsgIn+0x66>
  TU_VERIFY(tud_usbtmc_msgBulkIn_request_cb(msg));
     faa:	0020      	movs	r0, r4
     fac:	4b05      	ldr	r3, [pc, #20]	; (fc4 <handle_devMsgIn+0x78>)
     fae:	4798      	blx	r3
     fb0:	e7d1      	b.n	f56 <handle_devMsgIn+0xa>
    TU_VERIFY(usbtmc_state.capabilities->bmDevCapabilities.canEndBulkInOnTermChar);
     fb2:	2000      	movs	r0, #0
     fb4:	e7cf      	b.n	f56 <handle_devMsgIn+0xa>
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	00000f11 	.word	0x00000f11
     fbc:	20000020 	.word	0x20000020
     fc0:	20000428 	.word	0x20000428
     fc4:	00000701 	.word	0x00000701

00000fc8 <handle_devMsgOut>:
{
     fc8:	b570      	push	{r4, r5, r6, lr}
     fca:	000d      	movs	r5, r1
     fcc:	0014      	movs	r4, r2
  TU_VERIFY(usbtmc_state.state == STATE_RCV,true);
     fce:	4a15      	ldr	r2, [pc, #84]	; (1024 <handle_devMsgOut+0x5c>)
     fd0:	7812      	ldrb	r2, [r2, #0]
     fd2:	2a03      	cmp	r2, #3
     fd4:	d001      	beq.n	fda <handle_devMsgOut+0x12>
     fd6:	2001      	movs	r0, #1
}
     fd8:	bd70      	pop	{r4, r5, r6, pc}
  bool shortPacket = (packetLen < usbtmc_state.ep_bulk_out_wMaxPacketSize);
     fda:	4a12      	ldr	r2, [pc, #72]	; (1024 <handle_devMsgOut+0x5c>)
     fdc:	218c      	movs	r1, #140	; 0x8c
     fde:	5850      	ldr	r0, [r2, r1]
  if(len >= usbtmc_state.transfer_size_remaining || shortPacket)
     fe0:	3104      	adds	r1, #4
     fe2:	5852      	ldr	r2, [r2, r1]
     fe4:	42a2      	cmp	r2, r4
     fe6:	d901      	bls.n	fec <handle_devMsgOut+0x24>
     fe8:	4298      	cmp	r0, r3
     fea:	d919      	bls.n	1020 <handle_devMsgOut+0x58>
    TU_VERIFY(atomicChangeState(STATE_RCV, STATE_NAK));
     fec:	2101      	movs	r1, #1
     fee:	2003      	movs	r0, #3
     ff0:	4b0d      	ldr	r3, [pc, #52]	; (1028 <handle_devMsgOut+0x60>)
     ff2:	4798      	blx	r3
     ff4:	2800      	cmp	r0, #0
     ff6:	d0ef      	beq.n	fd8 <handle_devMsgOut+0x10>
  len = tu_min32(len, usbtmc_state.transfer_size_remaining);
     ff8:	2390      	movs	r3, #144	; 0x90
     ffa:	4a0a      	ldr	r2, [pc, #40]	; (1024 <handle_devMsgOut+0x5c>)
     ffc:	58d3      	ldr	r3, [r2, r3]
     ffe:	0021      	movs	r1, r4
    1000:	429c      	cmp	r4, r3
    1002:	d900      	bls.n	1006 <handle_devMsgOut+0x3e>
    1004:	0019      	movs	r1, r3
  usbtmc_state.transfer_size_remaining -= len;
    1006:	4a07      	ldr	r2, [pc, #28]	; (1024 <handle_devMsgOut+0x5c>)
    1008:	1a5b      	subs	r3, r3, r1
    100a:	2490      	movs	r4, #144	; 0x90
    100c:	5113      	str	r3, [r2, r4]
  usbtmc_state.transfer_size_sent += len;
    100e:	3404      	adds	r4, #4
    1010:	5913      	ldr	r3, [r2, r4]
    1012:	185b      	adds	r3, r3, r1
    1014:	5113      	str	r3, [r2, r4]
  if(!tud_usbtmc_msg_data_cb(data, len, atEnd))
    1016:	0002      	movs	r2, r0
    1018:	0028      	movs	r0, r5
    101a:	4b04      	ldr	r3, [pc, #16]	; (102c <handle_devMsgOut+0x64>)
    101c:	4798      	blx	r3
    101e:	e7db      	b.n	fd8 <handle_devMsgOut+0x10>
  bool atEnd = false;
    1020:	2000      	movs	r0, #0
    1022:	e7e9      	b.n	ff8 <handle_devMsgOut+0x30>
    1024:	20000020 	.word	0x20000020
    1028:	00000f11 	.word	0x00000f11
    102c:	00000b21 	.word	0x00000b21

00001030 <handle_devMsgOutStart>:
{
    1030:	b570      	push	{r4, r5, r6, lr}
    1032:	0005      	movs	r5, r0
    1034:	000e      	movs	r6, r1
    1036:	0014      	movs	r4, r2
  TU_VERIFY(atomicChangeState(STATE_IDLE, STATE_RCV), true);
    1038:	2103      	movs	r1, #3
    103a:	2002      	movs	r0, #2
    103c:	4b14      	ldr	r3, [pc, #80]	; (1090 <handle_devMsgOutStart+0x60>)
    103e:	4798      	blx	r3
    1040:	2800      	cmp	r0, #0
    1042:	d101      	bne.n	1048 <handle_devMsgOutStart+0x18>
    1044:	2001      	movs	r0, #1
}
    1046:	bd70      	pop	{r4, r5, r6, pc}
  usbtmc_state.transfer_size_sent = 0u;
    1048:	4912      	ldr	r1, [pc, #72]	; (1094 <handle_devMsgOutStart+0x64>)
    104a:	2200      	movs	r2, #0
    104c:	2394      	movs	r3, #148	; 0x94
    104e:	50ca      	str	r2, [r1, r3]
  usbtmc_state.transfer_size_remaining = msg->TransferSize;
    1050:	7933      	ldrb	r3, [r6, #4]
    1052:	7972      	ldrb	r2, [r6, #5]
    1054:	0212      	lsls	r2, r2, #8
    1056:	431a      	orrs	r2, r3
    1058:	79b3      	ldrb	r3, [r6, #6]
    105a:	041b      	lsls	r3, r3, #16
    105c:	431a      	orrs	r2, r3
    105e:	79f3      	ldrb	r3, [r6, #7]
    1060:	061b      	lsls	r3, r3, #24
    1062:	4313      	orrs	r3, r2
    1064:	2290      	movs	r2, #144	; 0x90
    1066:	508b      	str	r3, [r1, r2]
  TU_VERIFY(tud_usbtmc_msgBulkOut_start_cb(msg));
    1068:	0030      	movs	r0, r6
    106a:	4b0b      	ldr	r3, [pc, #44]	; (1098 <handle_devMsgOutStart+0x68>)
    106c:	4798      	blx	r3
    106e:	2800      	cmp	r0, #0
    1070:	d0e9      	beq.n	1046 <handle_devMsgOutStart+0x16>
  TU_VERIFY(handle_devMsgOut(rhport, (uint8_t*)data + sizeof(*msg), len - sizeof(*msg), len));
    1072:	0022      	movs	r2, r4
    1074:	3a0c      	subs	r2, #12
    1076:	0031      	movs	r1, r6
    1078:	310c      	adds	r1, #12
    107a:	0023      	movs	r3, r4
    107c:	0028      	movs	r0, r5
    107e:	4c07      	ldr	r4, [pc, #28]	; (109c <handle_devMsgOutStart+0x6c>)
    1080:	47a0      	blx	r4
    1082:	2800      	cmp	r0, #0
    1084:	d0df      	beq.n	1046 <handle_devMsgOutStart+0x16>
  usbtmc_state.lastBulkOutTag = msg->header.bTag;
    1086:	7871      	ldrb	r1, [r6, #1]
    1088:	2398      	movs	r3, #152	; 0x98
    108a:	4a02      	ldr	r2, [pc, #8]	; (1094 <handle_devMsgOutStart+0x64>)
    108c:	54d1      	strb	r1, [r2, r3]
  return true;
    108e:	e7da      	b.n	1046 <handle_devMsgOutStart+0x16>
    1090:	00000f11 	.word	0x00000f11
    1094:	20000020 	.word	0x20000020
    1098:	0000069d 	.word	0x0000069d
    109c:	00000fc9 	.word	0x00000fc9

000010a0 <tud_usbtmc_transmit_dev_msg_data>:
{
    10a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a2:	46c6      	mov	lr, r8
    10a4:	b500      	push	{lr}
    10a6:	b082      	sub	sp, #8
    10a8:	0006      	movs	r6, r0
    10aa:	000c      	movs	r4, r1
    10ac:	0017      	movs	r7, r2
    10ae:	001d      	movs	r5, r3
  TU_ASSERT(len > 0u);
    10b0:	2900      	cmp	r1, #0
    10b2:	d073      	beq.n	119c <tud_usbtmc_transmit_dev_msg_data+0xfc>
  TU_ASSERT(len <= usbtmc_state.transfer_size_remaining);
    10b4:	2390      	movs	r3, #144	; 0x90
    10b6:	4a40      	ldr	r2, [pc, #256]	; (11b8 <tud_usbtmc_transmit_dev_msg_data+0x118>)
    10b8:	58d3      	ldr	r3, [r2, r3]
    10ba:	4299      	cmp	r1, r3
    10bc:	d900      	bls.n	10c0 <tud_usbtmc_transmit_dev_msg_data+0x20>
    10be:	e072      	b.n	11a6 <tud_usbtmc_transmit_dev_msg_data+0x106>
  TU_ASSERT(usbtmc_state.transfer_size_sent == 0u);
    10c0:	2394      	movs	r3, #148	; 0x94
    10c2:	58d3      	ldr	r3, [r2, r3]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d000      	beq.n	10ca <tud_usbtmc_transmit_dev_msg_data+0x2a>
    10c8:	e06f      	b.n	11aa <tud_usbtmc_transmit_dev_msg_data+0x10a>
  if(usingTermChar)
    10ca:	2d00      	cmp	r5, #0
    10cc:	d011      	beq.n	10f2 <tud_usbtmc_transmit_dev_msg_data+0x52>
    TU_ASSERT(usbtmc_state.capabilities->bmDevCapabilities.canEndBulkInOnTermChar);
    10ce:	33a0      	adds	r3, #160	; 0xa0
    10d0:	58d3      	ldr	r3, [r2, r3]
    10d2:	795b      	ldrb	r3, [r3, #5]
    10d4:	07db      	lsls	r3, r3, #31
    10d6:	d56a      	bpl.n	11ae <tud_usbtmc_transmit_dev_msg_data+0x10e>
    TU_ASSERT(termCharRequested);
    10d8:	4b38      	ldr	r3, [pc, #224]	; (11bc <tud_usbtmc_transmit_dev_msg_data+0x11c>)
    10da:	791b      	ldrb	r3, [r3, #4]
    10dc:	2b00      	cmp	r3, #0
    10de:	d068      	beq.n	11b2 <tud_usbtmc_transmit_dev_msg_data+0x112>
    TU_ASSERT(((uint8_t const*)data)[len-1u] == termChar);
    10e0:	1843      	adds	r3, r0, r1
    10e2:	3b01      	subs	r3, #1
    10e4:	781a      	ldrb	r2, [r3, #0]
    10e6:	4b35      	ldr	r3, [pc, #212]	; (11bc <tud_usbtmc_transmit_dev_msg_data+0x11c>)
    10e8:	795b      	ldrb	r3, [r3, #5]
    10ea:	429a      	cmp	r2, r3
    10ec:	d001      	beq.n	10f2 <tud_usbtmc_transmit_dev_msg_data+0x52>
    10ee:	2000      	movs	r0, #0
    10f0:	e055      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
  TU_VERIFY(usbtmc_state.state == STATE_TX_REQUESTED);
    10f2:	4b31      	ldr	r3, [pc, #196]	; (11b8 <tud_usbtmc_transmit_dev_msg_data+0x118>)
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	2b04      	cmp	r3, #4
    10f8:	d001      	beq.n	10fe <tud_usbtmc_transmit_dev_msg_data+0x5e>
    10fa:	2000      	movs	r0, #0
    10fc:	e04f      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
  tu_varclr(hdr);
    10fe:	4b2e      	ldr	r3, [pc, #184]	; (11b8 <tud_usbtmc_transmit_dev_msg_data+0x118>)
    1100:	4698      	mov	r8, r3
    1102:	0018      	movs	r0, r3
    1104:	3008      	adds	r0, #8
    1106:	220c      	movs	r2, #12
    1108:	2100      	movs	r1, #0
    110a:	4b2d      	ldr	r3, [pc, #180]	; (11c0 <tud_usbtmc_transmit_dev_msg_data+0x120>)
    110c:	4798      	blx	r3
  hdr->header.MsgID = USBTMC_MSGID_DEV_DEP_MSG_IN;
    110e:	2102      	movs	r1, #2
    1110:	4643      	mov	r3, r8
    1112:	7219      	strb	r1, [r3, #8]
  hdr->header.bTag = usbtmc_state.lastBulkInTag;
    1114:	2399      	movs	r3, #153	; 0x99
    1116:	4642      	mov	r2, r8
    1118:	5cd3      	ldrb	r3, [r2, r3]
    111a:	7253      	strb	r3, [r2, #9]
  hdr->header.bTagInverse = (uint8_t)~(usbtmc_state.lastBulkInTag);
    111c:	43db      	mvns	r3, r3
    111e:	7293      	strb	r3, [r2, #10]
  hdr->TransferSize = len;
    1120:	4643      	mov	r3, r8
    1122:	60d4      	str	r4, [r2, #12]
  hdr->bmTransferAttributes.EOM = endOfMessage;
    1124:	2201      	movs	r2, #1
    1126:	4017      	ands	r7, r2
    1128:	7c1b      	ldrb	r3, [r3, #16]
    112a:	2001      	movs	r0, #1
    112c:	4383      	bics	r3, r0
  hdr->bmTransferAttributes.UsingTermChar = usingTermChar;
    112e:	402a      	ands	r2, r5
    1130:	0052      	lsls	r2, r2, #1
    1132:	431f      	orrs	r7, r3
    1134:	438f      	bics	r7, r1
    1136:	4317      	orrs	r7, r2
    1138:	4643      	mov	r3, r8
    113a:	741f      	strb	r7, [r3, #16]
  const size_t dataLen = ((headerLen + hdr->TransferSize) <= txBufLen) ?
    113c:	0023      	movs	r3, r4
    113e:	330c      	adds	r3, #12
                            len : (txBufLen - headerLen);
    1140:	2b40      	cmp	r3, #64	; 0x40
    1142:	d827      	bhi.n	1194 <tud_usbtmc_transmit_dev_msg_data+0xf4>
    1144:	0025      	movs	r5, r4
  const size_t packetLen = headerLen + dataLen;
    1146:	230c      	movs	r3, #12
    1148:	4698      	mov	r8, r3
    114a:	44a8      	add	r8, r5
  memcpy((uint8_t*)(usbtmc_state.ep_bulk_in_buf) + headerLen, data, dataLen);
    114c:	4f1a      	ldr	r7, [pc, #104]	; (11b8 <tud_usbtmc_transmit_dev_msg_data+0x118>)
    114e:	0038      	movs	r0, r7
    1150:	3014      	adds	r0, #20
    1152:	002a      	movs	r2, r5
    1154:	0031      	movs	r1, r6
    1156:	4b1b      	ldr	r3, [pc, #108]	; (11c4 <tud_usbtmc_transmit_dev_msg_data+0x124>)
    1158:	4798      	blx	r3
  usbtmc_state.transfer_size_remaining = len - dataLen;
    115a:	1b64      	subs	r4, r4, r5
    115c:	2390      	movs	r3, #144	; 0x90
    115e:	50fc      	str	r4, [r7, r3]
  usbtmc_state.transfer_size_sent = dataLen;
    1160:	3304      	adds	r3, #4
    1162:	50fd      	str	r5, [r7, r3]
  usbtmc_state.devInBuffer = (uint8_t const*) data + (dataLen);
    1164:	1976      	adds	r6, r6, r5
    1166:	3308      	adds	r3, #8
    1168:	50fe      	str	r6, [r7, r3]
      atomicChangeState(STATE_TX_REQUESTED, (packetLen >= txBufLen) ? STATE_TX_INITIATED : STATE_TX_SHORTED);
    116a:	4643      	mov	r3, r8
    116c:	2b3f      	cmp	r3, #63	; 0x3f
    116e:	d913      	bls.n	1198 <tud_usbtmc_transmit_dev_msg_data+0xf8>
    1170:	2105      	movs	r1, #5
  bool stateChanged =
    1172:	2004      	movs	r0, #4
    1174:	4b14      	ldr	r3, [pc, #80]	; (11c8 <tud_usbtmc_transmit_dev_msg_data+0x128>)
    1176:	4798      	blx	r3
  TU_VERIFY(stateChanged);
    1178:	2800      	cmp	r0, #0
    117a:	d010      	beq.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
  TU_VERIFY(usbd_edpt_xfer(usbtmc_state.rhport, usbtmc_state.ep_bulk_in, usbtmc_state.ep_bulk_in_buf, (uint16_t)packetLen));
    117c:	4643      	mov	r3, r8
    117e:	466a      	mov	r2, sp
    1180:	80d3      	strh	r3, [r2, #6]
    1182:	88d3      	ldrh	r3, [r2, #6]
    1184:	480c      	ldr	r0, [pc, #48]	; (11b8 <tud_usbtmc_transmit_dev_msg_data+0x118>)
    1186:	0002      	movs	r2, r0
    1188:	3208      	adds	r2, #8
    118a:	78c1      	ldrb	r1, [r0, #3]
    118c:	7880      	ldrb	r0, [r0, #2]
    118e:	4c0f      	ldr	r4, [pc, #60]	; (11cc <tud_usbtmc_transmit_dev_msg_data+0x12c>)
    1190:	47a0      	blx	r4
    1192:	e004      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
                            len : (txBufLen - headerLen);
    1194:	2534      	movs	r5, #52	; 0x34
    1196:	e7d6      	b.n	1146 <tud_usbtmc_transmit_dev_msg_data+0xa6>
      atomicChangeState(STATE_TX_REQUESTED, (packetLen >= txBufLen) ? STATE_TX_INITIATED : STATE_TX_SHORTED);
    1198:	2106      	movs	r1, #6
    119a:	e7ea      	b.n	1172 <tud_usbtmc_transmit_dev_msg_data+0xd2>
  TU_ASSERT(len > 0u);
    119c:	2000      	movs	r0, #0
}
    119e:	b002      	add	sp, #8
    11a0:	bc04      	pop	{r2}
    11a2:	4690      	mov	r8, r2
    11a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_ASSERT(len <= usbtmc_state.transfer_size_remaining);
    11a6:	2000      	movs	r0, #0
    11a8:	e7f9      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
  TU_ASSERT(usbtmc_state.transfer_size_sent == 0u);
    11aa:	2000      	movs	r0, #0
    11ac:	e7f7      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
    TU_ASSERT(usbtmc_state.capabilities->bmDevCapabilities.canEndBulkInOnTermChar);
    11ae:	2000      	movs	r0, #0
    11b0:	e7f5      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
    TU_ASSERT(termCharRequested);
    11b2:	2000      	movs	r0, #0
    11b4:	e7f3      	b.n	119e <tud_usbtmc_transmit_dev_msg_data+0xfe>
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	20000020 	.word	0x20000020
    11bc:	20000428 	.word	0x20000428
    11c0:	00005a73 	.word	0x00005a73
    11c4:	00005a61 	.word	0x00005a61
    11c8:	00000f11 	.word	0x00000f11
    11cc:	000023bd 	.word	0x000023bd

000011d0 <usbtmcd_init_cb>:
{
    11d0:	b510      	push	{r4, lr}
  usbtmc_state.capabilities = tud_usbtmc_get_capabilities_cb();
    11d2:	4b0d      	ldr	r3, [pc, #52]	; (1208 <usbtmcd_init_cb+0x38>)
    11d4:	4798      	blx	r3
    11d6:	23a0      	movs	r3, #160	; 0xa0
    11d8:	4a0c      	ldr	r2, [pc, #48]	; (120c <usbtmcd_init_cb+0x3c>)
    11da:	50d0      	str	r0, [r2, r3]
  if (usbtmc_state.capabilities->bmIntfcCapabilities488.supportsTrigger) {
    11dc:	7b83      	ldrb	r3, [r0, #14]
    11de:	075b      	lsls	r3, r3, #29
    11e0:	d502      	bpl.n	11e8 <usbtmcd_init_cb+0x18>
    TU_ASSERT(&tud_usbtmc_msg_trigger_cb != NULL,);
    11e2:	4b0b      	ldr	r3, [pc, #44]	; (1210 <usbtmcd_init_cb+0x40>)
    11e4:	2b00      	cmp	r3, #0
    11e6:	d00e      	beq.n	1206 <usbtmcd_init_cb+0x36>
  TU_ASSERT(!usbtmc_state.capabilities->bmIntfcCapabilities.listenOnly,);
    11e8:	7903      	ldrb	r3, [r0, #4]
    11ea:	07da      	lsls	r2, r3, #31
    11ec:	d40b      	bmi.n	1206 <usbtmcd_init_cb+0x36>
  TU_ASSERT(!usbtmc_state.capabilities->bmIntfcCapabilities.talkOnly,);
    11ee:	079a      	lsls	r2, r3, #30
    11f0:	d409      	bmi.n	1206 <usbtmcd_init_cb+0x36>
  if (usbtmc_state.capabilities->bmIntfcCapabilities.supportsIndicatorPulse) {
    11f2:	075b      	lsls	r3, r3, #29
    11f4:	d502      	bpl.n	11fc <usbtmcd_init_cb+0x2c>
    TU_ASSERT(&tud_usbtmc_indicator_pulse_cb != NULL,);
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <usbtmcd_init_cb+0x44>)
    11f8:	2b00      	cmp	r3, #0
    11fa:	d004      	beq.n	1206 <usbtmcd_init_cb+0x36>
typedef osal_semaphore_def_t osal_mutex_def_t;
typedef osal_semaphore_t osal_mutex_t;

TU_ATTR_ALWAYS_INLINE static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
  mdef->count = 1;
    11fc:	4b06      	ldr	r3, [pc, #24]	; (1218 <usbtmcd_init_cb+0x48>)
    11fe:	2201      	movs	r2, #1
    1200:	801a      	strh	r2, [r3, #0]
  usbtmcLock = osal_mutex_create(&usbtmcLockBuffer);
    1202:	4a06      	ldr	r2, [pc, #24]	; (121c <usbtmcd_init_cb+0x4c>)
    1204:	6013      	str	r3, [r2, #0]
}
    1206:	bd10      	pop	{r4, pc}
    1208:	00000681 	.word	0x00000681
    120c:	20000020 	.word	0x20000020
    1210:	00000689 	.word	0x00000689
    1214:	00000a05 	.word	0x00000a05
    1218:	200005fc 	.word	0x200005fc
    121c:	20000428 	.word	0x20000428

00001220 <usbtmcd_open_cb>:
{
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	46d6      	mov	lr, sl
    1224:	4647      	mov	r7, r8
    1226:	b580      	push	{r7, lr}
    1228:	b083      	sub	sp, #12
    122a:	9001      	str	r0, [sp, #4]
    122c:	000d      	movs	r5, r1
    122e:	0016      	movs	r6, r2
  TU_VERIFY(itf_desc->bInterfaceClass    == TUD_USBTMC_APP_CLASS   , 0);
    1230:	794b      	ldrb	r3, [r1, #5]
    1232:	2bfe      	cmp	r3, #254	; 0xfe
    1234:	d006      	beq.n	1244 <usbtmcd_open_cb+0x24>
    1236:	2400      	movs	r4, #0
}
    1238:	0020      	movs	r0, r4
    123a:	b003      	add	sp, #12
    123c:	bc0c      	pop	{r2, r3}
    123e:	4690      	mov	r8, r2
    1240:	469a      	mov	sl, r3
    1242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(itf_desc->bInterfaceSubClass == TUD_USBTMC_APP_SUBCLASS, 0);
    1244:	798b      	ldrb	r3, [r1, #6]
    1246:	2b03      	cmp	r3, #3
    1248:	d001      	beq.n	124e <usbtmcd_open_cb+0x2e>
    124a:	2400      	movs	r4, #0
    124c:	e7f4      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT((itf_desc->bNumEndpoints == 2) || (itf_desc->bNumEndpoints ==3), 0);
    124e:	790b      	ldrb	r3, [r1, #4]
    1250:	3b02      	subs	r3, #2
    1252:	b2db      	uxtb	r3, r3
    1254:	2b01      	cmp	r3, #1
    1256:	d901      	bls.n	125c <usbtmcd_open_cb+0x3c>
    1258:	2400      	movs	r4, #0
    125a:	e7ed      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT(usbtmc_state.state == STATE_CLOSED, 0);
    125c:	4b4b      	ldr	r3, [pc, #300]	; (138c <usbtmcd_open_cb+0x16c>)
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	2b00      	cmp	r3, #0
    1262:	d000      	beq.n	1266 <usbtmcd_open_cb+0x46>
    1264:	e081      	b.n	136a <usbtmcd_open_cb+0x14a>
  usbtmc_state.itf_id = itf_desc->bInterfaceNumber;
    1266:	788a      	ldrb	r2, [r1, #2]
    1268:	4b48      	ldr	r3, [pc, #288]	; (138c <usbtmcd_open_cb+0x16c>)
    126a:	705a      	strb	r2, [r3, #1]
  usbtmc_state.rhport = rhport;
    126c:	466a      	mov	r2, sp
    126e:	7912      	ldrb	r2, [r2, #4]
    1270:	709a      	strb	r2, [r3, #2]
  p_desc = (uint8_t const *) itf_desc;
    1272:	000f      	movs	r7, r1
  uint8_t found_endpoints = 0;
    1274:	2300      	movs	r3, #0
    1276:	4698      	mov	r8, r3
  drv_len = 0u;
    1278:	2400      	movs	r4, #0
  while (found_endpoints < itf_desc->bNumEndpoints && drv_len <= max_len)
    127a:	e038      	b.n	12ee <usbtmcd_open_cb+0xce>
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    127c:	793a      	ldrb	r2, [r7, #4]
    127e:	797b      	ldrb	r3, [r7, #5]
    1280:	021b      	lsls	r3, r3, #8
    1282:	4313      	orrs	r3, r2
    1284:	055b      	lsls	r3, r3, #21
    1286:	0d5b      	lsrs	r3, r3, #21
    1288:	469a      	mov	sl, r3
          TU_ASSERT((USBTMCD_BUFFER_SIZE % tu_edpt_packet_size(ep_desc)) == 0, 0);
    128a:	0019      	movs	r1, r3
    128c:	2040      	movs	r0, #64	; 0x40
    128e:	4b40      	ldr	r3, [pc, #256]	; (1390 <usbtmcd_open_cb+0x170>)
    1290:	4798      	blx	r3
    1292:	2900      	cmp	r1, #0
    1294:	d16b      	bne.n	136e <usbtmcd_open_cb+0x14e>
          if (tu_edpt_dir(ep_desc->bEndpointAddress) == TUSB_DIR_IN)
    1296:	78bb      	ldrb	r3, [r7, #2]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1298:	b25a      	sxtb	r2, r3
    129a:	2a00      	cmp	r2, #0
    129c:	db0a      	blt.n	12b4 <usbtmcd_open_cb+0x94>
            usbtmc_state.ep_bulk_out = ep_desc->bEndpointAddress;
    129e:	4a3b      	ldr	r2, [pc, #236]	; (138c <usbtmcd_open_cb+0x16c>)
    12a0:	7113      	strb	r3, [r2, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    12a2:	7939      	ldrb	r1, [r7, #4]
    12a4:	797b      	ldrb	r3, [r7, #5]
    12a6:	021b      	lsls	r3, r3, #8
    12a8:	430b      	orrs	r3, r1
    12aa:	055b      	lsls	r3, r3, #21
    12ac:	0d5b      	lsrs	r3, r3, #21
            usbtmc_state.ep_bulk_out_wMaxPacketSize = tu_edpt_packet_size(ep_desc);
    12ae:	218c      	movs	r1, #140	; 0x8c
    12b0:	5053      	str	r3, [r2, r1]
    12b2:	e00e      	b.n	12d2 <usbtmcd_open_cb+0xb2>
            usbtmc_state.ep_bulk_in = ep_desc->bEndpointAddress;
    12b4:	4a35      	ldr	r2, [pc, #212]	; (138c <usbtmcd_open_cb+0x16c>)
    12b6:	70d3      	strb	r3, [r2, #3]
            usbtmc_state.ep_bulk_in_wMaxPacketSize = tu_edpt_packet_size(ep_desc);
    12b8:	4653      	mov	r3, sl
    12ba:	6493      	str	r3, [r2, #72]	; 0x48
    12bc:	e009      	b.n	12d2 <usbtmcd_open_cb+0xb2>
          TU_ASSERT(tu_edpt_dir(ep_desc->bEndpointAddress) == TUSB_DIR_IN, 0);
    12be:	78bb      	ldrb	r3, [r7, #2]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    12c0:	b25a      	sxtb	r2, r3
    12c2:	2a00      	cmp	r2, #0
    12c4:	da55      	bge.n	1372 <usbtmcd_open_cb+0x152>
          TU_ASSERT(usbtmc_state.ep_int_in == 0, 0);
    12c6:	4a31      	ldr	r2, [pc, #196]	; (138c <usbtmcd_open_cb+0x16c>)
    12c8:	7952      	ldrb	r2, [r2, #5]
    12ca:	2a00      	cmp	r2, #0
    12cc:	d153      	bne.n	1376 <usbtmcd_open_cb+0x156>
          usbtmc_state.ep_int_in = ep_desc->bEndpointAddress;
    12ce:	4a2f      	ldr	r2, [pc, #188]	; (138c <usbtmcd_open_cb+0x16c>)
    12d0:	7153      	strb	r3, [r2, #5]
      TU_ASSERT( usbd_edpt_open(rhport, ep_desc), 0);
    12d2:	0039      	movs	r1, r7
    12d4:	9801      	ldr	r0, [sp, #4]
    12d6:	4b2f      	ldr	r3, [pc, #188]	; (1394 <usbtmcd_open_cb+0x174>)
    12d8:	4798      	blx	r3
    12da:	2800      	cmp	r0, #0
    12dc:	d04d      	beq.n	137a <usbtmcd_open_cb+0x15a>
      found_endpoints++;
    12de:	4643      	mov	r3, r8
    12e0:	3301      	adds	r3, #1
    12e2:	b2db      	uxtb	r3, r3
    12e4:	4698      	mov	r8, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
    12e6:	783b      	ldrb	r3, [r7, #0]
    drv_len += tu_desc_len(p_desc);
    12e8:	191c      	adds	r4, r3, r4
    12ea:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
    12ec:	18ff      	adds	r7, r7, r3
  while (found_endpoints < itf_desc->bNumEndpoints && drv_len <= max_len)
    12ee:	792b      	ldrb	r3, [r5, #4]
    12f0:	4598      	cmp	r8, r3
    12f2:	d20d      	bcs.n	1310 <usbtmcd_open_cb+0xf0>
    12f4:	42b4      	cmp	r4, r6
    12f6:	d80b      	bhi.n	1310 <usbtmcd_open_cb+0xf0>
    if ( TUSB_DESC_ENDPOINT == p_desc[DESC_OFFSET_TYPE])
    12f8:	787b      	ldrb	r3, [r7, #1]
    12fa:	2b05      	cmp	r3, #5
    12fc:	d1f3      	bne.n	12e6 <usbtmcd_open_cb+0xc6>
      switch(ep_desc->bmAttributes.xfer) {
    12fe:	78fb      	ldrb	r3, [r7, #3]
    1300:	079b      	lsls	r3, r3, #30
    1302:	0f9b      	lsrs	r3, r3, #30
    1304:	2b02      	cmp	r3, #2
    1306:	d0b9      	beq.n	127c <usbtmcd_open_cb+0x5c>
    1308:	2b03      	cmp	r3, #3
    130a:	d0d8      	beq.n	12be <usbtmcd_open_cb+0x9e>
          TU_ASSERT(false, 0);
    130c:	2400      	movs	r4, #0
    130e:	e793      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT(usbtmc_state.ep_bulk_in  != 0, 0);
    1310:	4a1e      	ldr	r2, [pc, #120]	; (138c <usbtmcd_open_cb+0x16c>)
    1312:	78d2      	ldrb	r2, [r2, #3]
    1314:	2a00      	cmp	r2, #0
    1316:	d032      	beq.n	137e <usbtmcd_open_cb+0x15e>
  TU_ASSERT(usbtmc_state.ep_bulk_out != 0, 0);
    1318:	4a1c      	ldr	r2, [pc, #112]	; (138c <usbtmcd_open_cb+0x16c>)
    131a:	7912      	ldrb	r2, [r2, #4]
    131c:	2a00      	cmp	r2, #0
    131e:	d030      	beq.n	1382 <usbtmcd_open_cb+0x162>
  if (itf_desc->bNumEndpoints == 2)
    1320:	2b02      	cmp	r3, #2
    1322:	d016      	beq.n	1352 <usbtmcd_open_cb+0x132>
  else if (itf_desc->bNumEndpoints == 3)
    1324:	2b03      	cmp	r3, #3
    1326:	d01a      	beq.n	135e <usbtmcd_open_cb+0x13e>
  if(usbtmc_state.capabilities->bmIntfcCapabilities488.is488_2 ||
    1328:	23a0      	movs	r3, #160	; 0xa0
    132a:	4a18      	ldr	r2, [pc, #96]	; (138c <usbtmcd_open_cb+0x16c>)
    132c:	58d3      	ldr	r3, [r2, r3]
    132e:	7b9a      	ldrb	r2, [r3, #14]
    1330:	07d2      	lsls	r2, r2, #31
    1332:	d402      	bmi.n	133a <usbtmcd_open_cb+0x11a>
    1334:	7bdb      	ldrb	r3, [r3, #15]
    1336:	079b      	lsls	r3, r3, #30
    1338:	d503      	bpl.n	1342 <usbtmcd_open_cb+0x122>
    TU_ASSERT(usbtmc_state.ep_int_in != 0, 0);
    133a:	4b14      	ldr	r3, [pc, #80]	; (138c <usbtmcd_open_cb+0x16c>)
    133c:	795b      	ldrb	r3, [r3, #5]
    133e:	2b00      	cmp	r3, #0
    1340:	d021      	beq.n	1386 <usbtmcd_open_cb+0x166>
  atomicChangeState(STATE_CLOSED, STATE_NAK);
    1342:	2101      	movs	r1, #1
    1344:	2000      	movs	r0, #0
    1346:	4b14      	ldr	r3, [pc, #80]	; (1398 <usbtmcd_open_cb+0x178>)
    1348:	4798      	blx	r3
  tud_usbtmc_open_cb(itf_desc->iInterface);
    134a:	7a28      	ldrb	r0, [r5, #8]
    134c:	4b13      	ldr	r3, [pc, #76]	; (139c <usbtmcd_open_cb+0x17c>)
    134e:	4798      	blx	r3
  return drv_len;
    1350:	e772      	b.n	1238 <usbtmcd_open_cb+0x18>
    TU_ASSERT(usbtmc_state.ep_int_in == 0, 0);
    1352:	4b0e      	ldr	r3, [pc, #56]	; (138c <usbtmcd_open_cb+0x16c>)
    1354:	795b      	ldrb	r3, [r3, #5]
    1356:	2b00      	cmp	r3, #0
    1358:	d0e6      	beq.n	1328 <usbtmcd_open_cb+0x108>
    135a:	2400      	movs	r4, #0
    135c:	e76c      	b.n	1238 <usbtmcd_open_cb+0x18>
    TU_ASSERT(usbtmc_state.ep_int_in != 0, 0);
    135e:	4b0b      	ldr	r3, [pc, #44]	; (138c <usbtmcd_open_cb+0x16c>)
    1360:	795b      	ldrb	r3, [r3, #5]
    1362:	2b00      	cmp	r3, #0
    1364:	d1e0      	bne.n	1328 <usbtmcd_open_cb+0x108>
    1366:	2400      	movs	r4, #0
    1368:	e766      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT(usbtmc_state.state == STATE_CLOSED, 0);
    136a:	2400      	movs	r4, #0
    136c:	e764      	b.n	1238 <usbtmcd_open_cb+0x18>
          TU_ASSERT((USBTMCD_BUFFER_SIZE % tu_edpt_packet_size(ep_desc)) == 0, 0);
    136e:	2400      	movs	r4, #0
    1370:	e762      	b.n	1238 <usbtmcd_open_cb+0x18>
          TU_ASSERT(tu_edpt_dir(ep_desc->bEndpointAddress) == TUSB_DIR_IN, 0);
    1372:	2400      	movs	r4, #0
    1374:	e760      	b.n	1238 <usbtmcd_open_cb+0x18>
          TU_ASSERT(usbtmc_state.ep_int_in == 0, 0);
    1376:	2400      	movs	r4, #0
    1378:	e75e      	b.n	1238 <usbtmcd_open_cb+0x18>
      TU_ASSERT( usbd_edpt_open(rhport, ep_desc), 0);
    137a:	2400      	movs	r4, #0
    137c:	e75c      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT(usbtmc_state.ep_bulk_in  != 0, 0);
    137e:	2400      	movs	r4, #0
    1380:	e75a      	b.n	1238 <usbtmcd_open_cb+0x18>
  TU_ASSERT(usbtmc_state.ep_bulk_out != 0, 0);
    1382:	2400      	movs	r4, #0
    1384:	e758      	b.n	1238 <usbtmcd_open_cb+0x18>
    TU_ASSERT(usbtmc_state.ep_int_in != 0, 0);
    1386:	2400      	movs	r4, #0
    1388:	e756      	b.n	1238 <usbtmcd_open_cb+0x18>
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	20000020 	.word	0x20000020
    1390:	00003585 	.word	0x00003585
    1394:	0000237d 	.word	0x0000237d
    1398:	00000f11 	.word	0x00000f11
    139c:	00000675 	.word	0x00000675

000013a0 <tud_usbtmc_start_bus_read>:
{
    13a0:	b510      	push	{r4, lr}
  usbtmcd_state_enum oldState = usbtmc_state.state;
    13a2:	4b0c      	ldr	r3, [pc, #48]	; (13d4 <tud_usbtmc_start_bus_read+0x34>)
    13a4:	7818      	ldrb	r0, [r3, #0]
    13a6:	b2c0      	uxtb	r0, r0
  switch(oldState)
    13a8:	2803      	cmp	r0, #3
    13aa:	d00a      	beq.n	13c2 <tud_usbtmc_start_bus_read+0x22>
    13ac:	280a      	cmp	r0, #10
    13ae:	d003      	beq.n	13b8 <tud_usbtmc_start_bus_read+0x18>
    13b0:	2801      	cmp	r0, #1
    13b2:	d001      	beq.n	13b8 <tud_usbtmc_start_bus_read+0x18>
    TU_VERIFY(false);
    13b4:	2000      	movs	r0, #0
    13b6:	e00c      	b.n	13d2 <tud_usbtmc_start_bus_read+0x32>
    TU_VERIFY(atomicChangeState(oldState, STATE_IDLE));
    13b8:	2102      	movs	r1, #2
    13ba:	4b07      	ldr	r3, [pc, #28]	; (13d8 <tud_usbtmc_start_bus_read+0x38>)
    13bc:	4798      	blx	r3
    13be:	2800      	cmp	r0, #0
    13c0:	d007      	beq.n	13d2 <tud_usbtmc_start_bus_read+0x32>
  TU_VERIFY(usbd_edpt_xfer(usbtmc_state.rhport, usbtmc_state.ep_bulk_out, usbtmc_state.ep_bulk_out_buf, 64));
    13c2:	4b04      	ldr	r3, [pc, #16]	; (13d4 <tud_usbtmc_start_bus_read+0x34>)
    13c4:	001a      	movs	r2, r3
    13c6:	324c      	adds	r2, #76	; 0x4c
    13c8:	7919      	ldrb	r1, [r3, #4]
    13ca:	7898      	ldrb	r0, [r3, #2]
    13cc:	2340      	movs	r3, #64	; 0x40
    13ce:	4c03      	ldr	r4, [pc, #12]	; (13dc <tud_usbtmc_start_bus_read+0x3c>)
    13d0:	47a0      	blx	r4
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	20000020 	.word	0x20000020
    13d8:	00000f11 	.word	0x00000f11
    13dc:	000023bd 	.word	0x000023bd

000013e0 <usbtmcd_reset_cb>:
{
    13e0:	b570      	push	{r4, r5, r6, lr}
  usbtmc_capabilities_specific_t const * capabilities = tud_usbtmc_get_capabilities_cb();
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <usbtmcd_reset_cb+0x3c>)
    13e4:	4798      	blx	r3
    13e6:	0006      	movs	r6, r0
  criticalEnter();
    13e8:	4b0d      	ldr	r3, [pc, #52]	; (1420 <usbtmcd_reset_cb+0x40>)
    13ea:	681c      	ldr	r4, [r3, #0]
  while (sem_hdl->count == 0) { }
    13ec:	8823      	ldrh	r3, [r4, #0]
    13ee:	b29b      	uxth	r3, r3
    13f0:	2b00      	cmp	r3, #0
    13f2:	d0fb      	beq.n	13ec <usbtmcd_reset_cb+0xc>
  sem_hdl->count--;
    13f4:	8823      	ldrh	r3, [r4, #0]
    13f6:	3b01      	subs	r3, #1
    13f8:	b29b      	uxth	r3, r3
    13fa:	8023      	strh	r3, [r4, #0]
  tu_varclr(&usbtmc_state);
    13fc:	4d09      	ldr	r5, [pc, #36]	; (1424 <usbtmcd_reset_cb+0x44>)
    13fe:	22a4      	movs	r2, #164	; 0xa4
    1400:	2100      	movs	r1, #0
    1402:	0028      	movs	r0, r5
    1404:	4b08      	ldr	r3, [pc, #32]	; (1428 <usbtmcd_reset_cb+0x48>)
    1406:	4798      	blx	r3
  usbtmc_state.capabilities = capabilities;
    1408:	23a0      	movs	r3, #160	; 0xa0
    140a:	50ee      	str	r6, [r5, r3]
  usbtmc_state.itf_id = 0xFFu;
    140c:	335f      	adds	r3, #95	; 0x5f
    140e:	706b      	strb	r3, [r5, #1]
  sem_hdl->count++;
    1410:	8823      	ldrh	r3, [r4, #0]
    1412:	3301      	adds	r3, #1
    1414:	b29b      	uxth	r3, r3
    1416:	8023      	strh	r3, [r4, #0]
}
    1418:	bd70      	pop	{r4, r5, r6, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	00000681 	.word	0x00000681
    1420:	20000428 	.word	0x20000428
    1424:	20000020 	.word	0x20000020
    1428:	00005a73 	.word	0x00005a73

0000142c <usbtmcd_xfer_cb>:

bool usbtmcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	46c6      	mov	lr, r8
    1430:	b500      	push	{lr}
    1432:	0005      	movs	r5, r0
    1434:	0018      	movs	r0, r3
  TU_VERIFY(result == XFER_RESULT_SUCCESS);
    1436:	2a00      	cmp	r2, #0
    1438:	d000      	beq.n	143c <usbtmcd_xfer_cb+0x10>
    143a:	e0da      	b.n	15f2 <usbtmcd_xfer_cb+0x1c6>
  //uart_tx_str_sync("TMC XFER CB\r\n");
  if(usbtmc_state.state == STATE_CLEARING) {
    143c:	4b73      	ldr	r3, [pc, #460]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	2b07      	cmp	r3, #7
    1442:	d100      	bne.n	1446 <usbtmcd_xfer_cb+0x1a>
    1444:	e0da      	b.n	15fc <usbtmcd_xfer_cb+0x1d0>
    return true; /* I think we can ignore everything here */
  }

  if(ep_addr == usbtmc_state.ep_bulk_out)
    1446:	4b71      	ldr	r3, [pc, #452]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1448:	791e      	ldrb	r6, [r3, #4]
    144a:	428e      	cmp	r6, r1
    144c:	d00a      	beq.n	1464 <usbtmcd_xfer_cb+0x38>
    case STATE_ABORTING_BULK_IN_ABORTED:
    default:
      TU_VERIFY(false);
    }
  }
  else if(ep_addr == usbtmc_state.ep_bulk_in)
    144e:	4b6f      	ldr	r3, [pc, #444]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1450:	78dc      	ldrb	r4, [r3, #3]
    1452:	42a1      	cmp	r1, r4
    1454:	d061      	beq.n	151a <usbtmcd_xfer_cb+0xee>
    default:
      TU_ASSERT(false);
      return false;
    }
  }
  else if (ep_addr == usbtmc_state.ep_int_in) {
    1456:	4b6d      	ldr	r3, [pc, #436]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1458:	795b      	ldrb	r3, [r3, #5]
    145a:	4299      	cmp	r1, r3
    145c:	d100      	bne.n	1460 <usbtmcd_xfer_cb+0x34>
    145e:	e0c6      	b.n	15ee <usbtmcd_xfer_cb+0x1c2>
    // Good?
    return true;
  }
  return false;
    1460:	2400      	movs	r4, #0
    1462:	e0c7      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
    switch(usbtmc_state.state)
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	b2db      	uxtb	r3, r3
    1468:	2b02      	cmp	r3, #2
    146a:	d003      	beq.n	1474 <usbtmcd_xfer_cb+0x48>
    146c:	2b03      	cmp	r3, #3
    146e:	d045      	beq.n	14fc <usbtmcd_xfer_cb+0xd0>
      TU_VERIFY(false);
    1470:	2400      	movs	r4, #0
    1472:	e0bf      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(xferred_bytes >= sizeof(usbtmc_msg_generic_t));
    1474:	280b      	cmp	r0, #11
    1476:	d800      	bhi.n	147a <usbtmcd_xfer_cb+0x4e>
    1478:	e0c2      	b.n	1600 <usbtmcd_xfer_cb+0x1d4>
      uint8_t invInvTag = (uint8_t)~(msg->header.bTagInverse);
    147a:	4a64      	ldr	r2, [pc, #400]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    147c:	234e      	movs	r3, #78	; 0x4e
    147e:	5cd3      	ldrb	r3, [r2, r3]
    1480:	43db      	mvns	r3, r3
    1482:	b2db      	uxtb	r3, r3
      TU_VERIFY(msg->header.bTag == invInvTag);
    1484:	244d      	movs	r4, #77	; 0x4d
    1486:	5d12      	ldrb	r2, [r2, r4]
    1488:	4293      	cmp	r3, r2
    148a:	d001      	beq.n	1490 <usbtmcd_xfer_cb+0x64>
    148c:	2400      	movs	r4, #0
    148e:	e0b1      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(msg->header.bTag != 0x00);
    1490:	2a00      	cmp	r2, #0
    1492:	d100      	bne.n	1496 <usbtmcd_xfer_cb+0x6a>
    1494:	e0b6      	b.n	1604 <usbtmcd_xfer_cb+0x1d8>
      switch(msg->header.MsgID) {
    1496:	234c      	movs	r3, #76	; 0x4c
    1498:	4a5c      	ldr	r2, [pc, #368]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    149a:	5cd3      	ldrb	r3, [r2, r3]
    149c:	2b02      	cmp	r3, #2
    149e:	d018      	beq.n	14d2 <usbtmcd_xfer_cb+0xa6>
    14a0:	2b80      	cmp	r3, #128	; 0x80
    14a2:	d01d      	beq.n	14e0 <usbtmcd_xfer_cb+0xb4>
    14a4:	2b01      	cmp	r3, #1
    14a6:	d005      	beq.n	14b4 <usbtmcd_xfer_cb+0x88>
        usbd_edpt_stall(rhport, usbtmc_state.ep_bulk_out);
    14a8:	0031      	movs	r1, r6
    14aa:	0028      	movs	r0, r5
    14ac:	4b58      	ldr	r3, [pc, #352]	; (1610 <usbtmcd_xfer_cb+0x1e4>)
    14ae:	4798      	blx	r3
        TU_VERIFY(false);
    14b0:	2400      	movs	r4, #0
    14b2:	e09f      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        if(!handle_devMsgOutStart(rhport, msg, xferred_bytes))
    14b4:	0002      	movs	r2, r0
    14b6:	4955      	ldr	r1, [pc, #340]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    14b8:	314c      	adds	r1, #76	; 0x4c
    14ba:	0028      	movs	r0, r5
    14bc:	4b55      	ldr	r3, [pc, #340]	; (1614 <usbtmcd_xfer_cb+0x1e8>)
    14be:	4798      	blx	r3
    14c0:	1e04      	subs	r4, r0, #0
    14c2:	d000      	beq.n	14c6 <usbtmcd_xfer_cb+0x9a>
    14c4:	e096      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
          usbd_edpt_stall(rhport, usbtmc_state.ep_bulk_out);
    14c6:	4b51      	ldr	r3, [pc, #324]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    14c8:	7919      	ldrb	r1, [r3, #4]
    14ca:	0028      	movs	r0, r5
    14cc:	4b50      	ldr	r3, [pc, #320]	; (1610 <usbtmcd_xfer_cb+0x1e4>)
    14ce:	4798      	blx	r3
          TU_VERIFY(false);
    14d0:	e090      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        TU_VERIFY(handle_devMsgIn(msg, xferred_bytes));
    14d2:	0001      	movs	r1, r0
    14d4:	484d      	ldr	r0, [pc, #308]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    14d6:	304c      	adds	r0, #76	; 0x4c
    14d8:	4b4f      	ldr	r3, [pc, #316]	; (1618 <usbtmcd_xfer_cb+0x1ec>)
    14da:	4798      	blx	r3
    14dc:	0004      	movs	r4, r0
    14de:	e089      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        TU_VERIFY(usbtmc_state.capabilities->bmIntfcCapabilities488.supportsTrigger);
    14e0:	23a0      	movs	r3, #160	; 0xa0
    14e2:	4a4a      	ldr	r2, [pc, #296]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    14e4:	58d3      	ldr	r3, [r2, r3]
    14e6:	7b9b      	ldrb	r3, [r3, #14]
    14e8:	075b      	lsls	r3, r3, #29
    14ea:	d401      	bmi.n	14f0 <usbtmcd_xfer_cb+0xc4>
    14ec:	2400      	movs	r4, #0
    14ee:	e081      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        TU_VERIFY(tud_usbtmc_msg_trigger_cb(msg));
    14f0:	0010      	movs	r0, r2
    14f2:	304c      	adds	r0, #76	; 0x4c
    14f4:	4b49      	ldr	r3, [pc, #292]	; (161c <usbtmcd_xfer_cb+0x1f0>)
    14f6:	4798      	blx	r3
    14f8:	0004      	movs	r4, r0
    14fa:	e07b      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      if(!handle_devMsgOut(rhport, usbtmc_state.ep_bulk_out_buf, xferred_bytes, xferred_bytes))
    14fc:	0003      	movs	r3, r0
    14fe:	0002      	movs	r2, r0
    1500:	4942      	ldr	r1, [pc, #264]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1502:	314c      	adds	r1, #76	; 0x4c
    1504:	0028      	movs	r0, r5
    1506:	4c46      	ldr	r4, [pc, #280]	; (1620 <usbtmcd_xfer_cb+0x1f4>)
    1508:	47a0      	blx	r4
    150a:	1e04      	subs	r4, r0, #0
    150c:	d172      	bne.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        usbd_edpt_stall(rhport, usbtmc_state.ep_bulk_out);
    150e:	4b3f      	ldr	r3, [pc, #252]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1510:	7919      	ldrb	r1, [r3, #4]
    1512:	0028      	movs	r0, r5
    1514:	4b3e      	ldr	r3, [pc, #248]	; (1610 <usbtmcd_xfer_cb+0x1e4>)
    1516:	4798      	blx	r3
        TU_VERIFY(false);
    1518:	e06c      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
    switch(usbtmc_state.state) {
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	b2db      	uxtb	r3, r3
    151e:	2b06      	cmp	r3, #6
    1520:	d028      	beq.n	1574 <usbtmcd_xfer_cb+0x148>
    1522:	d909      	bls.n	1538 <usbtmcd_xfer_cb+0x10c>
    1524:	2b08      	cmp	r3, #8
    1526:	d055      	beq.n	15d4 <usbtmcd_xfer_cb+0x1a8>
    1528:	2b09      	cmp	r3, #9
    152a:	d000      	beq.n	152e <usbtmcd_xfer_cb+0x102>
    152c:	e06c      	b.n	1608 <usbtmcd_xfer_cb+0x1dc>
      usbtmc_state.state = STATE_ABORTING_BULK_IN_ABORTED;
    152e:	220a      	movs	r2, #10
    1530:	4b36      	ldr	r3, [pc, #216]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1532:	701a      	strb	r2, [r3, #0]
      return true;
    1534:	2401      	movs	r4, #1
    1536:	e05d      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
    switch(usbtmc_state.state) {
    1538:	2b05      	cmp	r3, #5
    153a:	d165      	bne.n	1608 <usbtmcd_xfer_cb+0x1dc>
      if(usbtmc_state.transfer_size_remaining >= sizeof(usbtmc_state.ep_bulk_in_buf))
    153c:	2390      	movs	r3, #144	; 0x90
    153e:	4a33      	ldr	r2, [pc, #204]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    1540:	58d6      	ldr	r6, [r2, r3]
    1542:	2e3f      	cmp	r6, #63	; 0x3f
    1544:	d920      	bls.n	1588 <usbtmcd_xfer_cb+0x15c>
        TU_VERIFY( usbd_edpt_xfer(rhport, usbtmc_state.ep_bulk_in,
    1546:	330c      	adds	r3, #12
    1548:	58d2      	ldr	r2, [r2, r3]
    154a:	3b5c      	subs	r3, #92	; 0x5c
    154c:	0021      	movs	r1, r4
    154e:	0028      	movs	r0, r5
    1550:	4c34      	ldr	r4, [pc, #208]	; (1624 <usbtmcd_xfer_cb+0x1f8>)
    1552:	47a0      	blx	r4
    1554:	1e04      	subs	r4, r0, #0
    1556:	d04d      	beq.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        usbtmc_state.devInBuffer += sizeof(usbtmc_state.ep_bulk_in_buf);
    1558:	4b2c      	ldr	r3, [pc, #176]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    155a:	219c      	movs	r1, #156	; 0x9c
    155c:	585a      	ldr	r2, [r3, r1]
    155e:	3240      	adds	r2, #64	; 0x40
    1560:	505a      	str	r2, [r3, r1]
        usbtmc_state.transfer_size_remaining -= sizeof(usbtmc_state.ep_bulk_in_buf);
    1562:	390c      	subs	r1, #12
    1564:	585a      	ldr	r2, [r3, r1]
    1566:	3a40      	subs	r2, #64	; 0x40
    1568:	505a      	str	r2, [r3, r1]
        usbtmc_state.transfer_size_sent += sizeof(usbtmc_state.ep_bulk_in_buf);
    156a:	3104      	adds	r1, #4
    156c:	585a      	ldr	r2, [r3, r1]
    156e:	3240      	adds	r2, #64	; 0x40
    1570:	505a      	str	r2, [r3, r1]
    1572:	e03f      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(atomicChangeState(STATE_TX_SHORTED, STATE_NAK));
    1574:	2101      	movs	r1, #1
    1576:	2006      	movs	r0, #6
    1578:	4b2b      	ldr	r3, [pc, #172]	; (1628 <usbtmcd_xfer_cb+0x1fc>)
    157a:	4798      	blx	r3
    157c:	1e04      	subs	r4, r0, #0
    157e:	d039      	beq.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(tud_usbtmc_msgBulkIn_complete_cb());
    1580:	4b2a      	ldr	r3, [pc, #168]	; (162c <usbtmcd_xfer_cb+0x200>)
    1582:	4798      	blx	r3
    1584:	2400      	movs	r4, #0
    1586:	e035      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        memcpy(usbtmc_state.ep_bulk_in_buf, usbtmc_state.devInBuffer, usbtmc_state.transfer_size_remaining);
    1588:	4f20      	ldr	r7, [pc, #128]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    158a:	239c      	movs	r3, #156	; 0x9c
    158c:	4698      	mov	r8, r3
    158e:	0032      	movs	r2, r6
    1590:	58f9      	ldr	r1, [r7, r3]
    1592:	4827      	ldr	r0, [pc, #156]	; (1630 <usbtmcd_xfer_cb+0x204>)
    1594:	4b27      	ldr	r3, [pc, #156]	; (1634 <usbtmcd_xfer_cb+0x208>)
    1596:	4798      	blx	r3
          usbtmc_state.transfer_size_sent += sizeof(usbtmc_state.transfer_size_remaining);
    1598:	2294      	movs	r2, #148	; 0x94
    159a:	58bb      	ldr	r3, [r7, r2]
    159c:	3304      	adds	r3, #4
    159e:	50bb      	str	r3, [r7, r2]
        usbtmc_state.transfer_size_remaining = 0;
    15a0:	2300      	movs	r3, #0
    15a2:	3a04      	subs	r2, #4
    15a4:	50bb      	str	r3, [r7, r2]
        usbtmc_state.devInBuffer = NULL;
    15a6:	4642      	mov	r2, r8
    15a8:	50bb      	str	r3, [r7, r2]
        TU_VERIFY( usbd_edpt_xfer(rhport, usbtmc_state.ep_bulk_in, usbtmc_state.ep_bulk_in_buf, (uint16_t)packetLen) );
    15aa:	b2b3      	uxth	r3, r6
    15ac:	4a20      	ldr	r2, [pc, #128]	; (1630 <usbtmcd_xfer_cb+0x204>)
    15ae:	0021      	movs	r1, r4
    15b0:	0028      	movs	r0, r5
    15b2:	4c1c      	ldr	r4, [pc, #112]	; (1624 <usbtmcd_xfer_cb+0x1f8>)
    15b4:	47a0      	blx	r4
    15b6:	1e04      	subs	r4, r0, #0
    15b8:	d01c      	beq.n	15f4 <usbtmcd_xfer_cb+0x1c8>
        if(((packetLen % usbtmc_state.ep_bulk_in_wMaxPacketSize) != 0) || (packetLen == 0 ))
    15ba:	4b14      	ldr	r3, [pc, #80]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    15bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
    15be:	0030      	movs	r0, r6
    15c0:	4b1d      	ldr	r3, [pc, #116]	; (1638 <usbtmcd_xfer_cb+0x20c>)
    15c2:	4798      	blx	r3
    15c4:	2900      	cmp	r1, #0
    15c6:	d101      	bne.n	15cc <usbtmcd_xfer_cb+0x1a0>
    15c8:	2e00      	cmp	r6, #0
    15ca:	d113      	bne.n	15f4 <usbtmcd_xfer_cb+0x1c8>
          usbtmc_state.state = STATE_TX_SHORTED;
    15cc:	2206      	movs	r2, #6
    15ce:	4b0f      	ldr	r3, [pc, #60]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    15d0:	701a      	strb	r2, [r3, #0]
    15d2:	e00f      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY( usbd_edpt_xfer(rhport, usbtmc_state.ep_bulk_in, usbtmc_state.ep_bulk_in_buf,(uint16_t)0u));
    15d4:	2300      	movs	r3, #0
    15d6:	4a0d      	ldr	r2, [pc, #52]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    15d8:	3208      	adds	r2, #8
    15da:	0021      	movs	r1, r4
    15dc:	0028      	movs	r0, r5
    15de:	4c11      	ldr	r4, [pc, #68]	; (1624 <usbtmcd_xfer_cb+0x1f8>)
    15e0:	47a0      	blx	r4
    15e2:	1e04      	subs	r4, r0, #0
    15e4:	d006      	beq.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      usbtmc_state.state = STATE_ABORTING_BULK_IN_SHORTED;
    15e6:	2209      	movs	r2, #9
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <usbtmcd_xfer_cb+0x1e0>)
    15ea:	701a      	strb	r2, [r3, #0]
      return true;
    15ec:	e002      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
    return true;
    15ee:	2401      	movs	r4, #1
    15f0:	e000      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
  TU_VERIFY(result == XFER_RESULT_SUCCESS);
    15f2:	2400      	movs	r4, #0
}
    15f4:	0020      	movs	r0, r4
    15f6:	bc04      	pop	{r2}
    15f8:	4690      	mov	r8, r2
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true; /* I think we can ignore everything here */
    15fc:	2401      	movs	r4, #1
    15fe:	e7f9      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(xferred_bytes >= sizeof(usbtmc_msg_generic_t));
    1600:	2400      	movs	r4, #0
    1602:	e7f7      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_VERIFY(msg->header.bTag != 0x00);
    1604:	2400      	movs	r4, #0
    1606:	e7f5      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
      TU_ASSERT(false);
    1608:	2400      	movs	r4, #0
    160a:	e7f3      	b.n	15f4 <usbtmcd_xfer_cb+0x1c8>
    160c:	20000020 	.word	0x20000020
    1610:	00002455 	.word	0x00002455
    1614:	00001031 	.word	0x00001031
    1618:	00000f4d 	.word	0x00000f4d
    161c:	00000689 	.word	0x00000689
    1620:	00000fc9 	.word	0x00000fc9
    1624:	000023bd 	.word	0x000023bd
    1628:	00000f11 	.word	0x00000f11
    162c:	000006c9 	.word	0x000006c9
    1630:	20000028 	.word	0x20000028
    1634:	00005a61 	.word	0x00005a61
    1638:	000033b1 	.word	0x000033b1

0000163c <usbtmcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool usbtmcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
    163c:	b570      	push	{r4, r5, r6, lr}
    163e:	b084      	sub	sp, #16
    1640:	0004      	movs	r4, r0
    1642:	0015      	movs	r5, r2
  // nothing to do with DATA and ACK stage
  if ( stage != CONTROL_STAGE_SETUP ) return true;
    1644:	2901      	cmp	r1, #1
    1646:	d002      	beq.n	164e <usbtmcd_control_xfer_cb+0x12>
    1648:	2001      	movs	r0, #1
  default:
    TU_VERIFY(false);
    return false;
  }
  TU_VERIFY(false);
}
    164a:	b004      	add	sp, #16
    164c:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t tmcStatusCode = USBTMC_STATUS_FAILED;
    164e:	2280      	movs	r2, #128	; 0x80
    1650:	230f      	movs	r3, #15
    1652:	446b      	add	r3, sp
    1654:	701a      	strb	r2, [r3, #0]
  if((request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) &&
    1656:	782a      	ldrb	r2, [r5, #0]
    1658:	237f      	movs	r3, #127	; 0x7f
    165a:	4013      	ands	r3, r2
    165c:	2b02      	cmp	r3, #2
    165e:	d005      	beq.n	166c <usbtmcd_control_xfer_cb+0x30>
  if(request->bmRequestType_bit.type != TUSB_REQ_TYPE_CLASS)
    1660:	2360      	movs	r3, #96	; 0x60
    1662:	4013      	ands	r3, r2
    1664:	2b20      	cmp	r3, #32
    1666:	d054      	beq.n	1712 <usbtmcd_control_xfer_cb+0xd6>
    return false;
    1668:	2000      	movs	r0, #0
    166a:	e7ee      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      (request->bRequest == TUSB_REQ_CLEAR_FEATURE) &&
    166c:	786b      	ldrb	r3, [r5, #1]
      (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_ENDPOINT) &&
    166e:	2b01      	cmp	r3, #1
    1670:	d1f6      	bne.n	1660 <usbtmcd_control_xfer_cb+0x24>
      (request->wValue == TUSB_REQ_FEATURE_EDPT_HALT))
    1672:	78a9      	ldrb	r1, [r5, #2]
    1674:	78eb      	ldrb	r3, [r5, #3]
    1676:	021b      	lsls	r3, r3, #8
    1678:	430b      	orrs	r3, r1
      (request->bRequest == TUSB_REQ_CLEAR_FEATURE) &&
    167a:	d1f1      	bne.n	1660 <usbtmcd_control_xfer_cb+0x24>
    uint32_t ep_addr = (request->wIndex);
    167c:	792b      	ldrb	r3, [r5, #4]
    167e:	796a      	ldrb	r2, [r5, #5]
    1680:	0212      	lsls	r2, r2, #8
    1682:	431a      	orrs	r2, r3
    if(ep_addr == usbtmc_state.ep_bulk_out)
    1684:	49bc      	ldr	r1, [pc, #752]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1686:	7909      	ldrb	r1, [r1, #4]
    1688:	428a      	cmp	r2, r1
    168a:	d00c      	beq.n	16a6 <usbtmcd_control_xfer_cb+0x6a>
    else if (ep_addr == usbtmc_state.ep_bulk_in)
    168c:	49ba      	ldr	r1, [pc, #744]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    168e:	78c9      	ldrb	r1, [r1, #3]
    1690:	428a      	cmp	r2, r1
    1692:	d028      	beq.n	16e6 <usbtmcd_control_xfer_cb+0xaa>
    else if ((usbtmc_state.ep_int_in != 0) && (ep_addr == usbtmc_state.ep_int_in))
    1694:	49b8      	ldr	r1, [pc, #736]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1696:	7949      	ldrb	r1, [r1, #5]
    1698:	2900      	cmp	r1, #0
    169a:	d100      	bne.n	169e <usbtmcd_control_xfer_cb+0x62>
    169c:	e2d3      	b.n	1c46 <usbtmcd_control_xfer_cb+0x60a>
    169e:	428a      	cmp	r2, r1
    16a0:	d02d      	beq.n	16fe <usbtmcd_control_xfer_cb+0xc2>
      return false;
    16a2:	2000      	movs	r0, #0
    16a4:	e7d1      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      criticalEnter();
    16a6:	4bb5      	ldr	r3, [pc, #724]	; (197c <usbtmcd_control_xfer_cb+0x340>)
    16a8:	6819      	ldr	r1, [r3, #0]
  while (sem_hdl->count == 0) { }
    16aa:	880b      	ldrh	r3, [r1, #0]
    16ac:	b29b      	uxth	r3, r3
    16ae:	2b00      	cmp	r3, #0
    16b0:	d0fb      	beq.n	16aa <usbtmcd_control_xfer_cb+0x6e>
  sem_hdl->count--;
    16b2:	880b      	ldrh	r3, [r1, #0]
    16b4:	3b01      	subs	r3, #1
    16b6:	b29b      	uxth	r3, r3
    16b8:	800b      	strh	r3, [r1, #0]
      usbd_edpt_stall(rhport, (uint8_t)ep_addr);
    16ba:	b2d5      	uxtb	r5, r2
    16bc:	0029      	movs	r1, r5
    16be:	0020      	movs	r0, r4
    16c0:	4baf      	ldr	r3, [pc, #700]	; (1980 <usbtmcd_control_xfer_cb+0x344>)
    16c2:	4798      	blx	r3
      usbd_edpt_clear_stall(rhport, (uint8_t)ep_addr);
    16c4:	0029      	movs	r1, r5
    16c6:	0020      	movs	r0, r4
    16c8:	4bae      	ldr	r3, [pc, #696]	; (1984 <usbtmcd_control_xfer_cb+0x348>)
    16ca:	4798      	blx	r3
      usbtmc_state.state = STATE_NAK; // USBD core has placed EP in NAK state for us
    16cc:	2201      	movs	r2, #1
    16ce:	4baa      	ldr	r3, [pc, #680]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    16d0:	701a      	strb	r2, [r3, #0]
      criticalLeave();
    16d2:	4baa      	ldr	r3, [pc, #680]	; (197c <usbtmcd_control_xfer_cb+0x340>)
    16d4:	681a      	ldr	r2, [r3, #0]
  sem_hdl->count++;
    16d6:	8813      	ldrh	r3, [r2, #0]
    16d8:	3301      	adds	r3, #1
    16da:	b29b      	uxth	r3, r3
    16dc:	8013      	strh	r3, [r2, #0]
      tud_usbtmc_bulkOut_clearFeature_cb();
    16de:	4baa      	ldr	r3, [pc, #680]	; (1988 <usbtmcd_control_xfer_cb+0x34c>)
    16e0:	4798      	blx	r3
    return true;
    16e2:	2001      	movs	r0, #1
    16e4:	e7b1      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      usbd_edpt_stall(rhport, (uint8_t)ep_addr);
    16e6:	b2d5      	uxtb	r5, r2
    16e8:	0029      	movs	r1, r5
    16ea:	4ba5      	ldr	r3, [pc, #660]	; (1980 <usbtmcd_control_xfer_cb+0x344>)
    16ec:	4798      	blx	r3
      usbd_edpt_clear_stall(rhport, (uint8_t)ep_addr);
    16ee:	0029      	movs	r1, r5
    16f0:	0020      	movs	r0, r4
    16f2:	4ba4      	ldr	r3, [pc, #656]	; (1984 <usbtmcd_control_xfer_cb+0x348>)
    16f4:	4798      	blx	r3
      tud_usbtmc_bulkIn_clearFeature_cb();
    16f6:	4ba5      	ldr	r3, [pc, #660]	; (198c <usbtmcd_control_xfer_cb+0x350>)
    16f8:	4798      	blx	r3
    return true;
    16fa:	2001      	movs	r0, #1
    16fc:	e7a5      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      usbd_edpt_stall(rhport, (uint8_t)ep_addr);
    16fe:	b2d5      	uxtb	r5, r2
    1700:	0029      	movs	r1, r5
    1702:	4b9f      	ldr	r3, [pc, #636]	; (1980 <usbtmcd_control_xfer_cb+0x344>)
    1704:	4798      	blx	r3
      usbd_edpt_clear_stall(rhport, (uint8_t)ep_addr);
    1706:	0029      	movs	r1, r5
    1708:	0020      	movs	r0, r4
    170a:	4b9e      	ldr	r3, [pc, #632]	; (1984 <usbtmcd_control_xfer_cb+0x348>)
    170c:	4798      	blx	r3
    return true;
    170e:	2001      	movs	r0, #1
      usbd_edpt_clear_stall(rhport, (uint8_t)ep_addr);
    1710:	e79b      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
  switch(request->bRequest)
    1712:	786b      	ldrb	r3, [r5, #1]
    1714:	2b05      	cmp	r3, #5
    1716:	d100      	bne.n	171a <usbtmcd_control_xfer_cb+0xde>
    1718:	e18d      	b.n	1a36 <usbtmcd_control_xfer_cb+0x3fa>
    171a:	d81c      	bhi.n	1756 <usbtmcd_control_xfer_cb+0x11a>
    171c:	2b02      	cmp	r3, #2
    171e:	d076      	beq.n	180e <usbtmcd_control_xfer_cb+0x1d2>
    1720:	d90a      	bls.n	1738 <usbtmcd_control_xfer_cb+0xfc>
    1722:	2b03      	cmp	r3, #3
    1724:	d100      	bne.n	1728 <usbtmcd_control_xfer_cb+0xec>
    1726:	e0a2      	b.n	186e <usbtmcd_control_xfer_cb+0x232>
    1728:	2b04      	cmp	r3, #4
    172a:	d000      	beq.n	172e <usbtmcd_control_xfer_cb+0xf2>
    172c:	e28d      	b.n	1c4a <usbtmcd_control_xfer_cb+0x60e>
    TU_VERIFY(request->bmRequestType == 0xA2); // in,class,EP
    172e:	2aa2      	cmp	r2, #162	; 0xa2
    1730:	d100      	bne.n	1734 <usbtmcd_control_xfer_cb+0xf8>
    1732:	e119      	b.n	1968 <usbtmcd_control_xfer_cb+0x32c>
    1734:	2000      	movs	r0, #0
    1736:	e788      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
  switch(request->bRequest)
    1738:	2b01      	cmp	r3, #1
    173a:	d000      	beq.n	173e <usbtmcd_control_xfer_cb+0x102>
    173c:	e285      	b.n	1c4a <usbtmcd_control_xfer_cb+0x60e>
    usbtmc_initiate_abort_rsp_t rsp = {
    173e:	ab01      	add	r3, sp, #4
    1740:	2200      	movs	r2, #0
    1742:	801a      	strh	r2, [r3, #0]
        .bTag = usbtmc_state.lastBulkOutTag,
    1744:	3298      	adds	r2, #152	; 0x98
    1746:	498c      	ldr	r1, [pc, #560]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1748:	5c8a      	ldrb	r2, [r1, r2]
    usbtmc_initiate_abort_rsp_t rsp = {
    174a:	705a      	strb	r2, [r3, #1]
    TU_VERIFY(request->bmRequestType == 0xA2); // in,class,interface
    174c:	782b      	ldrb	r3, [r5, #0]
    174e:	2ba2      	cmp	r3, #162	; 0xa2
    1750:	d011      	beq.n	1776 <usbtmcd_control_xfer_cb+0x13a>
    1752:	2000      	movs	r0, #0
    1754:	e779      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
  switch(request->bRequest)
    1756:	2b07      	cmp	r3, #7
    1758:	d100      	bne.n	175c <usbtmcd_control_xfer_cb+0x120>
    175a:	e1e0      	b.n	1b1e <usbtmcd_control_xfer_cb+0x4e2>
    175c:	d200      	bcs.n	1760 <usbtmcd_control_xfer_cb+0x124>
    175e:	e19e      	b.n	1a9e <usbtmcd_control_xfer_cb+0x462>
    1760:	2b40      	cmp	r3, #64	; 0x40
    1762:	d100      	bne.n	1766 <usbtmcd_control_xfer_cb+0x12a>
    1764:	e1f0      	b.n	1b48 <usbtmcd_control_xfer_cb+0x50c>
    1766:	2b80      	cmp	r3, #128	; 0x80
    1768:	d000      	beq.n	176c <usbtmcd_control_xfer_cb+0x130>
    176a:	e26e      	b.n	1c4a <usbtmcd_control_xfer_cb+0x60e>
      TU_VERIFY(request->bmRequestType == 0xA1); // in,class,interface
    176c:	2aa1      	cmp	r2, #161	; 0xa1
    176e:	d100      	bne.n	1772 <usbtmcd_control_xfer_cb+0x136>
    1770:	e20e      	b.n	1b90 <usbtmcd_control_xfer_cb+0x554>
    1772:	2000      	movs	r0, #0
    1774:	e769      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wLength == sizeof(rsp));
    1776:	79a9      	ldrb	r1, [r5, #6]
    1778:	79eb      	ldrb	r3, [r5, #7]
    177a:	021b      	lsls	r3, r3, #8
    177c:	430b      	orrs	r3, r1
    177e:	2b02      	cmp	r3, #2
    1780:	d001      	beq.n	1786 <usbtmcd_control_xfer_cb+0x14a>
    1782:	2000      	movs	r0, #0
    1784:	e761      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wIndex == usbtmc_state.ep_bulk_out);
    1786:	7929      	ldrb	r1, [r5, #4]
    1788:	796b      	ldrb	r3, [r5, #5]
    178a:	021b      	lsls	r3, r3, #8
    178c:	430b      	orrs	r3, r1
    178e:	497a      	ldr	r1, [pc, #488]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1790:	7909      	ldrb	r1, [r1, #4]
    1792:	428b      	cmp	r3, r1
    1794:	d001      	beq.n	179a <usbtmcd_control_xfer_cb+0x15e>
    1796:	2000      	movs	r0, #0
    1798:	e757      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    if(usbtmc_state.state != STATE_RCV)
    179a:	4b77      	ldr	r3, [pc, #476]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    179c:	781b      	ldrb	r3, [r3, #0]
    179e:	2b03      	cmp	r3, #3
    17a0:	d009      	beq.n	17b6 <usbtmcd_control_xfer_cb+0x17a>
      rsp.USBTMC_status = USBTMC_STATUS_FAILED;
    17a2:	2280      	movs	r2, #128	; 0x80
    17a4:	ab01      	add	r3, sp, #4
    17a6:	701a      	strb	r2, [r3, #0]
    TU_VERIFY(tud_control_xfer(rhport, request, (void*)&rsp,sizeof(rsp)));
    17a8:	2302      	movs	r3, #2
    17aa:	aa01      	add	r2, sp, #4
    17ac:	0029      	movs	r1, r5
    17ae:	0020      	movs	r0, r4
    17b0:	4c77      	ldr	r4, [pc, #476]	; (1990 <usbtmcd_control_xfer_cb+0x354>)
    17b2:	47a0      	blx	r4
    17b4:	e749      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    else if(usbtmc_state.lastBulkOutTag == (request->wValue & 0x7Fu))
    17b6:	78a9      	ldrb	r1, [r5, #2]
    17b8:	78eb      	ldrb	r3, [r5, #3]
    17ba:	021b      	lsls	r3, r3, #8
    17bc:	430b      	orrs	r3, r1
    17be:	217f      	movs	r1, #127	; 0x7f
    17c0:	400b      	ands	r3, r1
    17c2:	429a      	cmp	r2, r3
    17c4:	d103      	bne.n	17ce <usbtmcd_control_xfer_cb+0x192>
      rsp.USBTMC_status = USBTMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
    17c6:	2281      	movs	r2, #129	; 0x81
    17c8:	ab01      	add	r3, sp, #4
    17ca:	701a      	strb	r2, [r3, #0]
    17cc:	e7ec      	b.n	17a8 <usbtmcd_control_xfer_cb+0x16c>
      rsp.USBTMC_status = USBTMC_STATUS_SUCCESS;
    17ce:	2201      	movs	r2, #1
    17d0:	ab01      	add	r3, sp, #4
    17d2:	701a      	strb	r2, [r3, #0]
      criticalEnter();
    17d4:	4b69      	ldr	r3, [pc, #420]	; (197c <usbtmcd_control_xfer_cb+0x340>)
    17d6:	681b      	ldr	r3, [r3, #0]
  while (sem_hdl->count == 0) { }
    17d8:	881a      	ldrh	r2, [r3, #0]
    17da:	b292      	uxth	r2, r2
    17dc:	2a00      	cmp	r2, #0
    17de:	d0fb      	beq.n	17d8 <usbtmcd_control_xfer_cb+0x19c>
  sem_hdl->count--;
    17e0:	881a      	ldrh	r2, [r3, #0]
    17e2:	3a01      	subs	r2, #1
    17e4:	b292      	uxth	r2, r2
    17e6:	801a      	strh	r2, [r3, #0]
      usbtmc_state.state = STATE_ABORTING_BULK_OUT;
    17e8:	210b      	movs	r1, #11
    17ea:	4a63      	ldr	r2, [pc, #396]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    17ec:	7011      	strb	r1, [r2, #0]
  sem_hdl->count++;
    17ee:	881a      	ldrh	r2, [r3, #0]
    17f0:	3201      	adds	r2, #1
    17f2:	b292      	uxth	r2, r2
    17f4:	801a      	strh	r2, [r3, #0]
      TU_VERIFY(tud_usbtmc_initiate_abort_bulk_out_cb(&(rsp.USBTMC_status)));
    17f6:	a801      	add	r0, sp, #4
    17f8:	4b66      	ldr	r3, [pc, #408]	; (1994 <usbtmcd_control_xfer_cb+0x358>)
    17fa:	4798      	blx	r3
    17fc:	2800      	cmp	r0, #0
    17fe:	d100      	bne.n	1802 <usbtmcd_control_xfer_cb+0x1c6>
    1800:	e723      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      usbd_edpt_stall(rhport, usbtmc_state.ep_bulk_out);
    1802:	4b5d      	ldr	r3, [pc, #372]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1804:	7919      	ldrb	r1, [r3, #4]
    1806:	0020      	movs	r0, r4
    1808:	4b5d      	ldr	r3, [pc, #372]	; (1980 <usbtmcd_control_xfer_cb+0x344>)
    180a:	4798      	blx	r3
    180c:	e7cc      	b.n	17a8 <usbtmcd_control_xfer_cb+0x16c>
    usbtmc_check_abort_bulk_rsp_t rsp = {
    180e:	ae01      	add	r6, sp, #4
    1810:	2208      	movs	r2, #8
    1812:	2100      	movs	r1, #0
    1814:	0030      	movs	r0, r6
    1816:	4b60      	ldr	r3, [pc, #384]	; (1998 <usbtmcd_control_xfer_cb+0x35c>)
    1818:	4798      	blx	r3
    181a:	2301      	movs	r3, #1
    181c:	7033      	strb	r3, [r6, #0]
        .NBYTES_RXD_TXD = usbtmc_state.transfer_size_sent
    181e:	3393      	adds	r3, #147	; 0x93
    1820:	4a55      	ldr	r2, [pc, #340]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1822:	58d3      	ldr	r3, [r2, r3]
    1824:	6073      	str	r3, [r6, #4]
    TU_VERIFY(request->bmRequestType == 0xA2); // in,class,EP
    1826:	782b      	ldrb	r3, [r5, #0]
    1828:	2ba2      	cmp	r3, #162	; 0xa2
    182a:	d001      	beq.n	1830 <usbtmcd_control_xfer_cb+0x1f4>
    182c:	2000      	movs	r0, #0
    182e:	e70c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wLength == sizeof(rsp));
    1830:	79aa      	ldrb	r2, [r5, #6]
    1832:	79eb      	ldrb	r3, [r5, #7]
    1834:	021b      	lsls	r3, r3, #8
    1836:	4313      	orrs	r3, r2
    1838:	2b08      	cmp	r3, #8
    183a:	d001      	beq.n	1840 <usbtmcd_control_xfer_cb+0x204>
    183c:	2000      	movs	r0, #0
    183e:	e704      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wIndex == usbtmc_state.ep_bulk_out);
    1840:	792a      	ldrb	r2, [r5, #4]
    1842:	796b      	ldrb	r3, [r5, #5]
    1844:	021b      	lsls	r3, r3, #8
    1846:	4313      	orrs	r3, r2
    1848:	4a4b      	ldr	r2, [pc, #300]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    184a:	7912      	ldrb	r2, [r2, #4]
    184c:	4293      	cmp	r3, r2
    184e:	d001      	beq.n	1854 <usbtmcd_control_xfer_cb+0x218>
    1850:	2000      	movs	r0, #0
    1852:	e6fa      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(tud_usbtmc_check_abort_bulk_out_cb(&rsp));
    1854:	a801      	add	r0, sp, #4
    1856:	4b51      	ldr	r3, [pc, #324]	; (199c <usbtmcd_control_xfer_cb+0x360>)
    1858:	4798      	blx	r3
    185a:	2800      	cmp	r0, #0
    185c:	d100      	bne.n	1860 <usbtmcd_control_xfer_cb+0x224>
    185e:	e6f4      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(tud_control_xfer(rhport, request, (void*)&rsp,sizeof(rsp)));
    1860:	2308      	movs	r3, #8
    1862:	aa01      	add	r2, sp, #4
    1864:	0029      	movs	r1, r5
    1866:	0020      	movs	r0, r4
    1868:	4c49      	ldr	r4, [pc, #292]	; (1990 <usbtmcd_control_xfer_cb+0x354>)
    186a:	47a0      	blx	r4
    186c:	e6ed      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    usbtmc_initiate_abort_rsp_t rsp = {
    186e:	ab01      	add	r3, sp, #4
    1870:	2200      	movs	r2, #0
    1872:	801a      	strh	r2, [r3, #0]
        .bTag = usbtmc_state.lastBulkInTag,
    1874:	3299      	adds	r2, #153	; 0x99
    1876:	4940      	ldr	r1, [pc, #256]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1878:	5c8a      	ldrb	r2, [r1, r2]
    usbtmc_initiate_abort_rsp_t rsp = {
    187a:	705a      	strb	r2, [r3, #1]
    TU_VERIFY(request->bmRequestType == 0xA2); // in,class,interface
    187c:	782b      	ldrb	r3, [r5, #0]
    187e:	2ba2      	cmp	r3, #162	; 0xa2
    1880:	d001      	beq.n	1886 <usbtmcd_control_xfer_cb+0x24a>
    1882:	2000      	movs	r0, #0
    1884:	e6e1      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wLength == sizeof(rsp));
    1886:	79a9      	ldrb	r1, [r5, #6]
    1888:	79eb      	ldrb	r3, [r5, #7]
    188a:	021b      	lsls	r3, r3, #8
    188c:	430b      	orrs	r3, r1
    188e:	2b02      	cmp	r3, #2
    1890:	d001      	beq.n	1896 <usbtmcd_control_xfer_cb+0x25a>
    1892:	2000      	movs	r0, #0
    1894:	e6d9      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wIndex == usbtmc_state.ep_bulk_in);
    1896:	7929      	ldrb	r1, [r5, #4]
    1898:	796b      	ldrb	r3, [r5, #5]
    189a:	021b      	lsls	r3, r3, #8
    189c:	430b      	orrs	r3, r1
    189e:	4936      	ldr	r1, [pc, #216]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18a0:	78c9      	ldrb	r1, [r1, #3]
    18a2:	428b      	cmp	r3, r1
    18a4:	d001      	beq.n	18aa <usbtmcd_control_xfer_cb+0x26e>
    18a6:	2000      	movs	r0, #0
    18a8:	e6cf      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    if((usbtmc_state.state == STATE_TX_REQUESTED || usbtmc_state.state == STATE_TX_INITIATED) &&
    18aa:	4b33      	ldr	r3, [pc, #204]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	2b04      	cmp	r3, #4
    18b0:	d00f      	beq.n	18d2 <usbtmcd_control_xfer_cb+0x296>
    18b2:	4b31      	ldr	r3, [pc, #196]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2b05      	cmp	r3, #5
    18b8:	d00b      	beq.n	18d2 <usbtmcd_control_xfer_cb+0x296>
    else if((usbtmc_state.state == STATE_TX_REQUESTED || usbtmc_state.state == STATE_TX_INITIATED))
    18ba:	4b2f      	ldr	r3, [pc, #188]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18bc:	781b      	ldrb	r3, [r3, #0]
    18be:	2b04      	cmp	r3, #4
    18c0:	d048      	beq.n	1954 <usbtmcd_control_xfer_cb+0x318>
    18c2:	4b2d      	ldr	r3, [pc, #180]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	2b05      	cmp	r3, #5
    18c8:	d044      	beq.n	1954 <usbtmcd_control_xfer_cb+0x318>
      rsp.USBTMC_status = USBTMC_STATUS_FAILED;
    18ca:	2280      	movs	r2, #128	; 0x80
    18cc:	ab01      	add	r3, sp, #4
    18ce:	701a      	strb	r2, [r3, #0]
    18d0:	e043      	b.n	195a <usbtmcd_control_xfer_cb+0x31e>
        usbtmc_state.lastBulkInTag == (request->wValue & 0x7Fu))
    18d2:	78a9      	ldrb	r1, [r5, #2]
    18d4:	78eb      	ldrb	r3, [r5, #3]
    18d6:	021b      	lsls	r3, r3, #8
    18d8:	430b      	orrs	r3, r1
    18da:	217f      	movs	r1, #127	; 0x7f
    18dc:	400b      	ands	r3, r1
    if((usbtmc_state.state == STATE_TX_REQUESTED || usbtmc_state.state == STATE_TX_INITIATED) &&
    18de:	429a      	cmp	r2, r3
    18e0:	d1eb      	bne.n	18ba <usbtmcd_control_xfer_cb+0x27e>
      rsp.USBTMC_status = USBTMC_STATUS_SUCCESS;
    18e2:	2201      	movs	r2, #1
    18e4:	ab01      	add	r3, sp, #4
    18e6:	701a      	strb	r2, [r3, #0]
    usbtmc_state.transfer_size_remaining = 0u;
    18e8:	2100      	movs	r1, #0
    18ea:	2390      	movs	r3, #144	; 0x90
    18ec:	4a22      	ldr	r2, [pc, #136]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    18ee:	50d1      	str	r1, [r2, r3]
      criticalEnter();
    18f0:	4b22      	ldr	r3, [pc, #136]	; (197c <usbtmcd_control_xfer_cb+0x340>)
    18f2:	681e      	ldr	r6, [r3, #0]
  while (sem_hdl->count == 0) { }
    18f4:	8833      	ldrh	r3, [r6, #0]
    18f6:	b29b      	uxth	r3, r3
    18f8:	2b00      	cmp	r3, #0
    18fa:	d0fb      	beq.n	18f4 <usbtmcd_control_xfer_cb+0x2b8>
  sem_hdl->count--;
    18fc:	8833      	ldrh	r3, [r6, #0]
    18fe:	3b01      	subs	r3, #1
    1900:	b29b      	uxth	r3, r3
    1902:	8033      	strh	r3, [r6, #0]
      usbtmc_state.state = ((usbtmc_state.transfer_size_sent % usbtmc_state.ep_bulk_in_wMaxPacketSize) == 0) ?
    1904:	4b1c      	ldr	r3, [pc, #112]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1906:	2294      	movs	r2, #148	; 0x94
    1908:	5898      	ldr	r0, [r3, r2]
    190a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    190c:	4b24      	ldr	r3, [pc, #144]	; (19a0 <usbtmcd_control_xfer_cb+0x364>)
    190e:	4798      	blx	r3
              STATE_ABORTING_BULK_IN : STATE_ABORTING_BULK_IN_SHORTED;
    1910:	2900      	cmp	r1, #0
    1912:	d11d      	bne.n	1950 <usbtmcd_control_xfer_cb+0x314>
    1914:	2308      	movs	r3, #8
      usbtmc_state.state = ((usbtmc_state.transfer_size_sent % usbtmc_state.ep_bulk_in_wMaxPacketSize) == 0) ?
    1916:	4a18      	ldr	r2, [pc, #96]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1918:	7013      	strb	r3, [r2, #0]
  sem_hdl->count++;
    191a:	8833      	ldrh	r3, [r6, #0]
    191c:	3301      	adds	r3, #1
    191e:	b29b      	uxth	r3, r3
    1920:	8033      	strh	r3, [r6, #0]
      if(usbtmc_state.transfer_size_sent  == 0)
    1922:	2394      	movs	r3, #148	; 0x94
    1924:	58d3      	ldr	r3, [r2, r3]
    1926:	2b00      	cmp	r3, #0
    1928:	d10c      	bne.n	1944 <usbtmcd_control_xfer_cb+0x308>
        TU_VERIFY( usbd_edpt_xfer(rhport, usbtmc_state.ep_bulk_in, usbtmc_state.ep_bulk_in_buf,(uint16_t)0u));
    192a:	0013      	movs	r3, r2
    192c:	3208      	adds	r2, #8
    192e:	78d9      	ldrb	r1, [r3, #3]
    1930:	2300      	movs	r3, #0
    1932:	0020      	movs	r0, r4
    1934:	4e1b      	ldr	r6, [pc, #108]	; (19a4 <usbtmcd_control_xfer_cb+0x368>)
    1936:	47b0      	blx	r6
    1938:	2800      	cmp	r0, #0
    193a:	d100      	bne.n	193e <usbtmcd_control_xfer_cb+0x302>
    193c:	e685      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
        usbtmc_state.state = STATE_ABORTING_BULK_IN_SHORTED;
    193e:	2209      	movs	r2, #9
    1940:	4b0d      	ldr	r3, [pc, #52]	; (1978 <usbtmcd_control_xfer_cb+0x33c>)
    1942:	701a      	strb	r2, [r3, #0]
      TU_VERIFY(tud_usbtmc_initiate_abort_bulk_in_cb(&(rsp.USBTMC_status)));
    1944:	a801      	add	r0, sp, #4
    1946:	4b18      	ldr	r3, [pc, #96]	; (19a8 <usbtmcd_control_xfer_cb+0x36c>)
    1948:	4798      	blx	r3
    194a:	2800      	cmp	r0, #0
    194c:	d105      	bne.n	195a <usbtmcd_control_xfer_cb+0x31e>
    194e:	e67c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
              STATE_ABORTING_BULK_IN : STATE_ABORTING_BULK_IN_SHORTED;
    1950:	2309      	movs	r3, #9
    1952:	e7e0      	b.n	1916 <usbtmcd_control_xfer_cb+0x2da>
      rsp.USBTMC_status = USBTMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
    1954:	2281      	movs	r2, #129	; 0x81
    1956:	ab01      	add	r3, sp, #4
    1958:	701a      	strb	r2, [r3, #0]
    TU_VERIFY(tud_control_xfer(rhport, request, (void*)&rsp,sizeof(rsp)));
    195a:	2302      	movs	r3, #2
    195c:	aa01      	add	r2, sp, #4
    195e:	0029      	movs	r1, r5
    1960:	0020      	movs	r0, r4
    1962:	4c0b      	ldr	r4, [pc, #44]	; (1990 <usbtmcd_control_xfer_cb+0x354>)
    1964:	47a0      	blx	r4
    1966:	e670      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(request->wLength == 8u);
    1968:	79aa      	ldrb	r2, [r5, #6]
    196a:	79eb      	ldrb	r3, [r5, #7]
    196c:	021b      	lsls	r3, r3, #8
    196e:	4313      	orrs	r3, r2
    1970:	2b08      	cmp	r3, #8
    1972:	d01b      	beq.n	19ac <usbtmcd_control_xfer_cb+0x370>
    1974:	2000      	movs	r0, #0
    1976:	e668      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    1978:	20000020 	.word	0x20000020
    197c:	20000428 	.word	0x20000428
    1980:	00002455 	.word	0x00002455
    1984:	000024a1 	.word	0x000024a1
    1988:	000009dd 	.word	0x000009dd
    198c:	000009d9 	.word	0x000009d9
    1990:	00002b11 	.word	0x00002b11
    1994:	000009c1 	.word	0x000009c1
    1998:	00005a73 	.word	0x00005a73
    199c:	000009c9 	.word	0x000009c9
    19a0:	000033b1 	.word	0x000033b1
    19a4:	000023bd 	.word	0x000023bd
    19a8:	0000099d 	.word	0x0000099d
    usbtmc_check_abort_bulk_rsp_t rsp =
    19ac:	ae01      	add	r6, sp, #4
    19ae:	2208      	movs	r2, #8
    19b0:	2100      	movs	r1, #0
    19b2:	0030      	movs	r0, r6
    19b4:	4ba6      	ldr	r3, [pc, #664]	; (1c50 <usbtmcd_control_xfer_cb+0x614>)
    19b6:	4798      	blx	r3
    19b8:	2380      	movs	r3, #128	; 0x80
    19ba:	7033      	strb	r3, [r6, #0]
            .BulkInFifoBytes = (usbtmc_state.state != STATE_ABORTING_BULK_IN_ABORTED)
    19bc:	49a5      	ldr	r1, [pc, #660]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    19be:	780b      	ldrb	r3, [r1, #0]
    19c0:	3b0a      	subs	r3, #10
    19c2:	001a      	movs	r2, r3
    19c4:	1e53      	subs	r3, r2, #1
    19c6:	419a      	sbcs	r2, r3
    usbtmc_check_abort_bulk_rsp_t rsp =
    19c8:	7873      	ldrb	r3, [r6, #1]
    19ca:	2001      	movs	r0, #1
    19cc:	4383      	bics	r3, r0
    19ce:	4313      	orrs	r3, r2
    19d0:	7073      	strb	r3, [r6, #1]
        .NBYTES_RXD_TXD = usbtmc_state.transfer_size_sent,
    19d2:	2394      	movs	r3, #148	; 0x94
    19d4:	58cb      	ldr	r3, [r1, r3]
    19d6:	6073      	str	r3, [r6, #4]
    TU_VERIFY(tud_usbtmc_check_abort_bulk_in_cb(&rsp));
    19d8:	0030      	movs	r0, r6
    19da:	4b9f      	ldr	r3, [pc, #636]	; (1c58 <usbtmcd_control_xfer_cb+0x61c>)
    19dc:	4798      	blx	r3
    19de:	2800      	cmp	r0, #0
    19e0:	d100      	bne.n	19e4 <usbtmcd_control_xfer_cb+0x3a8>
    19e2:	e632      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    criticalEnter();
    19e4:	4b9d      	ldr	r3, [pc, #628]	; (1c5c <usbtmcd_control_xfer_cb+0x620>)
    19e6:	681a      	ldr	r2, [r3, #0]
  while (sem_hdl->count == 0) { }
    19e8:	8813      	ldrh	r3, [r2, #0]
    19ea:	b29b      	uxth	r3, r3
    19ec:	2b00      	cmp	r3, #0
    19ee:	d0fb      	beq.n	19e8 <usbtmcd_control_xfer_cb+0x3ac>
  sem_hdl->count--;
    19f0:	8813      	ldrh	r3, [r2, #0]
    19f2:	3b01      	subs	r3, #1
    19f4:	b29b      	uxth	r3, r3
    19f6:	8013      	strh	r3, [r2, #0]
    switch(usbtmc_state.state)
    19f8:	4b96      	ldr	r3, [pc, #600]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	b2db      	uxtb	r3, r3
    19fe:	2b0a      	cmp	r3, #10
    1a00:	d00e      	beq.n	1a20 <usbtmcd_control_xfer_cb+0x3e4>
    1a02:	2b0b      	cmp	r3, #11
    1a04:	d013      	beq.n	1a2e <usbtmcd_control_xfer_cb+0x3f2>
    1a06:	2b08      	cmp	r3, #8
    1a08:	d011      	beq.n	1a2e <usbtmcd_control_xfer_cb+0x3f2>
  sem_hdl->count++;
    1a0a:	8813      	ldrh	r3, [r2, #0]
    1a0c:	3301      	adds	r3, #1
    1a0e:	b29b      	uxth	r3, r3
    1a10:	8013      	strh	r3, [r2, #0]
    TU_VERIFY(tud_control_xfer(rhport, request, (void*)&rsp,sizeof(rsp)));
    1a12:	2308      	movs	r3, #8
    1a14:	aa01      	add	r2, sp, #4
    1a16:	0029      	movs	r1, r5
    1a18:	0020      	movs	r0, r4
    1a1a:	4c91      	ldr	r4, [pc, #580]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1a1c:	47a0      	blx	r4
    1a1e:	e614      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      rsp.USBTMC_status = USBTMC_STATUS_SUCCESS;
    1a20:	2101      	movs	r1, #1
    1a22:	ab01      	add	r3, sp, #4
    1a24:	7019      	strb	r1, [r3, #0]
      usbtmc_state.state = STATE_IDLE;
    1a26:	3101      	adds	r1, #1
    1a28:	4b8a      	ldr	r3, [pc, #552]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1a2a:	7019      	strb	r1, [r3, #0]
      break;
    1a2c:	e7ed      	b.n	1a0a <usbtmcd_control_xfer_cb+0x3ce>
      rsp.USBTMC_status = USBTMC_STATUS_PENDING;
    1a2e:	2102      	movs	r1, #2
    1a30:	ab01      	add	r3, sp, #4
    1a32:	7019      	strb	r1, [r3, #0]
      break;
    1a34:	e7e9      	b.n	1a0a <usbtmcd_control_xfer_cb+0x3ce>
      TU_VERIFY(request->bmRequestType == 0xA1); // in,class,interface
    1a36:	2aa1      	cmp	r2, #161	; 0xa1
    1a38:	d001      	beq.n	1a3e <usbtmcd_control_xfer_cb+0x402>
    1a3a:	2000      	movs	r0, #0
    1a3c:	e605      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->wLength == sizeof(tmcStatusCode));
    1a3e:	79aa      	ldrb	r2, [r5, #6]
    1a40:	79eb      	ldrb	r3, [r5, #7]
    1a42:	021b      	lsls	r3, r3, #8
    1a44:	4313      	orrs	r3, r2
    1a46:	2b01      	cmp	r3, #1
    1a48:	d001      	beq.n	1a4e <usbtmcd_control_xfer_cb+0x412>
    1a4a:	2000      	movs	r0, #0
    1a4c:	e5fd      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      usbd_edpt_stall(rhport, usbtmc_state.ep_bulk_out);
    1a4e:	4e81      	ldr	r6, [pc, #516]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1a50:	7931      	ldrb	r1, [r6, #4]
    1a52:	0020      	movs	r0, r4
    1a54:	4b83      	ldr	r3, [pc, #524]	; (1c64 <usbtmcd_control_xfer_cb+0x628>)
    1a56:	4798      	blx	r3
      usbtmc_state.transfer_size_remaining = 0;
    1a58:	2200      	movs	r2, #0
    1a5a:	2390      	movs	r3, #144	; 0x90
    1a5c:	50f2      	str	r2, [r6, r3]
      criticalEnter();
    1a5e:	4b7f      	ldr	r3, [pc, #508]	; (1c5c <usbtmcd_control_xfer_cb+0x620>)
    1a60:	681a      	ldr	r2, [r3, #0]
  while (sem_hdl->count == 0) { }
    1a62:	8813      	ldrh	r3, [r2, #0]
    1a64:	b29b      	uxth	r3, r3
    1a66:	2b00      	cmp	r3, #0
    1a68:	d0fb      	beq.n	1a62 <usbtmcd_control_xfer_cb+0x426>
  sem_hdl->count--;
    1a6a:	8813      	ldrh	r3, [r2, #0]
    1a6c:	3b01      	subs	r3, #1
    1a6e:	b29b      	uxth	r3, r3
    1a70:	8013      	strh	r3, [r2, #0]
      usbtmc_state.state = STATE_CLEARING;
    1a72:	2107      	movs	r1, #7
    1a74:	4b77      	ldr	r3, [pc, #476]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1a76:	7019      	strb	r1, [r3, #0]
  sem_hdl->count++;
    1a78:	8813      	ldrh	r3, [r2, #0]
    1a7a:	3301      	adds	r3, #1
    1a7c:	b29b      	uxth	r3, r3
    1a7e:	8013      	strh	r3, [r2, #0]
      TU_VERIFY(tud_usbtmc_initiate_clear_cb(&tmcStatusCode));
    1a80:	200f      	movs	r0, #15
    1a82:	4468      	add	r0, sp
    1a84:	4b78      	ldr	r3, [pc, #480]	; (1c68 <usbtmcd_control_xfer_cb+0x62c>)
    1a86:	4798      	blx	r3
    1a88:	2800      	cmp	r0, #0
    1a8a:	d100      	bne.n	1a8e <usbtmcd_control_xfer_cb+0x452>
    1a8c:	e5dd      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(tud_control_xfer(rhport, request, (void*)&tmcStatusCode,sizeof(tmcStatusCode)));
    1a8e:	2301      	movs	r3, #1
    1a90:	220f      	movs	r2, #15
    1a92:	446a      	add	r2, sp
    1a94:	0029      	movs	r1, r5
    1a96:	0020      	movs	r0, r4
    1a98:	4c71      	ldr	r4, [pc, #452]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1a9a:	47a0      	blx	r4
    1a9c:	e5d5      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->bmRequestType == 0xA1); // in,class,interface
    1a9e:	2aa1      	cmp	r2, #161	; 0xa1
    1aa0:	d001      	beq.n	1aa6 <usbtmcd_control_xfer_cb+0x46a>
    1aa2:	2000      	movs	r0, #0
    1aa4:	e5d1      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      usbtmc_get_clear_status_rsp_t clearStatusRsp = {0};
    1aa6:	2200      	movs	r2, #0
    1aa8:	ab01      	add	r3, sp, #4
    1aaa:	801a      	strh	r2, [r3, #0]
      TU_VERIFY(request->wLength == sizeof(clearStatusRsp));
    1aac:	79aa      	ldrb	r2, [r5, #6]
    1aae:	79eb      	ldrb	r3, [r5, #7]
    1ab0:	021b      	lsls	r3, r3, #8
    1ab2:	4313      	orrs	r3, r2
    1ab4:	2b02      	cmp	r3, #2
    1ab6:	d001      	beq.n	1abc <usbtmcd_control_xfer_cb+0x480>
    1ab8:	2000      	movs	r0, #0
    1aba:	e5c6      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      if(usbd_edpt_busy(rhport, usbtmc_state.ep_bulk_in))
    1abc:	4b65      	ldr	r3, [pc, #404]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1abe:	78d9      	ldrb	r1, [r3, #3]
    1ac0:	0020      	movs	r0, r4
    1ac2:	4b6a      	ldr	r3, [pc, #424]	; (1c6c <usbtmcd_control_xfer_cb+0x630>)
    1ac4:	4798      	blx	r3
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d011      	beq.n	1aee <usbtmcd_control_xfer_cb+0x4b2>
        clearStatusRsp.bmClear.BulkInFifoBytes = 1;
    1aca:	ab01      	add	r3, sp, #4
    1acc:	7859      	ldrb	r1, [r3, #1]
    1ace:	2201      	movs	r2, #1
    1ad0:	430a      	orrs	r2, r1
    1ad2:	705a      	strb	r2, [r3, #1]
        clearStatusRsp.USBTMC_status = USBTMC_STATUS_PENDING;
    1ad4:	2202      	movs	r2, #2
    1ad6:	701a      	strb	r2, [r3, #0]
      if(clearStatusRsp.USBTMC_status == USBTMC_STATUS_SUCCESS)
    1ad8:	ab01      	add	r3, sp, #4
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	2b01      	cmp	r3, #1
    1ade:	d00c      	beq.n	1afa <usbtmcd_control_xfer_cb+0x4be>
      TU_VERIFY(tud_control_xfer(rhport, request, (void*)&clearStatusRsp,sizeof(clearStatusRsp)));
    1ae0:	2302      	movs	r3, #2
    1ae2:	aa01      	add	r2, sp, #4
    1ae4:	0029      	movs	r1, r5
    1ae6:	0020      	movs	r0, r4
    1ae8:	4c5d      	ldr	r4, [pc, #372]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1aea:	47a0      	blx	r4
    1aec:	e5ad      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
        TU_VERIFY(tud_usbtmc_check_clear_cb(&clearStatusRsp));
    1aee:	a801      	add	r0, sp, #4
    1af0:	4b5f      	ldr	r3, [pc, #380]	; (1c70 <usbtmcd_control_xfer_cb+0x634>)
    1af2:	4798      	blx	r3
    1af4:	2800      	cmp	r0, #0
    1af6:	d1ef      	bne.n	1ad8 <usbtmcd_control_xfer_cb+0x49c>
    1af8:	e5a7      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
        criticalEnter();
    1afa:	4b58      	ldr	r3, [pc, #352]	; (1c5c <usbtmcd_control_xfer_cb+0x620>)
    1afc:	681a      	ldr	r2, [r3, #0]
  while (sem_hdl->count == 0) { }
    1afe:	8813      	ldrh	r3, [r2, #0]
    1b00:	b29b      	uxth	r3, r3
    1b02:	2b00      	cmp	r3, #0
    1b04:	d0fb      	beq.n	1afe <usbtmcd_control_xfer_cb+0x4c2>
  sem_hdl->count--;
    1b06:	8813      	ldrh	r3, [r2, #0]
    1b08:	3b01      	subs	r3, #1
    1b0a:	b29b      	uxth	r3, r3
    1b0c:	8013      	strh	r3, [r2, #0]
        usbtmc_state.state = STATE_IDLE;
    1b0e:	2102      	movs	r1, #2
    1b10:	4b50      	ldr	r3, [pc, #320]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1b12:	7019      	strb	r1, [r3, #0]
  sem_hdl->count++;
    1b14:	8813      	ldrh	r3, [r2, #0]
    1b16:	3301      	adds	r3, #1
    1b18:	b29b      	uxth	r3, r3
    1b1a:	8013      	strh	r3, [r2, #0]
    1b1c:	e7e0      	b.n	1ae0 <usbtmcd_control_xfer_cb+0x4a4>
      TU_VERIFY(request->bmRequestType == 0xA1); // in,class,interface
    1b1e:	2aa1      	cmp	r2, #161	; 0xa1
    1b20:	d001      	beq.n	1b26 <usbtmcd_control_xfer_cb+0x4ea>
    1b22:	2000      	movs	r0, #0
    1b24:	e591      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->wLength == sizeof(*(usbtmc_state.capabilities)));
    1b26:	79aa      	ldrb	r2, [r5, #6]
    1b28:	79eb      	ldrb	r3, [r5, #7]
    1b2a:	021b      	lsls	r3, r3, #8
    1b2c:	4313      	orrs	r3, r2
    1b2e:	2b18      	cmp	r3, #24
    1b30:	d001      	beq.n	1b36 <usbtmcd_control_xfer_cb+0x4fa>
    1b32:	2000      	movs	r0, #0
    1b34:	e589      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) usbtmc_state.capabilities, sizeof(*usbtmc_state.capabilities)));
    1b36:	3388      	adds	r3, #136	; 0x88
    1b38:	4a46      	ldr	r2, [pc, #280]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1b3a:	58d2      	ldr	r2, [r2, r3]
    1b3c:	3b88      	subs	r3, #136	; 0x88
    1b3e:	0029      	movs	r1, r5
    1b40:	0020      	movs	r0, r4
    1b42:	4c47      	ldr	r4, [pc, #284]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1b44:	47a0      	blx	r4
    1b46:	e580      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->bmRequestType == 0xA1); // in,class,interface
    1b48:	2aa1      	cmp	r2, #161	; 0xa1
    1b4a:	d001      	beq.n	1b50 <usbtmcd_control_xfer_cb+0x514>
    1b4c:	2000      	movs	r0, #0
    1b4e:	e57c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->wLength == sizeof(tmcStatusCode));
    1b50:	79aa      	ldrb	r2, [r5, #6]
    1b52:	79eb      	ldrb	r3, [r5, #7]
    1b54:	021b      	lsls	r3, r3, #8
    1b56:	4313      	orrs	r3, r2
    1b58:	2b01      	cmp	r3, #1
    1b5a:	d001      	beq.n	1b60 <usbtmcd_control_xfer_cb+0x524>
    1b5c:	2000      	movs	r0, #0
    1b5e:	e574      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(usbtmc_state.capabilities->bmIntfcCapabilities.supportsIndicatorPulse);
    1b60:	339f      	adds	r3, #159	; 0x9f
    1b62:	4a3c      	ldr	r2, [pc, #240]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1b64:	58d3      	ldr	r3, [r2, r3]
    1b66:	791b      	ldrb	r3, [r3, #4]
    1b68:	075b      	lsls	r3, r3, #29
    1b6a:	d401      	bmi.n	1b70 <usbtmcd_control_xfer_cb+0x534>
    1b6c:	2000      	movs	r0, #0
    1b6e:	e56c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(tud_usbtmc_indicator_pulse_cb(request, &tmcStatusCode));
    1b70:	210f      	movs	r1, #15
    1b72:	4469      	add	r1, sp
    1b74:	0028      	movs	r0, r5
    1b76:	4b3f      	ldr	r3, [pc, #252]	; (1c74 <usbtmcd_control_xfer_cb+0x638>)
    1b78:	4798      	blx	r3
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d100      	bne.n	1b80 <usbtmcd_control_xfer_cb+0x544>
    1b7e:	e564      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(tud_control_xfer(rhport, request, (void*)&tmcStatusCode, sizeof(tmcStatusCode)));
    1b80:	2301      	movs	r3, #1
    1b82:	220f      	movs	r2, #15
    1b84:	446a      	add	r2, sp
    1b86:	0029      	movs	r1, r5
    1b88:	0020      	movs	r0, r4
    1b8a:	4c35      	ldr	r4, [pc, #212]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1b8c:	47a0      	blx	r4
    1b8e:	e55c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(request->wLength == sizeof(rsp)); // in,class,interface
    1b90:	79aa      	ldrb	r2, [r5, #6]
    1b92:	79eb      	ldrb	r3, [r5, #7]
    1b94:	021b      	lsls	r3, r3, #8
    1b96:	4313      	orrs	r3, r2
    1b98:	2b03      	cmp	r3, #3
    1b9a:	d001      	beq.n	1ba0 <usbtmcd_control_xfer_cb+0x564>
    1b9c:	2000      	movs	r0, #0
    1b9e:	e554      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      bTag = request->wValue & 0x7F;
    1ba0:	78aa      	ldrb	r2, [r5, #2]
    1ba2:	78eb      	ldrb	r3, [r5, #3]
    1ba4:	021b      	lsls	r3, r3, #8
    1ba6:	4313      	orrs	r3, r2
    1ba8:	b2de      	uxtb	r6, r3
    1baa:	227f      	movs	r2, #127	; 0x7f
    1bac:	4032      	ands	r2, r6
      TU_VERIFY((request->wValue & (~0x7F)) == 0u); // Other bits are required to be zero (USB488v1.0 Table 11)
    1bae:	217f      	movs	r1, #127	; 0x7f
    1bb0:	438b      	bics	r3, r1
    1bb2:	d144      	bne.n	1c3e <usbtmcd_control_xfer_cb+0x602>
      TU_VERIFY(bTag >= 0x02 && bTag <= 127);
    1bb4:	1e93      	subs	r3, r2, #2
    1bb6:	b2db      	uxtb	r3, r3
    1bb8:	2b7d      	cmp	r3, #125	; 0x7d
    1bba:	d842      	bhi.n	1c42 <usbtmcd_control_xfer_cb+0x606>
      TU_VERIFY(request->wIndex == usbtmc_state.itf_id);
    1bbc:	7929      	ldrb	r1, [r5, #4]
    1bbe:	796b      	ldrb	r3, [r5, #5]
    1bc0:	021b      	lsls	r3, r3, #8
    1bc2:	430b      	orrs	r3, r1
    1bc4:	4923      	ldr	r1, [pc, #140]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1bc6:	7849      	ldrb	r1, [r1, #1]
    1bc8:	428b      	cmp	r3, r1
    1bca:	d001      	beq.n	1bd0 <usbtmcd_control_xfer_cb+0x594>
    1bcc:	2000      	movs	r0, #0
    1bce:	e53c      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      rsp.bTag = (uint8_t)bTag;
    1bd0:	ab01      	add	r3, sp, #4
    1bd2:	705a      	strb	r2, [r3, #1]
      if(usbtmc_state.ep_int_in != 0)
    1bd4:	4b1f      	ldr	r3, [pc, #124]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1bd6:	7959      	ldrb	r1, [r3, #5]
    1bd8:	2900      	cmp	r1, #0
    1bda:	d02a      	beq.n	1c32 <usbtmcd_control_xfer_cb+0x5f6>
        rsp.statusByte = 0x00; // Use interrupt endpoint, instead. Must be 0x00 (USB488v1.0 4.3.1.2)
    1bdc:	2200      	movs	r2, #0
    1bde:	ab01      	add	r3, sp, #4
    1be0:	709a      	strb	r2, [r3, #2]
        if(usbd_edpt_busy(rhport, usbtmc_state.ep_int_in))
    1be2:	0020      	movs	r0, r4
    1be4:	4b21      	ldr	r3, [pc, #132]	; (1c6c <usbtmcd_control_xfer_cb+0x630>)
    1be6:	4798      	blx	r3
    1be8:	2800      	cmp	r0, #0
    1bea:	d009      	beq.n	1c00 <usbtmcd_control_xfer_cb+0x5c4>
          rsp.USBTMC_status = USB488_STATUS_INTERRUPT_IN_BUSY;
    1bec:	2220      	movs	r2, #32
    1bee:	ab01      	add	r3, sp, #4
    1bf0:	701a      	strb	r2, [r3, #0]
      TU_VERIFY(tud_control_xfer(rhport, request, (void*)&rsp, sizeof(rsp)));
    1bf2:	2303      	movs	r3, #3
    1bf4:	aa01      	add	r2, sp, #4
    1bf6:	0029      	movs	r1, r5
    1bf8:	0020      	movs	r0, r4
    1bfa:	4c19      	ldr	r4, [pc, #100]	; (1c60 <usbtmcd_control_xfer_cb+0x624>)
    1bfc:	47a0      	blx	r4
    1bfe:	e524      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
          rsp.USBTMC_status = USBTMC_STATUS_SUCCESS;
    1c00:	a801      	add	r0, sp, #4
    1c02:	2301      	movs	r3, #1
    1c04:	7003      	strb	r3, [r0, #0]
                .bTag = bTag & 0x7Fu,
    1c06:	227f      	movs	r2, #127	; 0x7f
          usbtmc_read_stb_interrupt_488_t intMsg =
    1c08:	4016      	ands	r6, r2
    1c0a:	466b      	mov	r3, sp
    1c0c:	781b      	ldrb	r3, [r3, #0]
    1c0e:	4393      	bics	r3, r2
    1c10:	4333      	orrs	r3, r6
    1c12:	3aff      	subs	r2, #255	; 0xff
    1c14:	4313      	orrs	r3, r2
    1c16:	466a      	mov	r2, sp
    1c18:	7013      	strb	r3, [r2, #0]
            .StatusByte = tud_usbtmc_get_stb_cb(&(rsp.USBTMC_status))
    1c1a:	4b17      	ldr	r3, [pc, #92]	; (1c78 <usbtmcd_control_xfer_cb+0x63c>)
    1c1c:	4798      	blx	r3
          usbtmc_read_stb_interrupt_488_t intMsg =
    1c1e:	466b      	mov	r3, sp
    1c20:	7058      	strb	r0, [r3, #1]
          usbd_edpt_xfer(rhport, usbtmc_state.ep_int_in, (void*)&intMsg, sizeof(intMsg));
    1c22:	4b0c      	ldr	r3, [pc, #48]	; (1c54 <usbtmcd_control_xfer_cb+0x618>)
    1c24:	7959      	ldrb	r1, [r3, #5]
    1c26:	2302      	movs	r3, #2
    1c28:	466a      	mov	r2, sp
    1c2a:	0020      	movs	r0, r4
    1c2c:	4e13      	ldr	r6, [pc, #76]	; (1c7c <usbtmcd_control_xfer_cb+0x640>)
    1c2e:	47b0      	blx	r6
    1c30:	e7df      	b.n	1bf2 <usbtmcd_control_xfer_cb+0x5b6>
        rsp.statusByte = tud_usbtmc_get_stb_cb(&(rsp.USBTMC_status));
    1c32:	ae01      	add	r6, sp, #4
    1c34:	0030      	movs	r0, r6
    1c36:	4b10      	ldr	r3, [pc, #64]	; (1c78 <usbtmcd_control_xfer_cb+0x63c>)
    1c38:	4798      	blx	r3
    1c3a:	70b0      	strb	r0, [r6, #2]
    1c3c:	e7d9      	b.n	1bf2 <usbtmcd_control_xfer_cb+0x5b6>
      TU_VERIFY((request->wValue & (~0x7F)) == 0u); // Other bits are required to be zero (USB488v1.0 Table 11)
    1c3e:	2000      	movs	r0, #0
    1c40:	e503      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      TU_VERIFY(bTag >= 0x02 && bTag <= 127);
    1c42:	2000      	movs	r0, #0
    1c44:	e501      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
      return false;
    1c46:	2000      	movs	r0, #0
    1c48:	e4ff      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    TU_VERIFY(false);
    1c4a:	2000      	movs	r0, #0
    1c4c:	e4fd      	b.n	164a <usbtmcd_control_xfer_cb+0xe>
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	00005a73 	.word	0x00005a73
    1c54:	20000020 	.word	0x20000020
    1c58:	000009b1 	.word	0x000009b1
    1c5c:	20000428 	.word	0x20000428
    1c60:	00002b11 	.word	0x00002b11
    1c64:	00002455 	.word	0x00002455
    1c68:	00000961 	.word	0x00000961
    1c6c:	00002439 	.word	0x00002439
    1c70:	00000979 	.word	0x00000979
    1c74:	00000a05 	.word	0x00000a05
    1c78:	000009e9 	.word	0x000009e9
    1c7c:	000023bd 	.word	0x000023bd

00001c80 <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
    1c80:	188a      	adds	r2, r1, r2
    1c82:	b292      	uxth	r2, r2
    1c84:	4291      	cmp	r1, r2
    1c86:	d802      	bhi.n	1c8e <advance_pointer+0xe>
    1c88:	8983      	ldrh	r3, [r0, #12]
    1c8a:	429a      	cmp	r2, r3
    1c8c:	d902      	bls.n	1c94 <advance_pointer+0x14>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
    1c8e:	8940      	ldrh	r0, [r0, #10]
    1c90:	1812      	adds	r2, r2, r0
    1c92:	b292      	uxth	r2, r2
  else
  {
    p += offset;
  }
  return p;
}
    1c94:	0010      	movs	r0, r2
    1c96:	4770      	bx	lr

00001c98 <backward_pointer>:
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
    1c98:	1a8a      	subs	r2, r1, r2
    1c9a:	b292      	uxth	r2, r2
    1c9c:	4291      	cmp	r1, r2
    1c9e:	d302      	bcc.n	1ca6 <backward_pointer+0xe>
    1ca0:	8983      	ldrh	r3, [r0, #12]
    1ca2:	429a      	cmp	r2, r3
    1ca4:	d902      	bls.n	1cac <backward_pointer+0x14>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
    1ca6:	8940      	ldrh	r0, [r0, #10]
    1ca8:	1a12      	subs	r2, r2, r0
    1caa:	b292      	uxth	r2, r2
  else
  {
    p -= offset;
  }
  return p;
}
    1cac:	0010      	movs	r0, r2
    1cae:	4770      	bx	lr

00001cb0 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
  return _ff_mod(p, f->depth);
    1cb0:	8883      	ldrh	r3, [r0, #4]
    1cb2:	e001      	b.n	1cb8 <get_relative_pointer+0x8>
  while ( idx >= depth) idx -= depth;
    1cb4:	1ac9      	subs	r1, r1, r3
    1cb6:	b289      	uxth	r1, r1
    1cb8:	428b      	cmp	r3, r1
    1cba:	d9fb      	bls.n	1cb4 <get_relative_pointer+0x4>
}
    1cbc:	0008      	movs	r0, r1
    1cbe:	4770      	bx	lr

00001cc0 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
    1cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cc2:	0005      	movs	r5, r0
    1cc4:	000c      	movs	r4, r1
    1cc6:	0011      	movs	r1, r2
    1cc8:	001e      	movs	r6, r3
  uint16_t cnt = wAbs-rAbs;
    1cca:	1ad3      	subs	r3, r2, r3
    1ccc:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1cce:	42b2      	cmp	r2, r6
    1cd0:	d202      	bcs.n	1cd8 <_tu_fifo_peek+0x18>
    1cd2:	8942      	ldrh	r2, [r0, #10]
    1cd4:	1a9b      	subs	r3, r3, r2
    1cd6:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
    1cd8:	88af      	ldrh	r7, [r5, #4]
    1cda:	429f      	cmp	r7, r3
    1cdc:	d205      	bcs.n	1cea <_tu_fifo_peek+0x2a>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
    1cde:	003a      	movs	r2, r7
    1ce0:	0028      	movs	r0, r5
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <_tu_fifo_peek+0x4c>)
    1ce4:	4798      	blx	r3
    1ce6:	8228      	strh	r0, [r5, #16]
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
    cnt = f->depth;
    1ce8:	003b      	movs	r3, r7
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
    1cea:	2b00      	cmp	r3, #0
    1cec:	d101      	bne.n	1cf2 <_tu_fifo_peek+0x32>
    1cee:	2000      	movs	r0, #0

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
    1cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t rRel = get_relative_pointer(f, rAbs);
    1cf2:	0031      	movs	r1, r6
    1cf4:	0028      	movs	r0, r5
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <_tu_fifo_peek+0x50>)
    1cf8:	4798      	blx	r3
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
    1cfa:	6829      	ldr	r1, [r5, #0]
    1cfc:	88ea      	ldrh	r2, [r5, #6]
    1cfe:	4350      	muls	r0, r2
    1d00:	1809      	adds	r1, r1, r0
    1d02:	0020      	movs	r0, r4
    1d04:	4b03      	ldr	r3, [pc, #12]	; (1d14 <_tu_fifo_peek+0x54>)
    1d06:	4798      	blx	r3
  return true;
    1d08:	2001      	movs	r0, #1
    1d0a:	e7f1      	b.n	1cf0 <_tu_fifo_peek+0x30>
    1d0c:	00001c99 	.word	0x00001c99
    1d10:	00001cb1 	.word	0x00001cb1
    1d14:	00005a61 	.word	0x00005a61

00001d18 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	0004      	movs	r4, r0
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
    1d1c:	89c2      	ldrh	r2, [r0, #14]
    1d1e:	b292      	uxth	r2, r2
    1d20:	8a03      	ldrh	r3, [r0, #16]
    1d22:	b29b      	uxth	r3, r3
    1d24:	4d05      	ldr	r5, [pc, #20]	; (1d3c <tu_fifo_read+0x24>)
    1d26:	47a8      	blx	r5
    1d28:	0005      	movs	r5, r0

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
    1d2a:	8a21      	ldrh	r1, [r4, #16]
    1d2c:	b289      	uxth	r1, r1
    1d2e:	b282      	uxth	r2, r0
    1d30:	0020      	movs	r0, r4
    1d32:	4b03      	ldr	r3, [pc, #12]	; (1d40 <tu_fifo_read+0x28>)
    1d34:	4798      	blx	r3
    1d36:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
    1d38:	0028      	movs	r0, r5
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
    1d3c:	00001cc1 	.word	0x00001cc1
    1d40:	00001c81 	.word	0x00001c81

00001d44 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	0004      	movs	r4, r0
    1d48:	000e      	movs	r6, r1
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
    1d4a:	89c5      	ldrh	r5, [r0, #14]
    1d4c:	b2ad      	uxth	r5, r5

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1d4e:	8a02      	ldrh	r2, [r0, #16]
    1d50:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
    1d52:	1aab      	subs	r3, r5, r2
    1d54:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1d56:	4295      	cmp	r5, r2
    1d58:	d202      	bcs.n	1d60 <tu_fifo_write+0x1c>
    1d5a:	8942      	ldrh	r2, [r0, #10]
    1d5c:	1a9b      	subs	r3, r3, r2
    1d5e:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
    1d60:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1d62:	429a      	cmp	r2, r3
    1d64:	d013      	beq.n	1d8e <tu_fifo_write+0x4a>
  {
    ret = false;
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
    1d66:	0029      	movs	r1, r5
    1d68:	0020      	movs	r0, r4
    1d6a:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <tu_fifo_write+0x54>)
    1d6c:	4798      	blx	r3
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
    1d6e:	88e2      	ldrh	r2, [r4, #6]
    1d70:	4350      	muls	r0, r2
    1d72:	6823      	ldr	r3, [r4, #0]
    1d74:	469c      	mov	ip, r3
    1d76:	4460      	add	r0, ip
    1d78:	0031      	movs	r1, r6
    1d7a:	4b08      	ldr	r3, [pc, #32]	; (1d9c <tu_fifo_write+0x58>)
    1d7c:	4798      	blx	r3

    // Write data
    _ff_push(f, data, wRel);

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
    1d7e:	2201      	movs	r2, #1
    1d80:	0029      	movs	r1, r5
    1d82:	0020      	movs	r0, r4
    1d84:	4b06      	ldr	r3, [pc, #24]	; (1da0 <tu_fifo_write+0x5c>)
    1d86:	4798      	blx	r3
    1d88:	81e0      	strh	r0, [r4, #14]

    ret = true;
    1d8a:	2001      	movs	r0, #1
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
    1d8c:	bd70      	pop	{r4, r5, r6, pc}
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1d8e:	7a20      	ldrb	r0, [r4, #8]
    1d90:	2800      	cmp	r0, #0
    1d92:	d1e8      	bne.n	1d66 <tu_fifo_write+0x22>
    1d94:	e7fa      	b.n	1d8c <tu_fifo_write+0x48>
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	00001cb1 	.word	0x00001cb1
    1d9c:	00005a61 	.word	0x00005a61
    1da0:	00001c81 	.word	0x00001c81

00001da4 <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
    1da4:	2300      	movs	r3, #0
    1da6:	81c3      	strh	r3, [r0, #14]
    1da8:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
    1daa:	8883      	ldrh	r3, [r0, #4]
    1dac:	005b      	lsls	r3, r3, #1
    1dae:	b29b      	uxth	r3, r3
    1db0:	3b01      	subs	r3, #1
    1db2:	b29b      	uxth	r3, r3
    1db4:	8183      	strh	r3, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
    1db6:	43db      	mvns	r3, r3
    1db8:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
    1dba:	2001      	movs	r0, #1
    1dbc:	4770      	bx	lr
	...

00001dc0 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
    1dc2:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    1dc4:	2400      	movs	r4, #0
    1dc6:	e00f      	b.n	1de8 <configuration_reset+0x28>
    drvid -= _app_driver_count;
    1dc8:	1ae3      	subs	r3, r4, r3
    1dca:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d11e      	bne.n	1e0e <configuration_reset+0x4e>
    1dd0:	005a      	lsls	r2, r3, #1
    1dd2:	18d3      	adds	r3, r2, r3
    1dd4:	00da      	lsls	r2, r3, #3
    1dd6:	4b18      	ldr	r3, [pc, #96]	; (1e38 <configuration_reset+0x78>)
    1dd8:	189b      	adds	r3, r3, r2
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d02a      	beq.n	1e34 <configuration_reset+0x74>
    driver->reset(rhport);
    1dde:	685b      	ldr	r3, [r3, #4]
    1de0:	0028      	movs	r0, r5
    1de2:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    1de4:	3401      	adds	r4, #1
    1de6:	b2e4      	uxtb	r4, r4
    1de8:	4b14      	ldr	r3, [pc, #80]	; (1e3c <configuration_reset+0x7c>)
    1dea:	791b      	ldrb	r3, [r3, #4]
    1dec:	1c5a      	adds	r2, r3, #1
    1dee:	4294      	cmp	r4, r2
    1df0:	da0f      	bge.n	1e12 <configuration_reset+0x52>
  if ( usbd_app_driver_get_cb )
    1df2:	4a13      	ldr	r2, [pc, #76]	; (1e40 <configuration_reset+0x80>)
    1df4:	2a00      	cmp	r2, #0
    1df6:	d008      	beq.n	1e0a <configuration_reset+0x4a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1df8:	429c      	cmp	r4, r3
    1dfa:	d2e5      	bcs.n	1dc8 <configuration_reset+0x8>
    1dfc:	0062      	lsls	r2, r4, #1
    1dfe:	1912      	adds	r2, r2, r4
    1e00:	00d1      	lsls	r1, r2, #3
    1e02:	4b0e      	ldr	r3, [pc, #56]	; (1e3c <configuration_reset+0x7c>)
    1e04:	681b      	ldr	r3, [r3, #0]
    1e06:	185b      	adds	r3, r3, r1
    1e08:	e7e7      	b.n	1dda <configuration_reset+0x1a>
  if ( usbd_app_driver_get_cb )
    1e0a:	0023      	movs	r3, r4
    1e0c:	e7de      	b.n	1dcc <configuration_reset+0xc>
  return NULL;
    1e0e:	2300      	movs	r3, #0
    1e10:	e7e3      	b.n	1dda <configuration_reset+0x1a>
  }

  tu_varclr(&_usbd_dev);
    1e12:	4c0a      	ldr	r4, [pc, #40]	; (1e3c <configuration_reset+0x7c>)
    1e14:	0020      	movs	r0, r4
    1e16:	3008      	adds	r0, #8
    1e18:	2233      	movs	r2, #51	; 0x33
    1e1a:	2100      	movs	r1, #0
    1e1c:	4d09      	ldr	r5, [pc, #36]	; (1e44 <configuration_reset+0x84>)
    1e1e:	47a8      	blx	r5
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
    1e20:	0020      	movs	r0, r4
    1e22:	300b      	adds	r0, #11
    1e24:	2210      	movs	r2, #16
    1e26:	21ff      	movs	r1, #255	; 0xff
    1e28:	47a8      	blx	r5
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
    1e2a:	0020      	movs	r0, r4
    1e2c:	301b      	adds	r0, #27
    1e2e:	2210      	movs	r2, #16
    1e30:	21ff      	movs	r1, #255	; 0xff
    1e32:	47a8      	blx	r5
}
    1e34:	bd70      	pop	{r4, r5, r6, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	00007dec 	.word	0x00007dec
    1e3c:	20000430 	.word	0x20000430
    1e40:	00000000 	.word	0x00000000
    1e44:	00005a73 	.word	0x00005a73

00001e48 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
    1e48:	b510      	push	{r4, lr}
  configuration_reset(rhport);
    1e4a:	4b02      	ldr	r3, [pc, #8]	; (1e54 <usbd_reset+0xc>)
    1e4c:	4798      	blx	r3
  usbd_control_reset();
    1e4e:	4b02      	ldr	r3, [pc, #8]	; (1e58 <usbd_reset+0x10>)
    1e50:	4798      	blx	r3
}
    1e52:	bd10      	pop	{r4, pc}
    1e54:	00001dc1 	.word	0x00001dc1
    1e58:	00002b95 	.word	0x00002b95

00001e5c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	0005      	movs	r5, r0
    1e60:	000c      	movs	r4, r1
    1e62:	0016      	movs	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
    1e64:	68c8      	ldr	r0, [r1, #12]
    1e66:	4b04      	ldr	r3, [pc, #16]	; (1e78 <invoke_class_control+0x1c>)
    1e68:	4798      	blx	r3
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
    1e6a:	68e3      	ldr	r3, [r4, #12]
    1e6c:	0032      	movs	r2, r6
    1e6e:	2101      	movs	r1, #1
    1e70:	0028      	movs	r0, r5
    1e72:	4798      	blx	r3
}
    1e74:	bd70      	pop	{r4, r5, r6, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	00002bad 	.word	0x00002bad

00001e7c <process_set_config>:
}

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
    1e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e7e:	46d6      	mov	lr, sl
    1e80:	464f      	mov	r7, r9
    1e82:	b580      	push	{r7, lr}
    1e84:	b083      	sub	sp, #12
    1e86:	9000      	str	r0, [sp, #0]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
    1e88:	3901      	subs	r1, #1
    1e8a:	b2c8      	uxtb	r0, r1
    1e8c:	4b50      	ldr	r3, [pc, #320]	; (1fd0 <process_set_config+0x154>)
    1e8e:	4798      	blx	r3
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1e90:	2800      	cmp	r0, #0
    1e92:	d100      	bne.n	1e96 <process_set_config+0x1a>
    1e94:	e091      	b.n	1fba <process_set_config+0x13e>
    1e96:	7843      	ldrb	r3, [r0, #1]
    1e98:	2b02      	cmp	r3, #2
    1e9a:	d005      	beq.n	1ea8 <process_set_config+0x2c>
    1e9c:	2000      	movs	r0, #0

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();

  return true;
}
    1e9e:	b003      	add	sp, #12
    1ea0:	bc0c      	pop	{r2, r3}
    1ea2:	4691      	mov	r9, r2
    1ea4:	469a      	mov	sl, r3
    1ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    1ea8:	79c1      	ldrb	r1, [r0, #7]
    1eaa:	068b      	lsls	r3, r1, #26
    1eac:	d528      	bpl.n	1f00 <process_set_config+0x84>
    1eae:	2201      	movs	r2, #1
    1eb0:	4c48      	ldr	r4, [pc, #288]	; (1fd4 <process_set_config+0x158>)
    1eb2:	0112      	lsls	r2, r2, #4
    1eb4:	7a23      	ldrb	r3, [r4, #8]
    1eb6:	2510      	movs	r5, #16
    1eb8:	43ab      	bics	r3, r5
    1eba:	4313      	orrs	r3, r2
    1ebc:	7223      	strb	r3, [r4, #8]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    1ebe:	064b      	lsls	r3, r1, #25
    1ec0:	d520      	bpl.n	1f04 <process_set_config+0x88>
    1ec2:	2201      	movs	r2, #1
    1ec4:	4943      	ldr	r1, [pc, #268]	; (1fd4 <process_set_config+0x158>)
    1ec6:	0152      	lsls	r2, r2, #5
    1ec8:	7a0b      	ldrb	r3, [r1, #8]
    1eca:	2420      	movs	r4, #32
    1ecc:	43a3      	bics	r3, r4
    1ece:	4313      	orrs	r3, r2
    1ed0:	720b      	strb	r3, [r1, #8]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
    1ed2:	0005      	movs	r5, r0
    1ed4:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
    1ed6:	7882      	ldrb	r2, [r0, #2]
    1ed8:	78c3      	ldrb	r3, [r0, #3]
    1eda:	021b      	lsls	r3, r3, #8
    1edc:	4313      	orrs	r3, r2
    1ede:	4681      	mov	r9, r0
    1ee0:	4499      	add	r9, r3
  while( p_desc < desc_end )
    1ee2:	454d      	cmp	r5, r9
    1ee4:	d263      	bcs.n	1fae <process_set_config+0x132>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    1ee6:	786b      	ldrb	r3, [r5, #1]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
    1ee8:	2b0b      	cmp	r3, #11
    1eea:	d00d      	beq.n	1f08 <process_set_config+0x8c>
    uint8_t assoc_itf_count = 1;
    1eec:	2301      	movs	r3, #1
    1eee:	469a      	mov	sl, r3
    1ef0:	786b      	ldrb	r3, [r5, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    1ef2:	2b04      	cmp	r3, #4
    1ef4:	d163      	bne.n	1fbe <process_set_config+0x142>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
    1ef6:	464b      	mov	r3, r9
    1ef8:	1b5c      	subs	r4, r3, r5
    1efa:	b2a4      	uxth	r4, r4
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    1efc:	2700      	movs	r7, #0
    1efe:	e01f      	b.n	1f40 <process_set_config+0xc4>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    1f00:	2200      	movs	r2, #0
    1f02:	e7d5      	b.n	1eb0 <process_set_config+0x34>
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    1f04:	2200      	movs	r2, #0
    1f06:	e7dd      	b.n	1ec4 <process_set_config+0x48>
      assoc_itf_count = desc_iad->bInterfaceCount;
    1f08:	78eb      	ldrb	r3, [r5, #3]
    1f0a:	469a      	mov	sl, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
    1f0c:	782b      	ldrb	r3, [r5, #0]
    1f0e:	18ed      	adds	r5, r5, r3
    1f10:	e7ee      	b.n	1ef0 <process_set_config+0x74>
    drvid -= _app_driver_count;
    1f12:	1afb      	subs	r3, r7, r3
    1f14:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1f16:	2b00      	cmp	r3, #0
    1f18:	d126      	bne.n	1f68 <process_set_config+0xec>
    1f1a:	005a      	lsls	r2, r3, #1
    1f1c:	18d3      	adds	r3, r2, r3
    1f1e:	00da      	lsls	r2, r3, #3
    1f20:	4b2d      	ldr	r3, [pc, #180]	; (1fd8 <process_set_config+0x15c>)
    1f22:	189b      	adds	r3, r3, r2
      TU_ASSERT(driver);
    1f24:	2b00      	cmp	r3, #0
    1f26:	d04c      	beq.n	1fc2 <process_set_config+0x146>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
    1f28:	689b      	ldr	r3, [r3, #8]
    1f2a:	0022      	movs	r2, r4
    1f2c:	0029      	movs	r1, r5
    1f2e:	9800      	ldr	r0, [sp, #0]
    1f30:	4798      	blx	r3
    1f32:	0006      	movs	r6, r0
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
    1f34:	2808      	cmp	r0, #8
    1f36:	d901      	bls.n	1f3c <process_set_config+0xc0>
    1f38:	4284      	cmp	r4, r0
    1f3a:	d217      	bcs.n	1f6c <process_set_config+0xf0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    1f3c:	3701      	adds	r7, #1
    1f3e:	b2ff      	uxtb	r7, r7
    1f40:	9701      	str	r7, [sp, #4]
    1f42:	4b24      	ldr	r3, [pc, #144]	; (1fd4 <process_set_config+0x158>)
    1f44:	791b      	ldrb	r3, [r3, #4]
    1f46:	1c5a      	adds	r2, r3, #1
    1f48:	4297      	cmp	r7, r2
    1f4a:	da28      	bge.n	1f9e <process_set_config+0x122>
  if ( usbd_app_driver_get_cb )
    1f4c:	4a23      	ldr	r2, [pc, #140]	; (1fdc <process_set_config+0x160>)
    1f4e:	2a00      	cmp	r2, #0
    1f50:	d008      	beq.n	1f64 <process_set_config+0xe8>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1f52:	429f      	cmp	r7, r3
    1f54:	d2dd      	bcs.n	1f12 <process_set_config+0x96>
    1f56:	007a      	lsls	r2, r7, #1
    1f58:	19d2      	adds	r2, r2, r7
    1f5a:	00d1      	lsls	r1, r2, #3
    1f5c:	4b1d      	ldr	r3, [pc, #116]	; (1fd4 <process_set_config+0x158>)
    1f5e:	681b      	ldr	r3, [r3, #0]
    1f60:	185b      	adds	r3, r3, r1
    1f62:	e7df      	b.n	1f24 <process_set_config+0xa8>
  if ( usbd_app_driver_get_cb )
    1f64:	003b      	movs	r3, r7
    1f66:	e7d6      	b.n	1f16 <process_set_config+0x9a>
  return NULL;
    1f68:	2300      	movs	r3, #0
    1f6a:	e7db      	b.n	1f24 <process_set_config+0xa8>
    1f6c:	2200      	movs	r2, #0
        for(uint8_t i=0; i<assoc_itf_count; i++)
    1f6e:	4592      	cmp	sl, r2
    1f70:	d90d      	bls.n	1f8e <process_set_config+0x112>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
    1f72:	78ab      	ldrb	r3, [r5, #2]
    1f74:	18d3      	adds	r3, r2, r3
    1f76:	b2db      	uxtb	r3, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    1f78:	4916      	ldr	r1, [pc, #88]	; (1fd4 <process_set_config+0x158>)
    1f7a:	18c9      	adds	r1, r1, r3
    1f7c:	7ac9      	ldrb	r1, [r1, #11]
    1f7e:	29ff      	cmp	r1, #255	; 0xff
    1f80:	d121      	bne.n	1fc6 <process_set_config+0x14a>
          _usbd_dev.itf2drv[itf_num] = drv_id;
    1f82:	4914      	ldr	r1, [pc, #80]	; (1fd4 <process_set_config+0x158>)
    1f84:	18cb      	adds	r3, r1, r3
    1f86:	72df      	strb	r7, [r3, #11]
        for(uint8_t i=0; i<assoc_itf_count; i++)
    1f88:	3201      	adds	r2, #1
    1f8a:	b2d2      	uxtb	r2, r2
    1f8c:	e7ef      	b.n	1f6e <process_set_config+0xf2>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
    1f8e:	4811      	ldr	r0, [pc, #68]	; (1fd4 <process_set_config+0x158>)
    1f90:	301b      	adds	r0, #27
    1f92:	003b      	movs	r3, r7
    1f94:	0032      	movs	r2, r6
    1f96:	0029      	movs	r1, r5
    1f98:	4c11      	ldr	r4, [pc, #68]	; (1fe0 <process_set_config+0x164>)
    1f9a:	47a0      	blx	r4
        p_desc += drv_len;
    1f9c:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
    1f9e:	4b0d      	ldr	r3, [pc, #52]	; (1fd4 <process_set_config+0x158>)
    1fa0:	791b      	ldrb	r3, [r3, #4]
    1fa2:	3301      	adds	r3, #1
    1fa4:	9a01      	ldr	r2, [sp, #4]
    1fa6:	429a      	cmp	r2, r3
    1fa8:	db9b      	blt.n	1ee2 <process_set_config+0x66>
    1faa:	2000      	movs	r0, #0
    1fac:	e777      	b.n	1e9e <process_set_config+0x22>
  if (tud_mount_cb) tud_mount_cb();
    1fae:	4b0d      	ldr	r3, [pc, #52]	; (1fe4 <process_set_config+0x168>)
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d00a      	beq.n	1fca <process_set_config+0x14e>
    1fb4:	4798      	blx	r3
  return true;
    1fb6:	2001      	movs	r0, #1
    1fb8:	e771      	b.n	1e9e <process_set_config+0x22>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1fba:	2000      	movs	r0, #0
    1fbc:	e76f      	b.n	1e9e <process_set_config+0x22>
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    1fbe:	2000      	movs	r0, #0
    1fc0:	e76d      	b.n	1e9e <process_set_config+0x22>
      TU_ASSERT(driver);
    1fc2:	2000      	movs	r0, #0
    1fc4:	e76b      	b.n	1e9e <process_set_config+0x22>
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    1fc6:	2000      	movs	r0, #0
    1fc8:	e769      	b.n	1e9e <process_set_config+0x22>
  return true;
    1fca:	2001      	movs	r0, #1
    1fcc:	e767      	b.n	1e9e <process_set_config+0x22>
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	00000e99 	.word	0x00000e99
    1fd4:	20000430 	.word	0x20000430
    1fd8:	00007dec 	.word	0x00007dec
    1fdc:	00000000 	.word	0x00000000
    1fe0:	0000327d 	.word	0x0000327d
    1fe4:	0000022d 	.word	0x0000022d

00001fe8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
    1fea:	0004      	movs	r4, r0
    1fec:	000d      	movs	r5, r1
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
    1fee:	788b      	ldrb	r3, [r1, #2]
    1ff0:	78c8      	ldrb	r0, [r1, #3]
    1ff2:	0200      	lsls	r0, r0, #8
    1ff4:	4318      	orrs	r0, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
    1ff6:	0a02      	lsrs	r2, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    1ff8:	b2c0      	uxtb	r0, r0
  uint8_t const desc_index = tu_u16_low( p_request->wValue );

  switch(desc_type)
    1ffa:	2a0f      	cmp	r2, #15
    1ffc:	d851      	bhi.n	20a2 <STACK_SIZE+0xa2>
    1ffe:	0093      	lsls	r3, r2, #2
    2000:	492e      	ldr	r1, [pc, #184]	; (20bc <STACK_SIZE+0xbc>)
    2002:	58cb      	ldr	r3, [r1, r3]
    2004:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
    2006:	4b2e      	ldr	r3, [pc, #184]	; (20c0 <STACK_SIZE+0xc0>)
    2008:	4798      	blx	r3
    200a:	0002      	movs	r2, r0
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
    200c:	2312      	movs	r3, #18
    200e:	0029      	movs	r1, r5
    2010:	0020      	movs	r0, r4
    2012:	4c2c      	ldr	r4, [pc, #176]	; (20c4 <STACK_SIZE+0xc4>)
    2014:	47a0      	blx	r4
    }
    // break; // unreachable

    default: return false;
  }
}
    2016:	bd70      	pop	{r4, r5, r6, pc}
      if (!tud_descriptor_bos_cb) return false;
    2018:	4b2b      	ldr	r3, [pc, #172]	; (20c8 <STACK_SIZE+0xc8>)
    201a:	2b00      	cmp	r3, #0
    201c:	d043      	beq.n	20a6 <STACK_SIZE+0xa6>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
    201e:	4798      	blx	r3
      TU_ASSERT(desc_bos);
    2020:	2800      	cmp	r0, #0
    2022:	d101      	bne.n	2028 <STACK_SIZE+0x28>
    2024:	2000      	movs	r0, #0
    2026:	e7f6      	b.n	2016 <STACK_SIZE+0x16>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
    2028:	7882      	ldrb	r2, [r0, #2]
    202a:	78c3      	ldrb	r3, [r0, #3]
    202c:	021b      	lsls	r3, r3, #8
    202e:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
    2030:	0002      	movs	r2, r0
    2032:	0029      	movs	r1, r5
    2034:	0020      	movs	r0, r4
    2036:	4c23      	ldr	r4, [pc, #140]	; (20c4 <STACK_SIZE+0xc4>)
    2038:	47a0      	blx	r4
    203a:	e7ec      	b.n	2016 <STACK_SIZE+0x16>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
    203c:	2a02      	cmp	r2, #2
    203e:	d007      	beq.n	2050 <STACK_SIZE+0x50>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    2040:	4b22      	ldr	r3, [pc, #136]	; (20cc <STACK_SIZE+0xcc>)
    2042:	2b00      	cmp	r3, #0
    2044:	d031      	beq.n	20aa <STACK_SIZE+0xaa>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
    2046:	4798      	blx	r3
      TU_ASSERT(desc_config);
    2048:	2800      	cmp	r0, #0
    204a:	d104      	bne.n	2056 <STACK_SIZE+0x56>
    204c:	2000      	movs	r0, #0
    204e:	e7e2      	b.n	2016 <STACK_SIZE+0x16>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
    2050:	4b1f      	ldr	r3, [pc, #124]	; (20d0 <STACK_SIZE+0xd0>)
    2052:	4798      	blx	r3
    2054:	e7f8      	b.n	2048 <STACK_SIZE+0x48>
    2056:	7882      	ldrb	r2, [r0, #2]
    2058:	78c3      	ldrb	r3, [r0, #3]
    205a:	021b      	lsls	r3, r3, #8
    205c:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
    205e:	0002      	movs	r2, r0
    2060:	0029      	movs	r1, r5
    2062:	0020      	movs	r0, r4
    2064:	4c17      	ldr	r4, [pc, #92]	; (20c4 <STACK_SIZE+0xc4>)
    2066:	47a0      	blx	r4
    2068:	e7d5      	b.n	2016 <STACK_SIZE+0x16>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
    206a:	792b      	ldrb	r3, [r5, #4]
    206c:	7969      	ldrb	r1, [r5, #5]
    206e:	0209      	lsls	r1, r1, #8
    2070:	4319      	orrs	r1, r3
    2072:	4b18      	ldr	r3, [pc, #96]	; (20d4 <STACK_SIZE+0xd4>)
    2074:	4798      	blx	r3
      TU_VERIFY(desc_str);
    2076:	2800      	cmp	r0, #0
    2078:	d019      	beq.n	20ae <STACK_SIZE+0xae>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
    207a:	7803      	ldrb	r3, [r0, #0]
    207c:	0002      	movs	r2, r0
    207e:	0029      	movs	r1, r5
    2080:	0020      	movs	r0, r4
    2082:	4c10      	ldr	r4, [pc, #64]	; (20c4 <STACK_SIZE+0xc4>)
    2084:	47a0      	blx	r4
    2086:	e7c6      	b.n	2016 <STACK_SIZE+0x16>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    2088:	4b13      	ldr	r3, [pc, #76]	; (20d8 <STACK_SIZE+0xd8>)
    208a:	2b00      	cmp	r3, #0
    208c:	d011      	beq.n	20b2 <STACK_SIZE+0xb2>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
    208e:	4798      	blx	r3
      TU_VERIFY(desc_qualifier);
    2090:	2800      	cmp	r0, #0
    2092:	d010      	beq.n	20b6 <STACK_SIZE+0xb6>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
    2094:	7803      	ldrb	r3, [r0, #0]
    2096:	0002      	movs	r2, r0
    2098:	0029      	movs	r1, r5
    209a:	0020      	movs	r0, r4
    209c:	4c09      	ldr	r4, [pc, #36]	; (20c4 <STACK_SIZE+0xc4>)
    209e:	47a0      	blx	r4
    20a0:	e7b9      	b.n	2016 <STACK_SIZE+0x16>
    default: return false;
    20a2:	2000      	movs	r0, #0
    20a4:	e7b7      	b.n	2016 <STACK_SIZE+0x16>
      if (!tud_descriptor_bos_cb) return false;
    20a6:	2000      	movs	r0, #0
    20a8:	e7b5      	b.n	2016 <STACK_SIZE+0x16>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    20aa:	2000      	movs	r0, #0
    20ac:	e7b3      	b.n	2016 <STACK_SIZE+0x16>
      TU_VERIFY(desc_str);
    20ae:	2000      	movs	r0, #0
    20b0:	e7b1      	b.n	2016 <STACK_SIZE+0x16>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    20b2:	2000      	movs	r0, #0
    20b4:	e7af      	b.n	2016 <STACK_SIZE+0x16>
      TU_VERIFY(desc_qualifier);
    20b6:	2000      	movs	r0, #0
    20b8:	e7ad      	b.n	2016 <STACK_SIZE+0x16>
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	00007d60 	.word	0x00007d60
    20c0:	00000e91 	.word	0x00000e91
    20c4:	00002b11 	.word	0x00002b11
	...
    20d0:	00000e99 	.word	0x00000e99
    20d4:	00000ea5 	.word	0x00000ea5
    20d8:	00000000 	.word	0x00000000

000020dc <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
    20dc:	b510      	push	{r4, lr}
  if (enabled)
    20de:	2800      	cmp	r0, #0
    20e0:	d104      	bne.n	20ec <usbd_int_set+0x10>
  {
    dcd_int_enable(_usbd_rhport);
  }else
  {
    dcd_int_disable(_usbd_rhport);
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <usbd_int_set+0x1c>)
    20e4:	7818      	ldrb	r0, [r3, #0]
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <usbd_int_set+0x20>)
    20e8:	4798      	blx	r3
  }
}
    20ea:	bd10      	pop	{r4, pc}
    dcd_int_enable(_usbd_rhport);
    20ec:	4b02      	ldr	r3, [pc, #8]	; (20f8 <usbd_int_set+0x1c>)
    20ee:	7818      	ldrb	r0, [r3, #0]
    20f0:	4b03      	ldr	r3, [pc, #12]	; (2100 <usbd_int_set+0x24>)
    20f2:	4798      	blx	r3
    20f4:	e7f9      	b.n	20ea <usbd_int_set+0xe>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	200000c4 	.word	0x200000c4
    20fc:	00002dc5 	.word	0x00002dc5
    2100:	00002db9 	.word	0x00002db9

00002104 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
    2104:	4b03      	ldr	r3, [pc, #12]	; (2114 <tud_inited+0x10>)
    2106:	7818      	ldrb	r0, [r3, #0]
    2108:	38ff      	subs	r0, #255	; 0xff
    210a:	1e43      	subs	r3, r0, #1
    210c:	4198      	sbcs	r0, r3
    210e:	b2c0      	uxtb	r0, r0
}
    2110:	4770      	bx	lr
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	200000c4 	.word	0x200000c4

00002118 <tud_init>:
{
    2118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211a:	0006      	movs	r6, r0
  if ( tud_inited() ) return true;
    211c:	4b24      	ldr	r3, [pc, #144]	; (21b0 <tud_init+0x98>)
    211e:	4798      	blx	r3
    2120:	1e05      	subs	r5, r0, #0
    2122:	d001      	beq.n	2128 <tud_init+0x10>
}
    2124:	0028      	movs	r0, r5
    2126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tu_varclr(&_usbd_dev);
    2128:	4f22      	ldr	r7, [pc, #136]	; (21b4 <tud_init+0x9c>)
    212a:	0038      	movs	r0, r7
    212c:	3008      	adds	r0, #8
    212e:	2233      	movs	r2, #51	; 0x33
    2130:	2100      	movs	r1, #0
    2132:	4b21      	ldr	r3, [pc, #132]	; (21b8 <tud_init+0xa0>)
    2134:	4798      	blx	r3
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
    2136:	4c21      	ldr	r4, [pc, #132]	; (21bc <tud_init+0xa4>)
    2138:	3404      	adds	r4, #4
    213a:	1d20      	adds	r0, r4, #4
    213c:	4b20      	ldr	r3, [pc, #128]	; (21c0 <tud_init+0xa8>)
    213e:	4798      	blx	r3
  _usbd_q = osal_queue_create(&_usbd_qdef);
    2140:	63fc      	str	r4, [r7, #60]	; 0x3c
  if ( usbd_app_driver_get_cb )
    2142:	4b20      	ldr	r3, [pc, #128]	; (21c4 <tud_init+0xac>)
    2144:	2b00      	cmp	r3, #0
    2146:	d003      	beq.n	2150 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
    2148:	4c1a      	ldr	r4, [pc, #104]	; (21b4 <tud_init+0x9c>)
    214a:	1d20      	adds	r0, r4, #4
    214c:	4798      	blx	r3
    214e:	6020      	str	r0, [r4, #0]
  return NULL;
    2150:	2400      	movs	r4, #0
    2152:	e00e      	b.n	2172 <tud_init+0x5a>
    drvid -= _app_driver_count;
    2154:	1ae3      	subs	r3, r4, r3
    2156:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    2158:	2b00      	cmp	r3, #0
    215a:	d11d      	bne.n	2198 <tud_init+0x80>
    215c:	005a      	lsls	r2, r3, #1
    215e:	18d3      	adds	r3, r2, r3
    2160:	00da      	lsls	r2, r3, #3
    2162:	4b19      	ldr	r3, [pc, #100]	; (21c8 <tud_init+0xb0>)
    2164:	189b      	adds	r3, r3, r2
    TU_ASSERT(driver);
    2166:	2b00      	cmp	r3, #0
    2168:	d0dc      	beq.n	2124 <tud_init+0xc>
    driver->init();
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    216e:	3401      	adds	r4, #1
    2170:	b2e4      	uxtb	r4, r4
    2172:	4b10      	ldr	r3, [pc, #64]	; (21b4 <tud_init+0x9c>)
    2174:	791b      	ldrb	r3, [r3, #4]
    2176:	1c5a      	adds	r2, r3, #1
    2178:	4294      	cmp	r4, r2
    217a:	da0f      	bge.n	219c <tud_init+0x84>
  if ( usbd_app_driver_get_cb )
    217c:	4a11      	ldr	r2, [pc, #68]	; (21c4 <tud_init+0xac>)
    217e:	2a00      	cmp	r2, #0
    2180:	d008      	beq.n	2194 <tud_init+0x7c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    2182:	429c      	cmp	r4, r3
    2184:	d2e6      	bcs.n	2154 <tud_init+0x3c>
    2186:	0062      	lsls	r2, r4, #1
    2188:	1912      	adds	r2, r2, r4
    218a:	00d1      	lsls	r1, r2, #3
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <tud_init+0x9c>)
    218e:	681b      	ldr	r3, [r3, #0]
    2190:	185b      	adds	r3, r3, r1
    2192:	e7e8      	b.n	2166 <tud_init+0x4e>
  if ( usbd_app_driver_get_cb )
    2194:	0023      	movs	r3, r4
    2196:	e7df      	b.n	2158 <tud_init+0x40>
  return NULL;
    2198:	2300      	movs	r3, #0
    219a:	e7e4      	b.n	2166 <tud_init+0x4e>
  _usbd_rhport = rhport;
    219c:	4b07      	ldr	r3, [pc, #28]	; (21bc <tud_init+0xa4>)
    219e:	701e      	strb	r6, [r3, #0]
  dcd_init(rhport);
    21a0:	0030      	movs	r0, r6
    21a2:	4b0a      	ldr	r3, [pc, #40]	; (21cc <tud_init+0xb4>)
    21a4:	4798      	blx	r3
  dcd_int_enable(rhport);
    21a6:	0030      	movs	r0, r6
    21a8:	4b09      	ldr	r3, [pc, #36]	; (21d0 <tud_init+0xb8>)
    21aa:	4798      	blx	r3
  return true;
    21ac:	2501      	movs	r5, #1
    21ae:	e7b9      	b.n	2124 <tud_init+0xc>
    21b0:	00002105 	.word	0x00002105
    21b4:	20000430 	.word	0x20000430
    21b8:	00005a73 	.word	0x00005a73
    21bc:	200000c4 	.word	0x200000c4
    21c0:	00001da5 	.word	0x00001da5
    21c4:	00000000 	.word	0x00000000
    21c8:	00007dec 	.word	0x00007dec
    21cc:	00002d1d 	.word	0x00002d1d
    21d0:	00002db9 	.word	0x00002db9

000021d4 <dcd_event_handler>:
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	b085      	sub	sp, #20
    21d8:	0005      	movs	r5, r0
    21da:	000e      	movs	r6, r1
  switch (event->event_id)
    21dc:	7843      	ldrb	r3, [r0, #1]
    21de:	2b03      	cmp	r3, #3
    21e0:	d100      	bne.n	21e4 <dcd_event_handler+0x10>
    21e2:	e086      	b.n	22f2 <dcd_event_handler+0x11e>
    21e4:	d91c      	bls.n	2220 <dcd_event_handler+0x4c>
    21e6:	2b04      	cmp	r3, #4
    21e8:	d03d      	beq.n	2266 <dcd_event_handler+0x92>
    21ea:	2b05      	cmp	r3, #5
    21ec:	d000      	beq.n	21f0 <dcd_event_handler+0x1c>
    21ee:	e0a6      	b.n	233e <dcd_event_handler+0x16a>
      if ( _usbd_dev.connected )
    21f0:	4b5d      	ldr	r3, [pc, #372]	; (2368 <dcd_event_handler+0x194>)
    21f2:	7a1b      	ldrb	r3, [r3, #8]
    21f4:	07db      	lsls	r3, r3, #31
    21f6:	d400      	bmi.n	21fa <dcd_event_handler+0x26>
    21f8:	e0ab      	b.n	2352 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 0;
    21fa:	4b5b      	ldr	r3, [pc, #364]	; (2368 <dcd_event_handler+0x194>)
    21fc:	7a1a      	ldrb	r2, [r3, #8]
    21fe:	2104      	movs	r1, #4
    2200:	438a      	bics	r2, r1
    2202:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    2204:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
    2206:	2e00      	cmp	r6, #0
    2208:	d047      	beq.n	229a <dcd_event_handler+0xc6>
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
    220a:	1d20      	adds	r0, r4, #4
    220c:	0029      	movs	r1, r5
    220e:	4b57      	ldr	r3, [pc, #348]	; (236c <dcd_event_handler+0x198>)
    2210:	4798      	blx	r3

  if (!in_isr) {
    2212:	2e00      	cmp	r6, #0
    2214:	d000      	beq.n	2218 <dcd_event_handler+0x44>
    2216:	e09c      	b.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    2218:	6823      	ldr	r3, [r4, #0]
    221a:	2001      	movs	r0, #1
    221c:	4798      	blx	r3
    221e:	e098      	b.n	2352 <dcd_event_handler+0x17e>
  switch (event->event_id)
    2220:	2b02      	cmp	r3, #2
    2222:	d000      	beq.n	2226 <dcd_event_handler+0x52>
    2224:	e08b      	b.n	233e <dcd_event_handler+0x16a>
      _usbd_dev.connected  = 0;
    2226:	4b50      	ldr	r3, [pc, #320]	; (2368 <dcd_event_handler+0x194>)
    2228:	7a1a      	ldrb	r2, [r3, #8]
    222a:	2101      	movs	r1, #1
    222c:	438a      	bics	r2, r1
    222e:	721a      	strb	r2, [r3, #8]
      _usbd_dev.addressed  = 0;
    2230:	7a1a      	ldrb	r2, [r3, #8]
    2232:	3101      	adds	r1, #1
    2234:	438a      	bics	r2, r1
    2236:	721a      	strb	r2, [r3, #8]
      _usbd_dev.cfg_num    = 0;
    2238:	2200      	movs	r2, #0
    223a:	725a      	strb	r2, [r3, #9]
      _usbd_dev.suspended  = 0;
    223c:	7a1a      	ldrb	r2, [r3, #8]
    223e:	3102      	adds	r1, #2
    2240:	438a      	bics	r2, r1
    2242:	721a      	strb	r2, [r3, #8]
      osal_queue_send(_usbd_q, event, in_isr);
    2244:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    2246:	2e00      	cmp	r6, #0
    2248:	d009      	beq.n	225e <dcd_event_handler+0x8a>
  bool success = tu_fifo_write(&qhdl->ff, data);
    224a:	1d20      	adds	r0, r4, #4
    224c:	0029      	movs	r1, r5
    224e:	4b47      	ldr	r3, [pc, #284]	; (236c <dcd_event_handler+0x198>)
    2250:	4798      	blx	r3
  if (!in_isr) {
    2252:	2e00      	cmp	r6, #0
    2254:	d17d      	bne.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    2256:	6823      	ldr	r3, [r4, #0]
    2258:	2001      	movs	r0, #1
    225a:	4798      	blx	r3
    225c:	e079      	b.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    225e:	2000      	movs	r0, #0
    2260:	6823      	ldr	r3, [r4, #0]
    2262:	4798      	blx	r3
    2264:	e7f1      	b.n	224a <dcd_event_handler+0x76>
      if ( _usbd_dev.connected )
    2266:	4b40      	ldr	r3, [pc, #256]	; (2368 <dcd_event_handler+0x194>)
    2268:	7a1b      	ldrb	r3, [r3, #8]
    226a:	07db      	lsls	r3, r3, #31
    226c:	d571      	bpl.n	2352 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 1;
    226e:	4b3e      	ldr	r3, [pc, #248]	; (2368 <dcd_event_handler+0x194>)
    2270:	7a1a      	ldrb	r2, [r3, #8]
    2272:	2104      	movs	r1, #4
    2274:	430a      	orrs	r2, r1
    2276:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    2278:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    227a:	2e00      	cmp	r6, #0
    227c:	d009      	beq.n	2292 <dcd_event_handler+0xbe>
  bool success = tu_fifo_write(&qhdl->ff, data);
    227e:	1d20      	adds	r0, r4, #4
    2280:	0029      	movs	r1, r5
    2282:	4b3a      	ldr	r3, [pc, #232]	; (236c <dcd_event_handler+0x198>)
    2284:	4798      	blx	r3
  if (!in_isr) {
    2286:	2e00      	cmp	r6, #0
    2288:	d163      	bne.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    228a:	6823      	ldr	r3, [r4, #0]
    228c:	2001      	movs	r0, #1
    228e:	4798      	blx	r3
    2290:	e05f      	b.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    2292:	2000      	movs	r0, #0
    2294:	6823      	ldr	r3, [r4, #0]
    2296:	4798      	blx	r3
    2298:	e7f1      	b.n	227e <dcd_event_handler+0xaa>
    229a:	2000      	movs	r0, #0
    229c:	6823      	ldr	r3, [r4, #0]
    229e:	4798      	blx	r3
    22a0:	e7b3      	b.n	220a <dcd_event_handler+0x36>
    drvid -= _app_driver_count;
    22a2:	1ae3      	subs	r3, r4, r3
    22a4:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    22a6:	2b00      	cmp	r3, #0
    22a8:	d121      	bne.n	22ee <dcd_event_handler+0x11a>
    22aa:	005a      	lsls	r2, r3, #1
    22ac:	18d3      	adds	r3, r2, r3
    22ae:	00da      	lsls	r2, r3, #3
    22b0:	4b2f      	ldr	r3, [pc, #188]	; (2370 <dcd_event_handler+0x19c>)
    22b2:	189b      	adds	r3, r3, r2
        if (driver && driver->sof)
    22b4:	2b00      	cmp	r3, #0
    22b6:	d005      	beq.n	22c4 <dcd_event_handler+0xf0>
    22b8:	695b      	ldr	r3, [r3, #20]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d002      	beq.n	22c4 <dcd_event_handler+0xf0>
          driver->sof(event->rhport, event->sof.frame_count);
    22be:	7828      	ldrb	r0, [r5, #0]
    22c0:	6869      	ldr	r1, [r5, #4]
    22c2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    22c4:	3401      	adds	r4, #1
    22c6:	b2e4      	uxtb	r4, r4
    22c8:	4b27      	ldr	r3, [pc, #156]	; (2368 <dcd_event_handler+0x194>)
    22ca:	791b      	ldrb	r3, [r3, #4]
    22cc:	1c5a      	adds	r2, r3, #1
    22ce:	4294      	cmp	r4, r2
    22d0:	da11      	bge.n	22f6 <dcd_event_handler+0x122>
  if ( usbd_app_driver_get_cb )
    22d2:	4a28      	ldr	r2, [pc, #160]	; (2374 <dcd_event_handler+0x1a0>)
    22d4:	2a00      	cmp	r2, #0
    22d6:	d008      	beq.n	22ea <dcd_event_handler+0x116>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    22d8:	429c      	cmp	r4, r3
    22da:	d2e2      	bcs.n	22a2 <dcd_event_handler+0xce>
    22dc:	0062      	lsls	r2, r4, #1
    22de:	1912      	adds	r2, r2, r4
    22e0:	00d1      	lsls	r1, r2, #3
    22e2:	4b21      	ldr	r3, [pc, #132]	; (2368 <dcd_event_handler+0x194>)
    22e4:	681b      	ldr	r3, [r3, #0]
    22e6:	185b      	adds	r3, r3, r1
    22e8:	e7e4      	b.n	22b4 <dcd_event_handler+0xe0>
  if ( usbd_app_driver_get_cb )
    22ea:	0023      	movs	r3, r4
    22ec:	e7db      	b.n	22a6 <dcd_event_handler+0xd2>
  return NULL;
    22ee:	2300      	movs	r3, #0
    22f0:	e7e0      	b.n	22b4 <dcd_event_handler+0xe0>
  switch (event->event_id)
    22f2:	2400      	movs	r4, #0
    22f4:	e7e8      	b.n	22c8 <dcd_event_handler+0xf4>
      if ( _usbd_dev.suspended )
    22f6:	4b1c      	ldr	r3, [pc, #112]	; (2368 <dcd_event_handler+0x194>)
    22f8:	7a1b      	ldrb	r3, [r3, #8]
    22fa:	075b      	lsls	r3, r3, #29
    22fc:	d529      	bpl.n	2352 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 0;
    22fe:	4c1a      	ldr	r4, [pc, #104]	; (2368 <dcd_event_handler+0x194>)
    2300:	7a23      	ldrb	r3, [r4, #8]
    2302:	2204      	movs	r2, #4
    2304:	4393      	bics	r3, r2
    2306:	7223      	strb	r3, [r4, #8]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
    2308:	af01      	add	r7, sp, #4
    230a:	3208      	adds	r2, #8
    230c:	2100      	movs	r1, #0
    230e:	0038      	movs	r0, r7
    2310:	4b19      	ldr	r3, [pc, #100]	; (2378 <dcd_event_handler+0x1a4>)
    2312:	4798      	blx	r3
    2314:	782b      	ldrb	r3, [r5, #0]
    2316:	703b      	strb	r3, [r7, #0]
    2318:	2305      	movs	r3, #5
    231a:	707b      	strb	r3, [r7, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
    231c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
  if (!in_isr) {
    231e:	2e00      	cmp	r6, #0
    2320:	d009      	beq.n	2336 <dcd_event_handler+0x162>
  bool success = tu_fifo_write(&qhdl->ff, data);
    2322:	1d20      	adds	r0, r4, #4
    2324:	a901      	add	r1, sp, #4
    2326:	4b11      	ldr	r3, [pc, #68]	; (236c <dcd_event_handler+0x198>)
    2328:	4798      	blx	r3
  if (!in_isr) {
    232a:	2e00      	cmp	r6, #0
    232c:	d111      	bne.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    232e:	6823      	ldr	r3, [r4, #0]
    2330:	2001      	movs	r0, #1
    2332:	4798      	blx	r3
    2334:	e00d      	b.n	2352 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    2336:	2000      	movs	r0, #0
    2338:	6823      	ldr	r3, [r4, #0]
    233a:	4798      	blx	r3
    233c:	e7f1      	b.n	2322 <dcd_event_handler+0x14e>
      osal_queue_send(_usbd_q, event, in_isr);
    233e:	4b0a      	ldr	r3, [pc, #40]	; (2368 <dcd_event_handler+0x194>)
    2340:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    2342:	2e00      	cmp	r6, #0
    2344:	d007      	beq.n	2356 <dcd_event_handler+0x182>
  bool success = tu_fifo_write(&qhdl->ff, data);
    2346:	1d20      	adds	r0, r4, #4
    2348:	0029      	movs	r1, r5
    234a:	4b08      	ldr	r3, [pc, #32]	; (236c <dcd_event_handler+0x198>)
    234c:	4798      	blx	r3
  if (!in_isr) {
    234e:	2e00      	cmp	r6, #0
    2350:	d005      	beq.n	235e <dcd_event_handler+0x18a>
}
    2352:	b005      	add	sp, #20
    2354:	bdf0      	pop	{r4, r5, r6, r7, pc}
  qhdl->interrupt_set(false);
    2356:	2000      	movs	r0, #0
    2358:	6823      	ldr	r3, [r4, #0]
    235a:	4798      	blx	r3
    235c:	e7f3      	b.n	2346 <dcd_event_handler+0x172>
  qhdl->interrupt_set(true);
    235e:	6823      	ldr	r3, [r4, #0]
    2360:	2001      	movs	r0, #1
    2362:	4798      	blx	r3
    2364:	e7f5      	b.n	2352 <dcd_event_handler+0x17e>
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	20000430 	.word	0x20000430
    236c:	00001d45 	.word	0x00001d45
    2370:	00007dec 	.word	0x00007dec
    2374:	00000000 	.word	0x00000000
    2378:	00005a73 	.word	0x00005a73

0000237c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
    237c:	b570      	push	{r4, r5, r6, lr}
    237e:	000c      	movs	r4, r1
  rhport = _usbd_rhport;
    2380:	4b0a      	ldr	r3, [pc, #40]	; (23ac <usbd_edpt_open+0x30>)
    2382:	781d      	ldrb	r5, [r3, #0]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
    2384:	788a      	ldrb	r2, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2386:	237f      	movs	r3, #127	; 0x7f
    2388:	4013      	ands	r3, r2
    238a:	2b07      	cmp	r3, #7
    238c:	d901      	bls.n	2392 <usbd_edpt_open+0x16>
    238e:	2000      	movs	r0, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
    2390:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
    2392:	4b07      	ldr	r3, [pc, #28]	; (23b0 <usbd_edpt_open+0x34>)
    2394:	7a99      	ldrb	r1, [r3, #10]
    2396:	0020      	movs	r0, r4
    2398:	4b06      	ldr	r3, [pc, #24]	; (23b4 <usbd_edpt_open+0x38>)
    239a:	4798      	blx	r3
    239c:	2800      	cmp	r0, #0
    239e:	d0f7      	beq.n	2390 <usbd_edpt_open+0x14>
  return dcd_edpt_open(rhport, desc_ep);
    23a0:	0021      	movs	r1, r4
    23a2:	0028      	movs	r0, r5
    23a4:	4b04      	ldr	r3, [pc, #16]	; (23b8 <usbd_edpt_open+0x3c>)
    23a6:	4798      	blx	r3
    23a8:	e7f2      	b.n	2390 <usbd_edpt_open+0x14>
    23aa:	46c0      	nop			; (mov r8, r8)
    23ac:	200000c4 	.word	0x200000c4
    23b0:	20000430 	.word	0x20000430
    23b4:	00003209 	.word	0x00003209
    23b8:	00002e21 	.word	0x00002e21

000023bc <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	46ce      	mov	lr, r9
    23c0:	4647      	mov	r7, r8
    23c2:	b580      	push	{r7, lr}
  rhport = _usbd_rhport;
    23c4:	4819      	ldr	r0, [pc, #100]	; (242c <usbd_edpt_xfer+0x70>)
    23c6:	7800      	ldrb	r0, [r0, #0]
    23c8:	257f      	movs	r5, #127	; 0x7f
    23ca:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    23cc:	09ce      	lsrs	r6, r1, #7
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
    23ce:	006f      	lsls	r7, r5, #1
    23d0:	4c17      	ldr	r4, [pc, #92]	; (2430 <usbd_edpt_xfer+0x74>)
    23d2:	19e4      	adds	r4, r4, r7
    23d4:	19a4      	adds	r4, r4, r6
    23d6:	3428      	adds	r4, #40	; 0x28
    23d8:	78e4      	ldrb	r4, [r4, #3]
    23da:	07e4      	lsls	r4, r4, #31
    23dc:	d504      	bpl.n	23e8 <usbd_edpt_xfer+0x2c>
    23de:	2000      	movs	r0, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
    23e0:	bc0c      	pop	{r2, r3}
    23e2:	4690      	mov	r8, r2
    23e4:	4699      	mov	r9, r3
    23e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
    23e8:	4c11      	ldr	r4, [pc, #68]	; (2430 <usbd_edpt_xfer+0x74>)
    23ea:	19e4      	adds	r4, r4, r7
    23ec:	19a4      	adds	r4, r4, r6
    23ee:	2728      	movs	r7, #40	; 0x28
    23f0:	46b9      	mov	r9, r7
    23f2:	44a1      	add	r9, r4
    23f4:	464c      	mov	r4, r9
    23f6:	78e4      	ldrb	r4, [r4, #3]
    23f8:	2701      	movs	r7, #1
    23fa:	46bc      	mov	ip, r7
    23fc:	4667      	mov	r7, ip
    23fe:	433c      	orrs	r4, r7
    2400:	0027      	movs	r7, r4
    2402:	464c      	mov	r4, r9
    2404:	70e7      	strb	r7, [r4, #3]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
    2406:	4c0b      	ldr	r4, [pc, #44]	; (2434 <usbd_edpt_xfer+0x78>)
    2408:	47a0      	blx	r4
    240a:	2800      	cmp	r0, #0
    240c:	d1e8      	bne.n	23e0 <usbd_edpt_xfer+0x24>
    _usbd_dev.ep_status[epnum][dir].busy = false;
    240e:	006d      	lsls	r5, r5, #1
    2410:	4b07      	ldr	r3, [pc, #28]	; (2430 <usbd_edpt_xfer+0x74>)
    2412:	195d      	adds	r5, r3, r5
    2414:	19ae      	adds	r6, r5, r6
    2416:	3628      	adds	r6, #40	; 0x28
    2418:	78f3      	ldrb	r3, [r6, #3]
    241a:	2201      	movs	r2, #1
    241c:	4393      	bics	r3, r2
    241e:	70f3      	strb	r3, [r6, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    2420:	78f3      	ldrb	r3, [r6, #3]
    2422:	3203      	adds	r2, #3
    2424:	4393      	bics	r3, r2
    2426:	70f3      	strb	r3, [r6, #3]
    return false;
    2428:	e7da      	b.n	23e0 <usbd_edpt_xfer+0x24>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	200000c4 	.word	0x200000c4
    2430:	20000430 	.word	0x20000430
    2434:	00002ef5 	.word	0x00002ef5

00002438 <usbd_edpt_busy>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2438:	237f      	movs	r3, #127	; 0x7f
    243a:	400b      	ands	r3, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    243c:	09ca      	lsrs	r2, r1, #7
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
    243e:	005b      	lsls	r3, r3, #1
    2440:	4903      	ldr	r1, [pc, #12]	; (2450 <usbd_edpt_busy+0x18>)
    2442:	18c9      	adds	r1, r1, r3
    2444:	1889      	adds	r1, r1, r2
    2446:	3128      	adds	r1, #40	; 0x28
    2448:	78c8      	ldrb	r0, [r1, #3]
    244a:	07c0      	lsls	r0, r0, #31
    244c:	0fc0      	lsrs	r0, r0, #31
}
    244e:	4770      	bx	lr
    2450:	20000430 	.word	0x20000430

00002454 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
    2454:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    2456:	4b0f      	ldr	r3, [pc, #60]	; (2494 <usbd_edpt_stall+0x40>)
    2458:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    245a:	247f      	movs	r4, #127	; 0x7f
    245c:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    245e:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
    2460:	0062      	lsls	r2, r4, #1
    2462:	4b0d      	ldr	r3, [pc, #52]	; (2498 <usbd_edpt_stall+0x44>)
    2464:	189b      	adds	r3, r3, r2
    2466:	195b      	adds	r3, r3, r5
    2468:	3328      	adds	r3, #40	; 0x28
    246a:	78db      	ldrb	r3, [r3, #3]
    246c:	079b      	lsls	r3, r3, #30
    246e:	d500      	bpl.n	2472 <usbd_edpt_stall+0x1e>
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    _usbd_dev.ep_status[epnum][dir].busy = true;
  }
}
    2470:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_stall(rhport, ep_addr);
    2472:	4b0a      	ldr	r3, [pc, #40]	; (249c <usbd_edpt_stall+0x48>)
    2474:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    2476:	0063      	lsls	r3, r4, #1
    2478:	4c07      	ldr	r4, [pc, #28]	; (2498 <usbd_edpt_stall+0x44>)
    247a:	18e4      	adds	r4, r4, r3
    247c:	1964      	adds	r4, r4, r5
    247e:	3428      	adds	r4, #40	; 0x28
    2480:	78e3      	ldrb	r3, [r4, #3]
    2482:	2202      	movs	r2, #2
    2484:	4313      	orrs	r3, r2
    2486:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
    2488:	78e3      	ldrb	r3, [r4, #3]
    248a:	2201      	movs	r2, #1
    248c:	4313      	orrs	r3, r2
    248e:	70e3      	strb	r3, [r4, #3]
}
    2490:	e7ee      	b.n	2470 <usbd_edpt_stall+0x1c>
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	200000c4 	.word	0x200000c4
    2498:	20000430 	.word	0x20000430
    249c:	00002fd1 	.word	0x00002fd1

000024a0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
    24a0:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    24a2:	4b0f      	ldr	r3, [pc, #60]	; (24e0 <usbd_edpt_clear_stall+0x40>)
    24a4:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    24a6:	247f      	movs	r4, #127	; 0x7f
    24a8:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    24aa:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
    24ac:	0062      	lsls	r2, r4, #1
    24ae:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <usbd_edpt_clear_stall+0x44>)
    24b0:	189b      	adds	r3, r3, r2
    24b2:	195b      	adds	r3, r3, r5
    24b4:	3328      	adds	r3, #40	; 0x28
    24b6:	78db      	ldrb	r3, [r3, #3]
    24b8:	079b      	lsls	r3, r3, #30
    24ba:	d400      	bmi.n	24be <usbd_edpt_clear_stall+0x1e>
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    _usbd_dev.ep_status[epnum][dir].busy = false;
  }
}
    24bc:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_clear_stall(rhport, ep_addr);
    24be:	4b0a      	ldr	r3, [pc, #40]	; (24e8 <usbd_edpt_clear_stall+0x48>)
    24c0:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    24c2:	0063      	lsls	r3, r4, #1
    24c4:	4c07      	ldr	r4, [pc, #28]	; (24e4 <usbd_edpt_clear_stall+0x44>)
    24c6:	18e4      	adds	r4, r4, r3
    24c8:	1964      	adds	r4, r4, r5
    24ca:	3428      	adds	r4, #40	; 0x28
    24cc:	78e3      	ldrb	r3, [r4, #3]
    24ce:	2202      	movs	r2, #2
    24d0:	4393      	bics	r3, r2
    24d2:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
    24d4:	78e3      	ldrb	r3, [r4, #3]
    24d6:	3a01      	subs	r2, #1
    24d8:	4393      	bics	r3, r2
    24da:	70e3      	strb	r3, [r4, #3]
}
    24dc:	e7ee      	b.n	24bc <usbd_edpt_clear_stall+0x1c>
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	200000c4 	.word	0x200000c4
    24e4:	20000430 	.word	0x20000430
    24e8:	00002ff5 	.word	0x00002ff5

000024ec <usbd_edpt_stalled>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    24ec:	237f      	movs	r3, #127	; 0x7f
    24ee:	400b      	ands	r3, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    24f0:	09ca      	lsrs	r2, r1, #7
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
    24f2:	005b      	lsls	r3, r3, #1
    24f4:	4903      	ldr	r1, [pc, #12]	; (2504 <usbd_edpt_stalled+0x18>)
    24f6:	18c9      	adds	r1, r1, r3
    24f8:	1889      	adds	r1, r1, r2
    24fa:	3128      	adds	r1, #40	; 0x28
    24fc:	78c8      	ldrb	r0, [r1, #3]
    24fe:	0780      	lsls	r0, r0, #30
    2500:	0fc0      	lsrs	r0, r0, #31
}
    2502:	4770      	bx	lr
    2504:	20000430 	.word	0x20000430

00002508 <process_control_request>:
{
    2508:	b5f0      	push	{r4, r5, r6, r7, lr}
    250a:	46c6      	mov	lr, r8
    250c:	b500      	push	{lr}
    250e:	b082      	sub	sp, #8
    2510:	0004      	movs	r4, r0
    2512:	000d      	movs	r5, r1
  usbd_control_set_complete_callback(NULL);
    2514:	2000      	movs	r0, #0
    2516:	4bc9      	ldr	r3, [pc, #804]	; (283c <process_control_request+0x334>)
    2518:	4798      	blx	r3
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    251a:	782b      	ldrb	r3, [r5, #0]
    251c:	065b      	lsls	r3, r3, #25
    251e:	0f9b      	lsrs	r3, r3, #30
    2520:	2b02      	cmp	r3, #2
    2522:	dd00      	ble.n	2526 <process_control_request+0x1e>
    2524:	e1b4      	b.n	2890 <process_control_request+0x388>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
    2526:	782b      	ldrb	r3, [r5, #0]
    2528:	2260      	movs	r2, #96	; 0x60
    252a:	401a      	ands	r2, r3
    252c:	2a40      	cmp	r2, #64	; 0x40
    252e:	d00c      	beq.n	254a <process_control_request+0x42>
  switch ( p_request->bmRequestType_bit.recipient )
    2530:	782b      	ldrb	r3, [r5, #0]
    2532:	06db      	lsls	r3, r3, #27
    2534:	0edb      	lsrs	r3, r3, #27
    2536:	2b01      	cmp	r3, #1
    2538:	d100      	bne.n	253c <process_control_request+0x34>
    253a:	e0cc      	b.n	26d6 <process_control_request+0x1ce>
    253c:	2b00      	cmp	r3, #0
    253e:	d011      	beq.n	2564 <process_control_request+0x5c>
    2540:	2b02      	cmp	r3, #2
    2542:	d100      	bne.n	2546 <process_control_request+0x3e>
    2544:	e112      	b.n	276c <process_control_request+0x264>
    default: TU_BREAKPOINT(); return false;
    2546:	2000      	movs	r0, #0
    2548:	e1a3      	b.n	2892 <process_control_request+0x38a>
    TU_VERIFY(tud_vendor_control_xfer_cb);
    254a:	4bbd      	ldr	r3, [pc, #756]	; (2840 <process_control_request+0x338>)
    254c:	2b00      	cmp	r3, #0
    254e:	d100      	bne.n	2552 <process_control_request+0x4a>
    2550:	e1a3      	b.n	289a <process_control_request+0x392>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
    2552:	001e      	movs	r6, r3
    2554:	0018      	movs	r0, r3
    2556:	4bb9      	ldr	r3, [pc, #740]	; (283c <process_control_request+0x334>)
    2558:	4798      	blx	r3
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
    255a:	002a      	movs	r2, r5
    255c:	2101      	movs	r1, #1
    255e:	0020      	movs	r0, r4
    2560:	47b0      	blx	r6
    2562:	e196      	b.n	2892 <process_control_request+0x38a>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
    2564:	2a20      	cmp	r2, #32
    2566:	d00a      	beq.n	257e <process_control_request+0x76>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    2568:	2a00      	cmp	r2, #0
    256a:	d000      	beq.n	256e <process_control_request+0x66>
    256c:	e19b      	b.n	28a6 <process_control_request+0x39e>
      switch ( p_request->bRequest )
    256e:	786b      	ldrb	r3, [r5, #1]
    2570:	2b09      	cmp	r3, #9
    2572:	d900      	bls.n	2576 <process_control_request+0x6e>
    2574:	e199      	b.n	28aa <process_control_request+0x3a2>
    2576:	009b      	lsls	r3, r3, #2
    2578:	4ab2      	ldr	r2, [pc, #712]	; (2844 <process_control_request+0x33c>)
    257a:	58d3      	ldr	r3, [r2, r3]
    257c:	469f      	mov	pc, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    257e:	792b      	ldrb	r3, [r5, #4]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    2580:	2b0f      	cmp	r3, #15
    2582:	d900      	bls.n	2586 <process_control_request+0x7e>
    2584:	e18b      	b.n	289e <process_control_request+0x396>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    2586:	4ab0      	ldr	r2, [pc, #704]	; (2848 <process_control_request+0x340>)
    2588:	18d3      	adds	r3, r2, r3
    258a:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    258c:	4aaf      	ldr	r2, [pc, #700]	; (284c <process_control_request+0x344>)
    258e:	2a00      	cmp	r2, #0
    2590:	d013      	beq.n	25ba <process_control_request+0xb2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    2592:	4aad      	ldr	r2, [pc, #692]	; (2848 <process_control_request+0x340>)
    2594:	7912      	ldrb	r2, [r2, #4]
    2596:	429a      	cmp	r2, r3
    2598:	d90d      	bls.n	25b6 <process_control_request+0xae>
    259a:	005a      	lsls	r2, r3, #1
    259c:	18d3      	adds	r3, r2, r3
    259e:	00da      	lsls	r2, r3, #3
    25a0:	4ba9      	ldr	r3, [pc, #676]	; (2848 <process_control_request+0x340>)
    25a2:	6819      	ldr	r1, [r3, #0]
    25a4:	1889      	adds	r1, r1, r2
        TU_VERIFY(driver);
    25a6:	2900      	cmp	r1, #0
    25a8:	d100      	bne.n	25ac <process_control_request+0xa4>
    25aa:	e17a      	b.n	28a2 <process_control_request+0x39a>
        return invoke_class_control(rhport, driver, p_request);
    25ac:	002a      	movs	r2, r5
    25ae:	0020      	movs	r0, r4
    25b0:	4ba7      	ldr	r3, [pc, #668]	; (2850 <process_control_request+0x348>)
    25b2:	4798      	blx	r3
    25b4:	e16d      	b.n	2892 <process_control_request+0x38a>
    drvid -= _app_driver_count;
    25b6:	1a9b      	subs	r3, r3, r2
    25b8:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    25ba:	2b00      	cmp	r3, #0
    25bc:	d105      	bne.n	25ca <process_control_request+0xc2>
    25be:	005a      	lsls	r2, r3, #1
    25c0:	18d3      	adds	r3, r2, r3
    25c2:	00da      	lsls	r2, r3, #3
    25c4:	49a3      	ldr	r1, [pc, #652]	; (2854 <process_control_request+0x34c>)
    25c6:	1889      	adds	r1, r1, r2
    25c8:	e7ed      	b.n	25a6 <process_control_request+0x9e>
  return NULL;
    25ca:	2100      	movs	r1, #0
    25cc:	e7eb      	b.n	25a6 <process_control_request+0x9e>
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
    25ce:	0028      	movs	r0, r5
    25d0:	4ba1      	ldr	r3, [pc, #644]	; (2858 <process_control_request+0x350>)
    25d2:	4798      	blx	r3
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
    25d4:	78a9      	ldrb	r1, [r5, #2]
    25d6:	0020      	movs	r0, r4
    25d8:	4ba0      	ldr	r3, [pc, #640]	; (285c <process_control_request+0x354>)
    25da:	4798      	blx	r3
          _usbd_dev.addressed = 1;
    25dc:	4a9a      	ldr	r2, [pc, #616]	; (2848 <process_control_request+0x340>)
    25de:	7a13      	ldrb	r3, [r2, #8]
    25e0:	2102      	movs	r1, #2
    25e2:	430b      	orrs	r3, r1
    25e4:	7213      	strb	r3, [r2, #8]
  return true;
    25e6:	2001      	movs	r0, #1
        break;
    25e8:	e153      	b.n	2892 <process_control_request+0x38a>
          uint8_t cfg_num = _usbd_dev.cfg_num;
    25ea:	4b97      	ldr	r3, [pc, #604]	; (2848 <process_control_request+0x340>)
    25ec:	7a5b      	ldrb	r3, [r3, #9]
    25ee:	466a      	mov	r2, sp
    25f0:	3206      	adds	r2, #6
    25f2:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
    25f4:	2301      	movs	r3, #1
    25f6:	0029      	movs	r1, r5
    25f8:	0020      	movs	r0, r4
    25fa:	4c99      	ldr	r4, [pc, #612]	; (2860 <process_control_request+0x358>)
    25fc:	47a0      	blx	r4
  return true;
    25fe:	2001      	movs	r0, #1
        break;
    2600:	e147      	b.n	2892 <process_control_request+0x38a>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
    2602:	78ae      	ldrb	r6, [r5, #2]
          if (_usbd_dev.cfg_num != cfg_num)
    2604:	4b90      	ldr	r3, [pc, #576]	; (2848 <process_control_request+0x340>)
    2606:	7a5b      	ldrb	r3, [r3, #9]
    2608:	b2db      	uxtb	r3, r3
    260a:	429e      	cmp	r6, r3
    260c:	d005      	beq.n	261a <process_control_request+0x112>
            if ( _usbd_dev.cfg_num )
    260e:	4b8e      	ldr	r3, [pc, #568]	; (2848 <process_control_request+0x340>)
    2610:	7a5b      	ldrb	r3, [r3, #9]
    2612:	2b00      	cmp	r3, #0
    2614:	d109      	bne.n	262a <process_control_request+0x122>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    2616:	2e00      	cmp	r6, #0
    2618:	d113      	bne.n	2642 <process_control_request+0x13a>
          _usbd_dev.cfg_num = cfg_num;
    261a:	4b8b      	ldr	r3, [pc, #556]	; (2848 <process_control_request+0x340>)
    261c:	725e      	strb	r6, [r3, #9]
          tud_control_status(rhport, p_request);
    261e:	0029      	movs	r1, r5
    2620:	0020      	movs	r0, r4
    2622:	4b90      	ldr	r3, [pc, #576]	; (2864 <process_control_request+0x35c>)
    2624:	4798      	blx	r3
  return true;
    2626:	2001      	movs	r0, #1
        break;
    2628:	e133      	b.n	2892 <process_control_request+0x38a>
              dcd_edpt_close_all(rhport);
    262a:	0020      	movs	r0, r4
    262c:	4b8e      	ldr	r3, [pc, #568]	; (2868 <process_control_request+0x360>)
    262e:	4798      	blx	r3
              uint8_t const speed = _usbd_dev.speed;
    2630:	4f85      	ldr	r7, [pc, #532]	; (2848 <process_control_request+0x340>)
    2632:	7abb      	ldrb	r3, [r7, #10]
    2634:	4698      	mov	r8, r3
              configuration_reset(rhport);
    2636:	0020      	movs	r0, r4
    2638:	4b8c      	ldr	r3, [pc, #560]	; (286c <process_control_request+0x364>)
    263a:	4798      	blx	r3
              _usbd_dev.speed = speed; // restore speed
    263c:	4643      	mov	r3, r8
    263e:	72bb      	strb	r3, [r7, #10]
    2640:	e7e9      	b.n	2616 <process_control_request+0x10e>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    2642:	0031      	movs	r1, r6
    2644:	0020      	movs	r0, r4
    2646:	4b8a      	ldr	r3, [pc, #552]	; (2870 <process_control_request+0x368>)
    2648:	4798      	blx	r3
    264a:	2800      	cmp	r0, #0
    264c:	d100      	bne.n	2650 <process_control_request+0x148>
    264e:	e120      	b.n	2892 <process_control_request+0x38a>
    2650:	e7e3      	b.n	261a <process_control_request+0x112>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
    2652:	0029      	movs	r1, r5
    2654:	0020      	movs	r0, r4
    2656:	4b87      	ldr	r3, [pc, #540]	; (2874 <process_control_request+0x36c>)
    2658:	4798      	blx	r3
    265a:	e11a      	b.n	2892 <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    265c:	78aa      	ldrb	r2, [r5, #2]
    265e:	78eb      	ldrb	r3, [r5, #3]
    2660:	021b      	lsls	r3, r3, #8
    2662:	4313      	orrs	r3, r2
    2664:	2b01      	cmp	r3, #1
    2666:	d001      	beq.n	266c <process_control_request+0x164>
    2668:	2000      	movs	r0, #0
    266a:	e112      	b.n	2892 <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = true;
    266c:	4a76      	ldr	r2, [pc, #472]	; (2848 <process_control_request+0x340>)
    266e:	7a11      	ldrb	r1, [r2, #8]
    2670:	3307      	adds	r3, #7
    2672:	430b      	orrs	r3, r1
    2674:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    2676:	0029      	movs	r1, r5
    2678:	0020      	movs	r0, r4
    267a:	4b7a      	ldr	r3, [pc, #488]	; (2864 <process_control_request+0x35c>)
    267c:	4798      	blx	r3
  return true;
    267e:	2001      	movs	r0, #1
        break;
    2680:	e107      	b.n	2892 <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    2682:	78aa      	ldrb	r2, [r5, #2]
    2684:	78eb      	ldrb	r3, [r5, #3]
    2686:	021b      	lsls	r3, r3, #8
    2688:	4313      	orrs	r3, r2
    268a:	2b01      	cmp	r3, #1
    268c:	d001      	beq.n	2692 <process_control_request+0x18a>
    268e:	2000      	movs	r0, #0
    2690:	e0ff      	b.n	2892 <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = false;
    2692:	4a6d      	ldr	r2, [pc, #436]	; (2848 <process_control_request+0x340>)
    2694:	7a13      	ldrb	r3, [r2, #8]
    2696:	2108      	movs	r1, #8
    2698:	438b      	bics	r3, r1
    269a:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    269c:	0029      	movs	r1, r5
    269e:	0020      	movs	r0, r4
    26a0:	4b70      	ldr	r3, [pc, #448]	; (2864 <process_control_request+0x35c>)
    26a2:	4798      	blx	r3
  return true;
    26a4:	2001      	movs	r0, #1
        break;
    26a6:	e0f4      	b.n	2892 <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    26a8:	4b67      	ldr	r3, [pc, #412]	; (2848 <process_control_request+0x340>)
    26aa:	7a1a      	ldrb	r2, [r3, #8]
    26ac:	0693      	lsls	r3, r2, #26
    26ae:	d50e      	bpl.n	26ce <process_control_request+0x1c6>
    26b0:	2301      	movs	r3, #1
    26b2:	0712      	lsls	r2, r2, #28
    26b4:	d40d      	bmi.n	26d2 <process_control_request+0x1ca>
    26b6:	2200      	movs	r2, #0
    26b8:	4313      	orrs	r3, r2
    26ba:	466a      	mov	r2, sp
    26bc:	3206      	adds	r2, #6
    26be:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
    26c0:	2302      	movs	r3, #2
    26c2:	0029      	movs	r1, r5
    26c4:	0020      	movs	r0, r4
    26c6:	4c66      	ldr	r4, [pc, #408]	; (2860 <process_control_request+0x358>)
    26c8:	47a0      	blx	r4
  return true;
    26ca:	2001      	movs	r0, #1
        break;
    26cc:	e0e1      	b.n	2892 <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    26ce:	2300      	movs	r3, #0
    26d0:	e7ef      	b.n	26b2 <process_control_request+0x1aa>
    26d2:	2202      	movs	r2, #2
    26d4:	e7f0      	b.n	26b8 <process_control_request+0x1b0>
    26d6:	792b      	ldrb	r3, [r5, #4]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    26d8:	2b0f      	cmp	r3, #15
    26da:	d900      	bls.n	26de <process_control_request+0x1d6>
    26dc:	e0e7      	b.n	28ae <process_control_request+0x3a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    26de:	4a5a      	ldr	r2, [pc, #360]	; (2848 <process_control_request+0x340>)
    26e0:	18d3      	adds	r3, r2, r3
    26e2:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    26e4:	4a59      	ldr	r2, [pc, #356]	; (284c <process_control_request+0x344>)
    26e6:	2a00      	cmp	r2, #0
    26e8:	d02b      	beq.n	2742 <process_control_request+0x23a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    26ea:	4a57      	ldr	r2, [pc, #348]	; (2848 <process_control_request+0x340>)
    26ec:	7912      	ldrb	r2, [r2, #4]
    26ee:	4293      	cmp	r3, r2
    26f0:	d225      	bcs.n	273e <process_control_request+0x236>
    26f2:	005a      	lsls	r2, r3, #1
    26f4:	18d3      	adds	r3, r2, r3
    26f6:	00da      	lsls	r2, r3, #3
    26f8:	4b53      	ldr	r3, [pc, #332]	; (2848 <process_control_request+0x340>)
    26fa:	6819      	ldr	r1, [r3, #0]
    26fc:	1889      	adds	r1, r1, r2
      TU_VERIFY(driver);
    26fe:	2900      	cmp	r1, #0
    2700:	d100      	bne.n	2704 <process_control_request+0x1fc>
    2702:	e0d6      	b.n	28b2 <process_control_request+0x3aa>
      if ( !invoke_class_control(rhport, driver, p_request) )
    2704:	002a      	movs	r2, r5
    2706:	0020      	movs	r0, r4
    2708:	4b51      	ldr	r3, [pc, #324]	; (2850 <process_control_request+0x348>)
    270a:	4798      	blx	r3
    270c:	2800      	cmp	r0, #0
    270e:	d000      	beq.n	2712 <process_control_request+0x20a>
    2710:	e0bf      	b.n	2892 <process_control_request+0x38a>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
    2712:	782b      	ldrb	r3, [r5, #0]
    2714:	2260      	movs	r2, #96	; 0x60
    2716:	421a      	tst	r2, r3
    2718:	d000      	beq.n	271c <process_control_request+0x214>
    271a:	e0ba      	b.n	2892 <process_control_request+0x38a>
        switch(p_request->bRequest)
    271c:	786b      	ldrb	r3, [r5, #1]
    271e:	3b0a      	subs	r3, #10
    2720:	b2db      	uxtb	r3, r3
    2722:	2b01      	cmp	r3, #1
    2724:	d900      	bls.n	2728 <process_control_request+0x220>
    2726:	e0b4      	b.n	2892 <process_control_request+0x38a>
            usbd_control_set_complete_callback(NULL);
    2728:	4b44      	ldr	r3, [pc, #272]	; (283c <process_control_request+0x334>)
    272a:	4798      	blx	r3
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
    272c:	786b      	ldrb	r3, [r5, #1]
    272e:	2b0a      	cmp	r3, #10
    2730:	d011      	beq.n	2756 <process_control_request+0x24e>
              tud_control_status(rhport, p_request);
    2732:	0029      	movs	r1, r5
    2734:	0020      	movs	r0, r4
    2736:	4b4b      	ldr	r3, [pc, #300]	; (2864 <process_control_request+0x35c>)
    2738:	4798      	blx	r3
  return true;
    273a:	2001      	movs	r0, #1
    273c:	e0a9      	b.n	2892 <process_control_request+0x38a>
    drvid -= _app_driver_count;
    273e:	1a9b      	subs	r3, r3, r2
    2740:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    2742:	2b00      	cmp	r3, #0
    2744:	d105      	bne.n	2752 <process_control_request+0x24a>
    2746:	005a      	lsls	r2, r3, #1
    2748:	18d3      	adds	r3, r2, r3
    274a:	00da      	lsls	r2, r3, #3
    274c:	4941      	ldr	r1, [pc, #260]	; (2854 <process_control_request+0x34c>)
    274e:	1889      	adds	r1, r1, r2
    2750:	e7d5      	b.n	26fe <process_control_request+0x1f6>
  return NULL;
    2752:	2100      	movs	r1, #0
    2754:	e7d3      	b.n	26fe <process_control_request+0x1f6>
              uint8_t alternate = 0;
    2756:	466b      	mov	r3, sp
    2758:	1d9a      	adds	r2, r3, #6
    275a:	2300      	movs	r3, #0
    275c:	7013      	strb	r3, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
    275e:	3301      	adds	r3, #1
    2760:	0029      	movs	r1, r5
    2762:	0020      	movs	r0, r4
    2764:	4c3e      	ldr	r4, [pc, #248]	; (2860 <process_control_request+0x358>)
    2766:	47a0      	blx	r4
  return true;
    2768:	2001      	movs	r0, #1
    276a:	e092      	b.n	2892 <process_control_request+0x38a>
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
    276c:	7929      	ldrb	r1, [r5, #4]
    276e:	796b      	ldrb	r3, [r5, #5]
    2770:	021b      	lsls	r3, r3, #8
    2772:	430b      	orrs	r3, r1
    2774:	b2d9      	uxtb	r1, r3
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2776:	207f      	movs	r0, #127	; 0x7f
    2778:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    277a:	09cb      	lsrs	r3, r1, #7
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    277c:	2807      	cmp	r0, #7
    277e:	d900      	bls.n	2782 <process_control_request+0x27a>
    2780:	e099      	b.n	28b6 <process_control_request+0x3ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
    2782:	0040      	lsls	r0, r0, #1
    2784:	4e30      	ldr	r6, [pc, #192]	; (2848 <process_control_request+0x340>)
    2786:	1830      	adds	r0, r6, r0
    2788:	18c3      	adds	r3, r0, r3
    278a:	7edb      	ldrb	r3, [r3, #27]
  if ( usbd_app_driver_get_cb )
    278c:	482f      	ldr	r0, [pc, #188]	; (284c <process_control_request+0x344>)
    278e:	2800      	cmp	r0, #0
    2790:	d014      	beq.n	27bc <process_control_request+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    2792:	7930      	ldrb	r0, [r6, #4]
    2794:	4283      	cmp	r3, r0
    2796:	d20f      	bcs.n	27b8 <process_control_request+0x2b0>
    2798:	0058      	lsls	r0, r3, #1
    279a:	18c3      	adds	r3, r0, r3
    279c:	00d8      	lsls	r0, r3, #3
    279e:	6836      	ldr	r6, [r6, #0]
    27a0:	1836      	adds	r6, r6, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    27a2:	2a00      	cmp	r2, #0
    27a4:	d014      	beq.n	27d0 <process_control_request+0x2c8>
        TU_VERIFY(driver);
    27a6:	2e00      	cmp	r6, #0
    27a8:	d100      	bne.n	27ac <process_control_request+0x2a4>
    27aa:	e086      	b.n	28ba <process_control_request+0x3b2>
        return invoke_class_control(rhport, driver, p_request);
    27ac:	002a      	movs	r2, r5
    27ae:	0031      	movs	r1, r6
    27b0:	0020      	movs	r0, r4
    27b2:	4b27      	ldr	r3, [pc, #156]	; (2850 <process_control_request+0x348>)
    27b4:	4798      	blx	r3
    27b6:	e06c      	b.n	2892 <process_control_request+0x38a>
    drvid -= _app_driver_count;
    27b8:	1a1b      	subs	r3, r3, r0
    27ba:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    27bc:	2b00      	cmp	r3, #0
    27be:	d105      	bne.n	27cc <process_control_request+0x2c4>
    27c0:	0058      	lsls	r0, r3, #1
    27c2:	18c3      	adds	r3, r0, r3
    27c4:	00d8      	lsls	r0, r3, #3
    27c6:	4e23      	ldr	r6, [pc, #140]	; (2854 <process_control_request+0x34c>)
    27c8:	1836      	adds	r6, r6, r0
    27ca:	e7ea      	b.n	27a2 <process_control_request+0x29a>
  return NULL;
    27cc:	2600      	movs	r6, #0
    27ce:	e7e8      	b.n	27a2 <process_control_request+0x29a>
        switch ( p_request->bRequest )
    27d0:	786b      	ldrb	r3, [r5, #1]
    27d2:	2b01      	cmp	r3, #1
    27d4:	d012      	beq.n	27fc <process_control_request+0x2f4>
    27d6:	2b00      	cmp	r3, #0
    27d8:	d003      	beq.n	27e2 <process_control_request+0x2da>
    27da:	2b03      	cmp	r3, #3
    27dc:	d00e      	beq.n	27fc <process_control_request+0x2f4>
          default: TU_BREAKPOINT(); return false;
    27de:	2000      	movs	r0, #0
    27e0:	e057      	b.n	2892 <process_control_request+0x38a>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
    27e2:	0020      	movs	r0, r4
    27e4:	4b24      	ldr	r3, [pc, #144]	; (2878 <process_control_request+0x370>)
    27e6:	4798      	blx	r3
    27e8:	466b      	mov	r3, sp
    27ea:	1d9a      	adds	r2, r3, #6
    27ec:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
    27ee:	2302      	movs	r3, #2
    27f0:	0029      	movs	r1, r5
    27f2:	0020      	movs	r0, r4
    27f4:	4c1a      	ldr	r4, [pc, #104]	; (2860 <process_control_request+0x358>)
    27f6:	47a0      	blx	r4
  return true;
    27f8:	2001      	movs	r0, #1
          break;
    27fa:	e04a      	b.n	2892 <process_control_request+0x38a>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
    27fc:	78a8      	ldrb	r0, [r5, #2]
    27fe:	78ea      	ldrb	r2, [r5, #3]
    2800:	0212      	lsls	r2, r2, #8
    2802:	4302      	orrs	r2, r0
    2804:	d104      	bne.n	2810 <process_control_request+0x308>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
    2806:	2b01      	cmp	r3, #1
    2808:	d013      	beq.n	2832 <process_control_request+0x32a>
                usbd_edpt_stall(rhport, ep_addr);
    280a:	0020      	movs	r0, r4
    280c:	4b1b      	ldr	r3, [pc, #108]	; (287c <process_control_request+0x374>)
    280e:	4798      	blx	r3
            if (driver)
    2810:	2e00      	cmp	r6, #0
    2812:	d054      	beq.n	28be <process_control_request+0x3b6>
              (void) invoke_class_control(rhport, driver, p_request);
    2814:	002a      	movs	r2, r5
    2816:	0031      	movs	r1, r6
    2818:	0020      	movs	r0, r4
    281a:	4b0d      	ldr	r3, [pc, #52]	; (2850 <process_control_request+0x348>)
    281c:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
    281e:	2000      	movs	r0, #0
    2820:	4b06      	ldr	r3, [pc, #24]	; (283c <process_control_request+0x334>)
    2822:	4798      	blx	r3
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    2824:	232c      	movs	r3, #44	; 0x2c
    2826:	4a08      	ldr	r2, [pc, #32]	; (2848 <process_control_request+0x340>)
    2828:	5cd3      	ldrb	r3, [r2, r3]
    282a:	07db      	lsls	r3, r3, #31
    282c:	d52a      	bpl.n	2884 <process_control_request+0x37c>
  return true;
    282e:	2001      	movs	r0, #1
    2830:	e02f      	b.n	2892 <process_control_request+0x38a>
                usbd_edpt_clear_stall(rhport, ep_addr);
    2832:	0020      	movs	r0, r4
    2834:	4b12      	ldr	r3, [pc, #72]	; (2880 <process_control_request+0x378>)
    2836:	4798      	blx	r3
    2838:	e7ea      	b.n	2810 <process_control_request+0x308>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	00002bad 	.word	0x00002bad
    2840:	00000000 	.word	0x00000000
    2844:	00007da0 	.word	0x00007da0
    2848:	20000430 	.word	0x20000430
    284c:	00000000 	.word	0x00000000
    2850:	00001e5d 	.word	0x00001e5d
    2854:	00007dec 	.word	0x00007dec
    2858:	00002bb9 	.word	0x00002bb9
    285c:	00002fb1 	.word	0x00002fb1
    2860:	00002b11 	.word	0x00002b11
    2864:	00002acd 	.word	0x00002acd
    2868:	00002ef1 	.word	0x00002ef1
    286c:	00001dc1 	.word	0x00001dc1
    2870:	00001e7d 	.word	0x00001e7d
    2874:	00001fe9 	.word	0x00001fe9
    2878:	000024ed 	.word	0x000024ed
    287c:	00002455 	.word	0x00002455
    2880:	000024a1 	.word	0x000024a1
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    2884:	0029      	movs	r1, r5
    2886:	0020      	movs	r0, r4
    2888:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <process_control_request+0x3bc>)
    288a:	4798      	blx	r3
  return true;
    288c:	2001      	movs	r0, #1
    288e:	e000      	b.n	2892 <process_control_request+0x38a>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    2890:	2000      	movs	r0, #0
}
    2892:	b002      	add	sp, #8
    2894:	bc04      	pop	{r2}
    2896:	4690      	mov	r8, r2
    2898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_VERIFY(tud_vendor_control_xfer_cb);
    289a:	2000      	movs	r0, #0
    289c:	e7f9      	b.n	2892 <process_control_request+0x38a>
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    289e:	2000      	movs	r0, #0
    28a0:	e7f7      	b.n	2892 <process_control_request+0x38a>
        TU_VERIFY(driver);
    28a2:	2000      	movs	r0, #0
    28a4:	e7f5      	b.n	2892 <process_control_request+0x38a>
        return false;
    28a6:	2000      	movs	r0, #0
    28a8:	e7f3      	b.n	2892 <process_control_request+0x38a>
        default: TU_BREAKPOINT(); return false;
    28aa:	2000      	movs	r0, #0
    28ac:	e7f1      	b.n	2892 <process_control_request+0x38a>
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    28ae:	2000      	movs	r0, #0
    28b0:	e7ef      	b.n	2892 <process_control_request+0x38a>
      TU_VERIFY(driver);
    28b2:	2000      	movs	r0, #0
    28b4:	e7ed      	b.n	2892 <process_control_request+0x38a>
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    28b6:	2000      	movs	r0, #0
    28b8:	e7eb      	b.n	2892 <process_control_request+0x38a>
        TU_VERIFY(driver);
    28ba:	2000      	movs	r0, #0
    28bc:	e7e9      	b.n	2892 <process_control_request+0x38a>
  return true;
    28be:	2001      	movs	r0, #1
    28c0:	e7e7      	b.n	2892 <process_control_request+0x38a>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	00002acd 	.word	0x00002acd

000028c8 <tud_task_ext>:
{
    28c8:	b530      	push	{r4, r5, lr}
    28ca:	b085      	sub	sp, #20
  if ( !tusb_inited() ) return;
    28cc:	4b5b      	ldr	r3, [pc, #364]	; (2a3c <tud_task_ext+0x174>)
    28ce:	4798      	blx	r3
    28d0:	2800      	cmp	r0, #0
    28d2:	d108      	bne.n	28e6 <tud_task_ext+0x1e>
}
    28d4:	b005      	add	sp, #20
    28d6:	bd30      	pop	{r4, r5, pc}
        usbd_reset(event.rhport);
    28d8:	ac01      	add	r4, sp, #4
    28da:	7820      	ldrb	r0, [r4, #0]
    28dc:	4b58      	ldr	r3, [pc, #352]	; (2a40 <tud_task_ext+0x178>)
    28de:	4798      	blx	r3
        _usbd_dev.speed = event.bus_reset.speed;
    28e0:	7922      	ldrb	r2, [r4, #4]
    28e2:	4b58      	ldr	r3, [pc, #352]	; (2a44 <tud_task_ext+0x17c>)
    28e4:	729a      	strb	r2, [r3, #10]
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
    28e6:	4b57      	ldr	r3, [pc, #348]	; (2a44 <tud_task_ext+0x17c>)
    28e8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  qhdl->interrupt_set(false);
    28ea:	002c      	movs	r4, r5
    28ec:	cc08      	ldmia	r4!, {r3}
    28ee:	2000      	movs	r0, #0
    28f0:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
    28f2:	a901      	add	r1, sp, #4
    28f4:	0020      	movs	r0, r4
    28f6:	4b54      	ldr	r3, [pc, #336]	; (2a48 <tud_task_ext+0x180>)
    28f8:	4798      	blx	r3
    28fa:	0004      	movs	r4, r0
  qhdl->interrupt_set(true);
    28fc:	682b      	ldr	r3, [r5, #0]
    28fe:	2001      	movs	r0, #1
    2900:	4798      	blx	r3
    2902:	2c00      	cmp	r4, #0
    2904:	d0e6      	beq.n	28d4 <tud_task_ext+0xc>
    switch ( event.event_id )
    2906:	ab01      	add	r3, sp, #4
    2908:	785b      	ldrb	r3, [r3, #1]
    290a:	2b08      	cmp	r3, #8
    290c:	d8eb      	bhi.n	28e6 <tud_task_ext+0x1e>
    290e:	009b      	lsls	r3, r3, #2
    2910:	4a4e      	ldr	r2, [pc, #312]	; (2a4c <tud_task_ext+0x184>)
    2912:	58d3      	ldr	r3, [r2, r3]
    2914:	469f      	mov	pc, r3
        usbd_reset(event.rhport);
    2916:	ab01      	add	r3, sp, #4
    2918:	7818      	ldrb	r0, [r3, #0]
    291a:	4b49      	ldr	r3, [pc, #292]	; (2a40 <tud_task_ext+0x178>)
    291c:	4798      	blx	r3
        if (tud_umount_cb) tud_umount_cb();
    291e:	4b4c      	ldr	r3, [pc, #304]	; (2a50 <tud_task_ext+0x188>)
    2920:	2b00      	cmp	r3, #0
    2922:	d0e0      	beq.n	28e6 <tud_task_ext+0x1e>
    2924:	4798      	blx	r3
    2926:	e7de      	b.n	28e6 <tud_task_ext+0x1e>
        _usbd_dev.connected = 1;
    2928:	4b46      	ldr	r3, [pc, #280]	; (2a44 <tud_task_ext+0x17c>)
    292a:	7a1a      	ldrb	r2, [r3, #8]
    292c:	2401      	movs	r4, #1
    292e:	2101      	movs	r1, #1
    2930:	430a      	orrs	r2, r1
    2932:	721a      	strb	r2, [r3, #8]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
    2934:	222b      	movs	r2, #43	; 0x2b
    2936:	5c99      	ldrb	r1, [r3, r2]
    2938:	43a1      	bics	r1, r4
    293a:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
    293c:	5c99      	ldrb	r1, [r3, r2]
    293e:	2004      	movs	r0, #4
    2940:	4381      	bics	r1, r0
    2942:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
    2944:	3201      	adds	r2, #1
    2946:	5c99      	ldrb	r1, [r3, r2]
    2948:	43a1      	bics	r1, r4
    294a:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
    294c:	5c99      	ldrb	r1, [r3, r2]
    294e:	4381      	bics	r1, r0
    2950:	5499      	strb	r1, [r3, r2]
        if ( !process_control_request(event.rhport, &event.setup_received) )
    2952:	ab01      	add	r3, sp, #4
    2954:	7818      	ldrb	r0, [r3, #0]
    2956:	a902      	add	r1, sp, #8
    2958:	4b3e      	ldr	r3, [pc, #248]	; (2a54 <tud_task_ext+0x18c>)
    295a:	4798      	blx	r3
    295c:	2800      	cmp	r0, #0
    295e:	d1c2      	bne.n	28e6 <tud_task_ext+0x1e>
          dcd_edpt_stall(event.rhport, 0);
    2960:	ad01      	add	r5, sp, #4
    2962:	7828      	ldrb	r0, [r5, #0]
    2964:	2100      	movs	r1, #0
    2966:	4c3c      	ldr	r4, [pc, #240]	; (2a58 <tud_task_ext+0x190>)
    2968:	47a0      	blx	r4
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
    296a:	7828      	ldrb	r0, [r5, #0]
    296c:	2180      	movs	r1, #128	; 0x80
    296e:	47a0      	blx	r4
    2970:	e7b9      	b.n	28e6 <tud_task_ext+0x1e>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
    2972:	ab01      	add	r3, sp, #4
    2974:	7919      	ldrb	r1, [r3, #4]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2976:	227f      	movs	r2, #127	; 0x7f
    2978:	400a      	ands	r2, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    297a:	09cc      	lsrs	r4, r1, #7
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
    297c:	0050      	lsls	r0, r2, #1
    297e:	4b31      	ldr	r3, [pc, #196]	; (2a44 <tud_task_ext+0x17c>)
    2980:	181b      	adds	r3, r3, r0
    2982:	191b      	adds	r3, r3, r4
    2984:	3328      	adds	r3, #40	; 0x28
    2986:	78d8      	ldrb	r0, [r3, #3]
    2988:	2501      	movs	r5, #1
    298a:	43a8      	bics	r0, r5
    298c:	70d8      	strb	r0, [r3, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
    298e:	78d8      	ldrb	r0, [r3, #3]
    2990:	3503      	adds	r5, #3
    2992:	43a8      	bics	r0, r5
    2994:	70d8      	strb	r0, [r3, #3]
        if ( 0 == epnum )
    2996:	2a00      	cmp	r2, #0
    2998:	d012      	beq.n	29c0 <tud_task_ext+0xf8>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
    299a:	0052      	lsls	r2, r2, #1
    299c:	4b29      	ldr	r3, [pc, #164]	; (2a44 <tud_task_ext+0x17c>)
    299e:	189a      	adds	r2, r3, r2
    29a0:	1912      	adds	r2, r2, r4
    29a2:	7ed3      	ldrb	r3, [r2, #27]
  if ( usbd_app_driver_get_cb )
    29a4:	4a2d      	ldr	r2, [pc, #180]	; (2a5c <tud_task_ext+0x194>)
    29a6:	2a00      	cmp	r2, #0
    29a8:	d013      	beq.n	29d2 <tud_task_ext+0x10a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    29aa:	4a26      	ldr	r2, [pc, #152]	; (2a44 <tud_task_ext+0x17c>)
    29ac:	7912      	ldrb	r2, [r2, #4]
    29ae:	4293      	cmp	r3, r2
    29b0:	d20d      	bcs.n	29ce <tud_task_ext+0x106>
    29b2:	005a      	lsls	r2, r3, #1
    29b4:	18d3      	adds	r3, r2, r3
    29b6:	00da      	lsls	r2, r3, #3
    29b8:	4b22      	ldr	r3, [pc, #136]	; (2a44 <tud_task_ext+0x17c>)
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	189b      	adds	r3, r3, r2
    29be:	e00f      	b.n	29e0 <tud_task_ext+0x118>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    29c0:	a801      	add	r0, sp, #4
    29c2:	7942      	ldrb	r2, [r0, #5]
    29c4:	9b03      	ldr	r3, [sp, #12]
    29c6:	7800      	ldrb	r0, [r0, #0]
    29c8:	4c25      	ldr	r4, [pc, #148]	; (2a60 <tud_task_ext+0x198>)
    29ca:	47a0      	blx	r4
    29cc:	e78b      	b.n	28e6 <tud_task_ext+0x1e>
    drvid -= _app_driver_count;
    29ce:	1a9b      	subs	r3, r3, r2
    29d0:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    29d2:	2b00      	cmp	r3, #0
    29d4:	d10e      	bne.n	29f4 <tud_task_ext+0x12c>
    29d6:	005a      	lsls	r2, r3, #1
    29d8:	18d3      	adds	r3, r2, r3
    29da:	00da      	lsls	r2, r3, #3
    29dc:	4b21      	ldr	r3, [pc, #132]	; (2a64 <tud_task_ext+0x19c>)
    29de:	189b      	adds	r3, r3, r2
          TU_ASSERT(driver, );
    29e0:	2b00      	cmp	r3, #0
    29e2:	d100      	bne.n	29e6 <tud_task_ext+0x11e>
    29e4:	e776      	b.n	28d4 <tud_task_ext+0xc>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    29e6:	691c      	ldr	r4, [r3, #16]
    29e8:	a801      	add	r0, sp, #4
    29ea:	7942      	ldrb	r2, [r0, #5]
    29ec:	9b03      	ldr	r3, [sp, #12]
    29ee:	7800      	ldrb	r0, [r0, #0]
    29f0:	47a0      	blx	r4
    29f2:	e778      	b.n	28e6 <tud_task_ext+0x1e>
  return NULL;
    29f4:	2300      	movs	r3, #0
    29f6:	e7f3      	b.n	29e0 <tud_task_ext+0x118>
        if ( _usbd_dev.connected )
    29f8:	4b12      	ldr	r3, [pc, #72]	; (2a44 <tud_task_ext+0x17c>)
    29fa:	7a1b      	ldrb	r3, [r3, #8]
    29fc:	07db      	lsls	r3, r3, #31
    29fe:	d400      	bmi.n	2a02 <tud_task_ext+0x13a>
    2a00:	e771      	b.n	28e6 <tud_task_ext+0x1e>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
    2a02:	4b19      	ldr	r3, [pc, #100]	; (2a68 <tud_task_ext+0x1a0>)
    2a04:	2b00      	cmp	r3, #0
    2a06:	d100      	bne.n	2a0a <tud_task_ext+0x142>
    2a08:	e76d      	b.n	28e6 <tud_task_ext+0x1e>
    2a0a:	4b0e      	ldr	r3, [pc, #56]	; (2a44 <tud_task_ext+0x17c>)
    2a0c:	7a18      	ldrb	r0, [r3, #8]
    2a0e:	0700      	lsls	r0, r0, #28
    2a10:	0fc0      	lsrs	r0, r0, #31
    2a12:	4b15      	ldr	r3, [pc, #84]	; (2a68 <tud_task_ext+0x1a0>)
    2a14:	4798      	blx	r3
    2a16:	e766      	b.n	28e6 <tud_task_ext+0x1e>
        if ( _usbd_dev.connected )
    2a18:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <tud_task_ext+0x17c>)
    2a1a:	7a1b      	ldrb	r3, [r3, #8]
    2a1c:	07db      	lsls	r3, r3, #31
    2a1e:	d400      	bmi.n	2a22 <tud_task_ext+0x15a>
    2a20:	e761      	b.n	28e6 <tud_task_ext+0x1e>
          if (tud_resume_cb) tud_resume_cb();
    2a22:	4b12      	ldr	r3, [pc, #72]	; (2a6c <tud_task_ext+0x1a4>)
    2a24:	2b00      	cmp	r3, #0
    2a26:	d100      	bne.n	2a2a <tud_task_ext+0x162>
    2a28:	e75d      	b.n	28e6 <tud_task_ext+0x1e>
    2a2a:	4798      	blx	r3
    2a2c:	e75b      	b.n	28e6 <tud_task_ext+0x1e>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
    2a2e:	9b02      	ldr	r3, [sp, #8]
    2a30:	2b00      	cmp	r3, #0
    2a32:	d100      	bne.n	2a36 <tud_task_ext+0x16e>
    2a34:	e757      	b.n	28e6 <tud_task_ext+0x1e>
    2a36:	9803      	ldr	r0, [sp, #12]
    2a38:	4798      	blx	r3
  {
    2a3a:	e754      	b.n	28e6 <tud_task_ext+0x1e>
    2a3c:	000031f5 	.word	0x000031f5
    2a40:	00001e49 	.word	0x00001e49
    2a44:	20000430 	.word	0x20000430
    2a48:	00001d19 	.word	0x00001d19
    2a4c:	00007dc8 	.word	0x00007dc8
    2a50:	00000239 	.word	0x00000239
    2a54:	00002509 	.word	0x00002509
    2a58:	00002fd1 	.word	0x00002fd1
    2a5c:	00000000 	.word	0x00000000
    2a60:	00002bdd 	.word	0x00002bdd
    2a64:	00007dec 	.word	0x00007dec
    2a68:	00000245 	.word	0x00000245
    2a6c:	00000255 	.word	0x00000255

00002a70 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
    2a70:	b570      	push	{r4, r5, r6, lr}
    2a72:	0004      	movs	r4, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
    2a74:	4b12      	ldr	r3, [pc, #72]	; (2ac0 <_data_stage_xact+0x50>)
    2a76:	3340      	adds	r3, #64	; 0x40
    2a78:	8999      	ldrh	r1, [r3, #12]
    2a7a:	89db      	ldrh	r3, [r3, #14]
    2a7c:	1ac9      	subs	r1, r1, r3
    2a7e:	b289      	uxth	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
    2a80:	1c0d      	adds	r5, r1, #0
    2a82:	2940      	cmp	r1, #64	; 0x40
    2a84:	d900      	bls.n	2a88 <_data_stage_xact+0x18>
    2a86:	2540      	movs	r5, #64	; 0x40
    2a88:	b2ad      	uxth	r5, r5

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
    2a8a:	2340      	movs	r3, #64	; 0x40
    2a8c:	4a0c      	ldr	r2, [pc, #48]	; (2ac0 <_data_stage_xact+0x50>)
    2a8e:	56d3      	ldrsb	r3, [r2, r3]
    2a90:	2b00      	cmp	r3, #0
    2a92:	db08      	blt.n	2aa6 <_data_stage_xact+0x36>
  uint8_t ep_addr = EDPT_CTRL_OUT;
    2a94:	2100      	movs	r1, #0
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    2a96:	2d00      	cmp	r5, #0
    2a98:	d110      	bne.n	2abc <_data_stage_xact+0x4c>
    2a9a:	2200      	movs	r2, #0
    2a9c:	002b      	movs	r3, r5
    2a9e:	0020      	movs	r0, r4
    2aa0:	4c08      	ldr	r4, [pc, #32]	; (2ac4 <_data_stage_xact+0x54>)
    2aa2:	47a0      	blx	r4
}
    2aa4:	bd70      	pop	{r4, r5, r6, pc}
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    2aa6:	2d00      	cmp	r5, #0
    2aa8:	d101      	bne.n	2aae <_data_stage_xact+0x3e>
    ep_addr = EDPT_CTRL_IN;
    2aaa:	2180      	movs	r1, #128	; 0x80
    2aac:	e7f3      	b.n	2a96 <_data_stage_xact+0x26>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    2aae:	0010      	movs	r0, r2
    2ab0:	002a      	movs	r2, r5
    2ab2:	6c81      	ldr	r1, [r0, #72]	; 0x48
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <_data_stage_xact+0x58>)
    2ab6:	4798      	blx	r3
    ep_addr = EDPT_CTRL_IN;
    2ab8:	2180      	movs	r1, #128	; 0x80
    2aba:	e7ec      	b.n	2a96 <_data_stage_xact+0x26>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    2abc:	4a00      	ldr	r2, [pc, #0]	; (2ac0 <_data_stage_xact+0x50>)
    2abe:	e7ed      	b.n	2a9c <_data_stage_xact+0x2c>
    2ac0:	20000470 	.word	0x20000470
    2ac4:	000023bd 	.word	0x000023bd
    2ac8:	00005a61 	.word	0x00005a61

00002acc <tud_control_status>:
{
    2acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ace:	0006      	movs	r6, r0
    2ad0:	000d      	movs	r5, r1
  _ctrl_xfer.request       = (*request);
    2ad2:	4f0c      	ldr	r7, [pc, #48]	; (2b04 <tud_control_status+0x38>)
    2ad4:	003c      	movs	r4, r7
    2ad6:	3440      	adds	r4, #64	; 0x40
    2ad8:	2208      	movs	r2, #8
    2ada:	0020      	movs	r0, r4
    2adc:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <tud_control_status+0x3c>)
    2ade:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    2ae0:	2300      	movs	r3, #0
    2ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    2ae4:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    2ae6:	81a3      	strh	r3, [r4, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2ae8:	2300      	movs	r3, #0
    2aea:	56eb      	ldrsb	r3, [r5, r3]
    2aec:	2b00      	cmp	r3, #0
    2aee:	db06      	blt.n	2afe <tud_control_status+0x32>
    2af0:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    2af2:	2300      	movs	r3, #0
    2af4:	2200      	movs	r2, #0
    2af6:	0030      	movs	r0, r6
    2af8:	4c04      	ldr	r4, [pc, #16]	; (2b0c <tud_control_status+0x40>)
    2afa:	47a0      	blx	r4
}
    2afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2afe:	2100      	movs	r1, #0
    2b00:	e7f7      	b.n	2af2 <tud_control_status+0x26>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	20000470 	.word	0x20000470
    2b08:	00005a61 	.word	0x00005a61
    2b0c:	000023bd 	.word	0x000023bd

00002b10 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	b083      	sub	sp, #12
    2b14:	9001      	str	r0, [sp, #4]
    2b16:	000e      	movs	r6, r1
    2b18:	0017      	movs	r7, r2
    2b1a:	9300      	str	r3, [sp, #0]
  _ctrl_xfer.request       = (*request);
    2b1c:	4c19      	ldr	r4, [pc, #100]	; (2b84 <tud_control_xfer+0x74>)
    2b1e:	0025      	movs	r5, r4
    2b20:	3540      	adds	r5, #64	; 0x40
    2b22:	2208      	movs	r2, #8
    2b24:	0028      	movs	r0, r5
    2b26:	4b18      	ldr	r3, [pc, #96]	; (2b88 <tud_control_xfer+0x78>)
    2b28:	4798      	blx	r3
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
    2b2a:	64a7      	str	r7, [r4, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0U;
    2b2c:	2300      	movs	r3, #0
    2b2e:	81eb      	strh	r3, [r5, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
    2b30:	79b2      	ldrb	r2, [r6, #6]
    2b32:	79f3      	ldrb	r3, [r6, #7]
    2b34:	021b      	lsls	r3, r3, #8
    2b36:	4313      	orrs	r3, r2
    2b38:	1c1a      	adds	r2, r3, #0
    2b3a:	9800      	ldr	r0, [sp, #0]
    2b3c:	4283      	cmp	r3, r0
    2b3e:	d900      	bls.n	2b42 <tud_control_xfer+0x32>
    2b40:	1c02      	adds	r2, r0, #0
    2b42:	b291      	uxth	r1, r2
    2b44:	4b0f      	ldr	r3, [pc, #60]	; (2b84 <tud_control_xfer+0x74>)
    2b46:	3340      	adds	r3, #64	; 0x40
    2b48:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
    2b4a:	79b2      	ldrb	r2, [r6, #6]
    2b4c:	79f3      	ldrb	r3, [r6, #7]
    2b4e:	021b      	lsls	r3, r3, #8
    2b50:	4313      	orrs	r3, r2
    2b52:	d007      	beq.n	2b64 <tud_control_xfer+0x54>
  {
    if(_ctrl_xfer.data_len > 0U)
    2b54:	2900      	cmp	r1, #0
    2b56:	d001      	beq.n	2b5c <tud_control_xfer+0x4c>
    {
      TU_ASSERT(buffer);
    2b58:	2f00      	cmp	r7, #0
    2b5a:	d011      	beq.n	2b80 <tud_control_xfer+0x70>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
    2b5c:	9801      	ldr	r0, [sp, #4]
    2b5e:	4b0b      	ldr	r3, [pc, #44]	; (2b8c <tud_control_xfer+0x7c>)
    2b60:	4798      	blx	r3
    2b62:	e009      	b.n	2b78 <tud_control_xfer+0x68>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2b64:	2300      	movs	r3, #0
    2b66:	56f3      	ldrsb	r3, [r6, r3]
    2b68:	2b00      	cmp	r3, #0
    2b6a:	db07      	blt.n	2b7c <tud_control_xfer+0x6c>
    2b6c:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    2b6e:	2300      	movs	r3, #0
    2b70:	2200      	movs	r2, #0
    2b72:	9801      	ldr	r0, [sp, #4]
    2b74:	4c06      	ldr	r4, [pc, #24]	; (2b90 <tud_control_xfer+0x80>)
    2b76:	47a0      	blx	r4
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
    2b78:	b003      	add	sp, #12
    2b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2b7c:	2100      	movs	r1, #0
    2b7e:	e7f6      	b.n	2b6e <tud_control_xfer+0x5e>
      TU_ASSERT(buffer);
    2b80:	2000      	movs	r0, #0
    2b82:	e7f9      	b.n	2b78 <tud_control_xfer+0x68>
    2b84:	20000470 	.word	0x20000470
    2b88:	00005a61 	.word	0x00005a61
    2b8c:	00002a71 	.word	0x00002a71
    2b90:	000023bd 	.word	0x000023bd

00002b94 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
    2b94:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
    2b96:	2214      	movs	r2, #20
    2b98:	2100      	movs	r1, #0
    2b9a:	4802      	ldr	r0, [pc, #8]	; (2ba4 <usbd_control_reset+0x10>)
    2b9c:	3040      	adds	r0, #64	; 0x40
    2b9e:	4b02      	ldr	r3, [pc, #8]	; (2ba8 <usbd_control_reset+0x14>)
    2ba0:	4798      	blx	r3
}
    2ba2:	bd10      	pop	{r4, pc}
    2ba4:	20000470 	.word	0x20000470
    2ba8:	00005a73 	.word	0x00005a73

00002bac <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
    2bac:	4b01      	ldr	r3, [pc, #4]	; (2bb4 <usbd_control_set_complete_callback+0x8>)
    2bae:	6518      	str	r0, [r3, #80]	; 0x50
}
    2bb0:	4770      	bx	lr
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	20000470 	.word	0x20000470

00002bb8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
    2bbc:	4d05      	ldr	r5, [pc, #20]	; (2bd4 <usbd_control_set_request+0x1c>)
    2bbe:	002c      	movs	r4, r5
    2bc0:	3440      	adds	r4, #64	; 0x40
    2bc2:	2208      	movs	r2, #8
    2bc4:	0020      	movs	r0, r4
    2bc6:	4b04      	ldr	r3, [pc, #16]	; (2bd8 <usbd_control_set_request+0x20>)
    2bc8:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    2bca:	2300      	movs	r3, #0
    2bcc:	64ab      	str	r3, [r5, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    2bce:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    2bd0:	81a3      	strh	r3, [r4, #12]
}
    2bd2:	bd70      	pop	{r4, r5, r6, pc}
    2bd4:	20000470 	.word	0x20000470
    2bd8:	00005a61 	.word	0x00005a61

00002bdc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
    2bdc:	b570      	push	{r4, r5, r6, lr}
    2bde:	0004      	movs	r4, r0
    2be0:	001d      	movs	r5, r3
    2be2:	09c9      	lsrs	r1, r1, #7
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
    2be4:	2340      	movs	r3, #64	; 0x40
    2be6:	4a31      	ldr	r2, [pc, #196]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2be8:	5cd3      	ldrb	r3, [r2, r3]
    2bea:	09db      	lsrs	r3, r3, #7
    2bec:	428b      	cmp	r3, r1
    2bee:	d012      	beq.n	2c16 <usbd_control_xfer_cb+0x3a>
  {
    TU_ASSERT(0 == xferred_bytes);
    2bf0:	2d00      	cmp	r5, #0
    2bf2:	d155      	bne.n	2ca0 <usbd_control_xfer_cb+0xc4>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
    2bf4:	4b2e      	ldr	r3, [pc, #184]	; (2cb0 <usbd_control_xfer_cb+0xd4>)
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d002      	beq.n	2c00 <usbd_control_xfer_cb+0x24>
    2bfa:	0011      	movs	r1, r2
    2bfc:	3140      	adds	r1, #64	; 0x40
    2bfe:	4798      	blx	r3

    if (_ctrl_xfer.complete_cb)
    2c00:	4b2a      	ldr	r3, [pc, #168]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2c04:	2b00      	cmp	r3, #0
    2c06:	d04d      	beq.n	2ca4 <usbd_control_xfer_cb+0xc8>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
    2c08:	4a28      	ldr	r2, [pc, #160]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c0a:	3240      	adds	r2, #64	; 0x40
    2c0c:	2103      	movs	r1, #3
    2c0e:	0020      	movs	r0, r4
    2c10:	4798      	blx	r3
    }

    return true;
    2c12:	2001      	movs	r0, #1
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
    2c14:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
    2c16:	2340      	movs	r3, #64	; 0x40
    2c18:	4a24      	ldr	r2, [pc, #144]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c1a:	56d3      	ldrsb	r3, [r2, r3]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	db07      	blt.n	2c30 <usbd_control_xfer_cb+0x54>
    TU_VERIFY(_ctrl_xfer.buffer);
    2c20:	0013      	movs	r3, r2
    2c22:	6c90      	ldr	r0, [r2, #72]	; 0x48
    2c24:	2800      	cmp	r0, #0
    2c26:	d03f      	beq.n	2ca8 <usbd_control_xfer_cb+0xcc>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
    2c28:	002a      	movs	r2, r5
    2c2a:	0019      	movs	r1, r3
    2c2c:	4b21      	ldr	r3, [pc, #132]	; (2cb4 <usbd_control_xfer_cb+0xd8>)
    2c2e:	4798      	blx	r3
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
    2c30:	b2aa      	uxth	r2, r5
    2c32:	481e      	ldr	r0, [pc, #120]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c34:	0001      	movs	r1, r0
    2c36:	3140      	adds	r1, #64	; 0x40
    2c38:	89cb      	ldrh	r3, [r1, #14]
    2c3a:	18d3      	adds	r3, r2, r3
    2c3c:	b29b      	uxth	r3, r3
    2c3e:	81cb      	strh	r3, [r1, #14]
  _ctrl_xfer.buffer += xferred_bytes;
    2c40:	6c82      	ldr	r2, [r0, #72]	; 0x48
    2c42:	1952      	adds	r2, r2, r5
    2c44:	6482      	str	r2, [r0, #72]	; 0x48
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
    2c46:	88ca      	ldrh	r2, [r1, #6]
    2c48:	4293      	cmp	r3, r2
    2c4a:	d001      	beq.n	2c50 <usbd_control_xfer_cb+0x74>
    2c4c:	2d3f      	cmp	r5, #63	; 0x3f
    2c4e:	d823      	bhi.n	2c98 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
    2c50:	4b16      	ldr	r3, [pc, #88]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2c54:	2b00      	cmp	r3, #0
    2c56:	d012      	beq.n	2c7e <usbd_control_xfer_cb+0xa2>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
    2c58:	4a14      	ldr	r2, [pc, #80]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c5a:	3240      	adds	r2, #64	; 0x40
    2c5c:	2102      	movs	r1, #2
    2c5e:	0020      	movs	r0, r4
    2c60:	4798      	blx	r3
    if ( is_ok )
    2c62:	2800      	cmp	r0, #0
    2c64:	d00f      	beq.n	2c86 <usbd_control_xfer_cb+0xaa>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2c66:	2340      	movs	r3, #64	; 0x40
    2c68:	4a10      	ldr	r2, [pc, #64]	; (2cac <usbd_control_xfer_cb+0xd0>)
    2c6a:	56d3      	ldrsb	r3, [r2, r3]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	db08      	blt.n	2c82 <usbd_control_xfer_cb+0xa6>
    2c70:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    2c72:	2300      	movs	r3, #0
    2c74:	2200      	movs	r2, #0
    2c76:	0020      	movs	r0, r4
    2c78:	4c0f      	ldr	r4, [pc, #60]	; (2cb8 <usbd_control_xfer_cb+0xdc>)
    2c7a:	47a0      	blx	r4
    2c7c:	e7ca      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    bool is_ok = true;
    2c7e:	2001      	movs	r0, #1
    2c80:	e7ef      	b.n	2c62 <usbd_control_xfer_cb+0x86>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2c82:	2100      	movs	r1, #0
    2c84:	e7f5      	b.n	2c72 <usbd_control_xfer_cb+0x96>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
    2c86:	2100      	movs	r1, #0
    2c88:	0020      	movs	r0, r4
    2c8a:	4d0c      	ldr	r5, [pc, #48]	; (2cbc <usbd_control_xfer_cb+0xe0>)
    2c8c:	47a8      	blx	r5
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
    2c8e:	2180      	movs	r1, #128	; 0x80
    2c90:	0020      	movs	r0, r4
    2c92:	47a8      	blx	r5
  return true;
    2c94:	2001      	movs	r0, #1
    2c96:	e7bd      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    TU_ASSERT( _data_stage_xact(rhport) );
    2c98:	0020      	movs	r0, r4
    2c9a:	4b09      	ldr	r3, [pc, #36]	; (2cc0 <usbd_control_xfer_cb+0xe4>)
    2c9c:	4798      	blx	r3
    2c9e:	e7b9      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    TU_ASSERT(0 == xferred_bytes);
    2ca0:	2000      	movs	r0, #0
    2ca2:	e7b7      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    return true;
    2ca4:	2001      	movs	r0, #1
    2ca6:	e7b5      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    TU_VERIFY(_ctrl_xfer.buffer);
    2ca8:	2000      	movs	r0, #0
    2caa:	e7b3      	b.n	2c14 <usbd_control_xfer_cb+0x38>
    2cac:	20000470 	.word	0x20000470
    2cb0:	00002dd9 	.word	0x00002dd9
    2cb4:	00005a61 	.word	0x00005a61
    2cb8:	000023bd 	.word	0x000023bd
    2cbc:	00002fd1 	.word	0x00002fd1
    2cc0:	00002a71 	.word	0x00002a71

00002cc4 <bus_reset>:
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
}

// Setup the control endpoint 0.
static void bus_reset(void)
{
    2cc4:	b510      	push	{r4, lr}
  // Max size of packets is 64 bytes.
  UsbDeviceDescBank* bank_out = &sram_registers[0][TUSB_DIR_OUT];
  bank_out->PCKSIZE.bit.SIZE = 0x3;
    2cc6:	4b10      	ldr	r3, [pc, #64]	; (2d08 <bus_reset+0x44>)
    2cc8:	6858      	ldr	r0, [r3, #4]
    2cca:	4c10      	ldr	r4, [pc, #64]	; (2d0c <bus_reset+0x48>)
    2ccc:	4020      	ands	r0, r4
    2cce:	22c0      	movs	r2, #192	; 0xc0
    2cd0:	0592      	lsls	r2, r2, #22
    2cd2:	0001      	movs	r1, r0
    2cd4:	4311      	orrs	r1, r2
    2cd6:	6059      	str	r1, [r3, #4]
  UsbDeviceDescBank* bank_in = &sram_registers[0][TUSB_DIR_IN];
  bank_in->PCKSIZE.bit.SIZE = 0x3;
    2cd8:	6959      	ldr	r1, [r3, #20]
    2cda:	4021      	ands	r1, r4
    2cdc:	430a      	orrs	r2, r1
    2cde:	615a      	str	r2, [r3, #20]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[0];
  ep->EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0x1) | USB_DEVICE_EPCFG_EPTYPE1(0x1);
    2ce0:	4a0b      	ldr	r2, [pc, #44]	; (2d10 <bus_reset+0x4c>)
    2ce2:	2111      	movs	r1, #17
    2ce4:	7011      	strb	r1, [r2, #0]
  ep->EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1 | USB_DEVICE_EPINTENSET_RXSTP;
    2ce6:	3102      	adds	r1, #2
    2ce8:	7251      	strb	r1, [r2, #9]
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2cea:	4a0a      	ldr	r2, [pc, #40]	; (2d14 <bus_reset+0x50>)
    2cec:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2cee:	6859      	ldr	r1, [r3, #4]
    2cf0:	4a09      	ldr	r2, [pc, #36]	; (2d18 <bus_reset+0x54>)
    2cf2:	4011      	ands	r1, r2
    2cf4:	2280      	movs	r2, #128	; 0x80
    2cf6:	0292      	lsls	r2, r2, #10
    2cf8:	430a      	orrs	r2, r1
    2cfa:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2cfc:	685a      	ldr	r2, [r3, #4]
    2cfe:	0b92      	lsrs	r2, r2, #14
    2d00:	0391      	lsls	r1, r2, #14
    2d02:	6059      	str	r1, [r3, #4]

  // Prepare for setup packet
  prepare_setup();
}
    2d04:	bd10      	pop	{r4, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	200004c4 	.word	0x200004c4
    2d0c:	8fffffff 	.word	0x8fffffff
    2d10:	41005100 	.word	0x41005100
    2d14:	200005c4 	.word	0x200005c4
    2d18:	f0003fff 	.word	0xf0003fff

00002d1c <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
    2d1c:	b530      	push	{r4, r5, lr}
  (void) rhport;

  // Reset to get in a clean state.
  USB->DEVICE.CTRLA.bit.SWRST = true;
    2d1e:	4a21      	ldr	r2, [pc, #132]	; (2da4 <dcd_init+0x88>)
    2d20:	7813      	ldrb	r3, [r2, #0]
    2d22:	2101      	movs	r1, #1
    2d24:	430b      	orrs	r3, r1
    2d26:	7013      	strb	r3, [r2, #0]
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 0) {}
    2d28:	4b1e      	ldr	r3, [pc, #120]	; (2da4 <dcd_init+0x88>)
    2d2a:	789b      	ldrb	r3, [r3, #2]
    2d2c:	07db      	lsls	r3, r3, #31
    2d2e:	d5fb      	bpl.n	2d28 <dcd_init+0xc>
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 1) {}
    2d30:	4b1c      	ldr	r3, [pc, #112]	; (2da4 <dcd_init+0x88>)
    2d32:	789b      	ldrb	r3, [r3, #2]
    2d34:	07db      	lsls	r3, r3, #31
    2d36:	d4fb      	bmi.n	2d30 <dcd_init+0x14>

  USB->DEVICE.PADCAL.bit.TRANSP = (*((uint32_t*) USB_FUSES_TRANSP_ADDR) & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2d38:	4b1b      	ldr	r3, [pc, #108]	; (2da8 <dcd_init+0x8c>)
    2d3a:	6819      	ldr	r1, [r3, #0]
    2d3c:	0c88      	lsrs	r0, r1, #18
    2d3e:	221f      	movs	r2, #31
    2d40:	4010      	ands	r0, r2
    2d42:	4b18      	ldr	r3, [pc, #96]	; (2da4 <dcd_init+0x88>)
    2d44:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    2d46:	251f      	movs	r5, #31
    2d48:	43ac      	bics	r4, r5
    2d4a:	4320      	orrs	r0, r4
    2d4c:	8518      	strh	r0, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRANSN = (*((uint32_t*) USB_FUSES_TRANSN_ADDR) & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2d4e:	0b4c      	lsrs	r4, r1, #13
    2d50:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2d52:	4022      	ands	r2, r4
    2d54:	0192      	lsls	r2, r2, #6
    2d56:	4c15      	ldr	r4, [pc, #84]	; (2dac <dcd_init+0x90>)
    2d58:	4020      	ands	r0, r4
    2d5a:	4302      	orrs	r2, r0
    2d5c:	851a      	strh	r2, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRIM   = (*((uint32_t*) USB_FUSES_TRIM_ADDR) & USB_FUSES_TRIM_Msk) >> USB_FUSES_TRIM_Pos;
    2d5e:	0dc8      	lsrs	r0, r1, #23
    2d60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2d62:	2107      	movs	r1, #7
    2d64:	4001      	ands	r1, r0
    2d66:	0309      	lsls	r1, r1, #12
    2d68:	4811      	ldr	r0, [pc, #68]	; (2db0 <dcd_init+0x94>)
    2d6a:	4002      	ands	r2, r0
    2d6c:	430a      	orrs	r2, r1
    2d6e:	851a      	strh	r2, [r3, #40]	; 0x28

  USB->DEVICE.QOSCTRL.bit.CQOS = 3; // High Quality
    2d70:	78da      	ldrb	r2, [r3, #3]
    2d72:	2103      	movs	r1, #3
    2d74:	430a      	orrs	r2, r1
    2d76:	70da      	strb	r2, [r3, #3]
  USB->DEVICE.QOSCTRL.bit.DQOS = 3; // High Quality
    2d78:	78da      	ldrb	r2, [r3, #3]
    2d7a:	210c      	movs	r1, #12
    2d7c:	430a      	orrs	r2, r1
    2d7e:	70da      	strb	r2, [r3, #3]

  // Configure registers
  USB->DEVICE.DESCADD.reg = (uint32_t) &sram_registers;
    2d80:	4a0c      	ldr	r2, [pc, #48]	; (2db4 <dcd_init+0x98>)
    2d82:	625a      	str	r2, [r3, #36]	; 0x24
  USB->DEVICE.CTRLB.reg = USB_DEVICE_CTRLB_SPDCONF_FS;
    2d84:	2200      	movs	r2, #0
    2d86:	811a      	strh	r2, [r3, #8]
  USB->DEVICE.CTRLA.reg = USB_CTRLA_MODE_DEVICE | USB_CTRLA_ENABLE | USB_CTRLA_RUNSTDBY;
    2d88:	3206      	adds	r2, #6
    2d8a:	701a      	strb	r2, [r3, #0]
  while (USB->DEVICE.SYNCBUSY.bit.ENABLE == 1) {}
    2d8c:	4b05      	ldr	r3, [pc, #20]	; (2da4 <dcd_init+0x88>)
    2d8e:	789b      	ldrb	r3, [r3, #2]
    2d90:	079b      	lsls	r3, r3, #30
    2d92:	d4fb      	bmi.n	2d8c <dcd_init+0x70>

  USB->DEVICE.INTFLAG.reg |= USB->DEVICE.INTFLAG.reg; // clear pending
    2d94:	4b03      	ldr	r3, [pc, #12]	; (2da4 <dcd_init+0x88>)
    2d96:	8b99      	ldrh	r1, [r3, #28]
    2d98:	8b9a      	ldrh	r2, [r3, #28]
    2d9a:	430a      	orrs	r2, r1
    2d9c:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = /* USB_DEVICE_INTENSET_SOF | */ USB_DEVICE_INTENSET_EORST;
    2d9e:	2208      	movs	r2, #8
    2da0:	831a      	strh	r2, [r3, #24]
}
    2da2:	bd30      	pop	{r4, r5, pc}
    2da4:	41005000 	.word	0x41005000
    2da8:	00806024 	.word	0x00806024
    2dac:	fffff83f 	.word	0xfffff83f
    2db0:	ffff8fff 	.word	0xffff8fff
    2db4:	200004c4 	.word	0x200004c4

00002db8 <dcd_int_enable>:
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2db8:	2280      	movs	r2, #128	; 0x80
    2dba:	4b01      	ldr	r3, [pc, #4]	; (2dc0 <dcd_int_enable+0x8>)
    2dbc:	601a      	str	r2, [r3, #0]

void dcd_int_enable(uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(USB_IRQn);
}
    2dbe:	4770      	bx	lr
    2dc0:	e000e100 	.word	0xe000e100

00002dc4 <dcd_int_disable>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dc4:	2380      	movs	r3, #128	; 0x80
    2dc6:	4a03      	ldr	r2, [pc, #12]	; (2dd4 <dcd_int_disable+0x10>)
    2dc8:	50d3      	str	r3, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2dca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dce:	f3bf 8f6f 	isb	sy

void dcd_int_disable(uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(USB_IRQn);
}
    2dd2:	4770      	bx	lr
    2dd4:	e000e100 	.word	0xe000e100

00002dd8 <dcd_edpt0_status_complete>:
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
    2dd8:	780b      	ldrb	r3, [r1, #0]
    2dda:	065b      	lsls	r3, r3, #25
    2ddc:	d102      	bne.n	2de4 <dcd_edpt0_status_complete+0xc>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
      request->bRequest == TUSB_REQ_SET_ADDRESS )
    2dde:	784b      	ldrb	r3, [r1, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
    2de0:	2b05      	cmp	r3, #5
    2de2:	d00e      	beq.n	2e02 <dcd_edpt0_status_complete+0x2a>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2de4:	4b0a      	ldr	r3, [pc, #40]	; (2e10 <dcd_edpt0_status_complete+0x38>)
    2de6:	4a0b      	ldr	r2, [pc, #44]	; (2e14 <dcd_edpt0_status_complete+0x3c>)
    2de8:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2dea:	6859      	ldr	r1, [r3, #4]
    2dec:	4a0a      	ldr	r2, [pc, #40]	; (2e18 <dcd_edpt0_status_complete+0x40>)
    2dee:	4011      	ands	r1, r2
    2df0:	2280      	movs	r2, #128	; 0x80
    2df2:	0292      	lsls	r2, r2, #10
    2df4:	430a      	orrs	r2, r1
    2df6:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2df8:	685a      	ldr	r2, [r3, #4]
    2dfa:	0b92      	lsrs	r2, r2, #14
    2dfc:	0391      	lsls	r1, r2, #14
    2dfe:	6059      	str	r1, [r3, #4]

  // Just finished status stage, prepare for next setup packet
  // Note: we may already prepare setup when queueing the control status.
  // but it has no harm to do it again here
  prepare_setup();
}
    2e00:	4770      	bx	lr
    uint8_t const dev_addr = (uint8_t) request->wValue;
    2e02:	788a      	ldrb	r2, [r1, #2]
    USB->DEVICE.DADD.reg = USB_DEVICE_DADD_DADD(dev_addr) | USB_DEVICE_DADD_ADDEN;
    2e04:	3b85      	subs	r3, #133	; 0x85
    2e06:	4313      	orrs	r3, r2
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	4a04      	ldr	r2, [pc, #16]	; (2e1c <dcd_edpt0_status_complete+0x44>)
    2e0c:	7293      	strb	r3, [r2, #10]
    2e0e:	e7e9      	b.n	2de4 <dcd_edpt0_status_complete+0xc>
    2e10:	200004c4 	.word	0x200004c4
    2e14:	200005c4 	.word	0x200005c4
    2e18:	f0003fff 	.word	0xf0003fff
    2e1c:	41005000 	.word	0x41005000

00002e20 <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
    2e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
    2e22:	788e      	ldrb	r6, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2e24:	247f      	movs	r4, #127	; 0x7f
    2e26:	4034      	ands	r4, r6
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2e28:	b276      	sxtb	r6, r6
    2e2a:	0ff7      	lsrs	r7, r6, #31
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  uint32_t size_value = 0;
    2e2c:	2200      	movs	r2, #0
  while (size_value < 7) {
    2e2e:	2a06      	cmp	r2, #6
    2e30:	d80c      	bhi.n	2e4c <dcd_edpt_open+0x2c>
    if (1 << (size_value + 3) >= tu_edpt_packet_size(desc_edpt)) {
    2e32:	1cd3      	adds	r3, r2, #3
    2e34:	2001      	movs	r0, #1
    2e36:	4098      	lsls	r0, r3
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    2e38:	790d      	ldrb	r5, [r1, #4]
    2e3a:	794b      	ldrb	r3, [r1, #5]
    2e3c:	021b      	lsls	r3, r3, #8
    2e3e:	432b      	orrs	r3, r5
    2e40:	055b      	lsls	r3, r3, #21
    2e42:	0d5b      	lsrs	r3, r3, #21
    2e44:	4298      	cmp	r0, r3
    2e46:	da01      	bge.n	2e4c <dcd_edpt_open+0x2c>
      break;
    }
    size_value++;
    2e48:	3201      	adds	r2, #1
    2e4a:	e7f0      	b.n	2e2e <dcd_edpt_open+0xe>
  }

  // unsupported endpoint size
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) > 1023 ) return false;
    2e4c:	2a07      	cmp	r2, #7
    2e4e:	d026      	beq.n	2e9e <dcd_edpt_open+0x7e>

  bank->PCKSIZE.bit.SIZE = size_value;
    2e50:	0063      	lsls	r3, r4, #1
    2e52:	19df      	adds	r7, r3, r7
    2e54:	013f      	lsls	r7, r7, #4
    2e56:	4b22      	ldr	r3, [pc, #136]	; (2ee0 <dcd_edpt_open+0xc0>)
    2e58:	19df      	adds	r7, r3, r7
    2e5a:	6878      	ldr	r0, [r7, #4]
    2e5c:	2307      	movs	r3, #7
    2e5e:	401a      	ands	r2, r3
    2e60:	0712      	lsls	r2, r2, #28
    2e62:	4b20      	ldr	r3, [pc, #128]	; (2ee4 <dcd_edpt_open+0xc4>)
    2e64:	4018      	ands	r0, r3
    2e66:	4302      	orrs	r2, r0
    2e68:	607a      	str	r2, [r7, #4]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2e6a:	0164      	lsls	r4, r4, #5
    2e6c:	4b1e      	ldr	r3, [pc, #120]	; (2ee8 <dcd_edpt_open+0xc8>)
    2e6e:	469c      	mov	ip, r3
    2e70:	4464      	add	r4, ip

  if ( dir == TUSB_DIR_OUT )
    2e72:	2e00      	cmp	r6, #0
    2e74:	db1e      	blt.n	2eb4 <dcd_edpt_open+0x94>
  {
    ep->EPCFG.bit.EPTYPE0 = desc_edpt->bmAttributes.xfer + 1;
    2e76:	78cb      	ldrb	r3, [r1, #3]
    2e78:	079b      	lsls	r3, r3, #30
    2e7a:	0f9b      	lsrs	r3, r3, #30
    2e7c:	3301      	adds	r3, #1
    2e7e:	7822      	ldrb	r2, [r4, #0]
    2e80:	2107      	movs	r1, #7
    2e82:	4019      	ands	r1, r3
    2e84:	2307      	movs	r3, #7
    2e86:	439a      	bics	r2, r3
    2e88:	0013      	movs	r3, r2
    2e8a:	430b      	orrs	r3, r1
    2e8c:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT; // clear stall & dtoggle
    2e8e:	2311      	movs	r3, #17
    2e90:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT0 = true;
    2e92:	7a63      	ldrb	r3, [r4, #9]
    2e94:	2201      	movs	r2, #1
    2e96:	4313      	orrs	r3, r2
    2e98:	7263      	strb	r3, [r4, #9]
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    ep->EPINTENSET.bit.TRCPT1 = true;
  }

  return true;
    2e9a:	2001      	movs	r0, #1
}
    2e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e9e:	7908      	ldrb	r0, [r1, #4]
    2ea0:	794b      	ldrb	r3, [r1, #5]
    2ea2:	021b      	lsls	r3, r3, #8
    2ea4:	4303      	orrs	r3, r0
    2ea6:	055b      	lsls	r3, r3, #21
    2ea8:	0d5b      	lsrs	r3, r3, #21
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) > 1023 ) return false;
    2eaa:	4810      	ldr	r0, [pc, #64]	; (2eec <dcd_edpt_open+0xcc>)
    2eac:	4283      	cmp	r3, r0
    2eae:	d9cf      	bls.n	2e50 <dcd_edpt_open+0x30>
    2eb0:	2000      	movs	r0, #0
    2eb2:	e7f3      	b.n	2e9c <dcd_edpt_open+0x7c>
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    2eb4:	78cb      	ldrb	r3, [r1, #3]
    2eb6:	079b      	lsls	r3, r3, #30
    2eb8:	0f9b      	lsrs	r3, r3, #30
    2eba:	3301      	adds	r3, #1
    2ebc:	7822      	ldrb	r2, [r4, #0]
    2ebe:	2107      	movs	r1, #7
    2ec0:	4019      	ands	r1, r3
    2ec2:	0109      	lsls	r1, r1, #4
    2ec4:	2370      	movs	r3, #112	; 0x70
    2ec6:	439a      	bics	r2, r3
    2ec8:	0013      	movs	r3, r2
    2eca:	430b      	orrs	r3, r1
    2ecc:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    2ece:	2322      	movs	r3, #34	; 0x22
    2ed0:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT1 = true;
    2ed2:	7a63      	ldrb	r3, [r4, #9]
    2ed4:	2202      	movs	r2, #2
    2ed6:	4313      	orrs	r3, r2
    2ed8:	7263      	strb	r3, [r4, #9]
  return true;
    2eda:	2001      	movs	r0, #1
    2edc:	e7de      	b.n	2e9c <dcd_edpt_open+0x7c>
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	200004c4 	.word	0x200004c4
    2ee4:	8fffffff 	.word	0x8fffffff
    2ee8:	41005100 	.word	0x41005100
    2eec:	000003ff 	.word	0x000003ff

00002ef0 <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
    2ef0:	4770      	bx	lr
	...

00002ef4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    2ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2ef6:	207f      	movs	r0, #127	; 0x7f
    2ef8:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2efa:	b249      	sxtb	r1, r1
    2efc:	0fcf      	lsrs	r7, r1, #31

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2efe:	0145      	lsls	r5, r0, #5
    2f00:	4c27      	ldr	r4, [pc, #156]	; (2fa0 <dcd_edpt_xfer+0xac>)
    2f02:	46a4      	mov	ip, r4
    2f04:	4465      	add	r5, ip

  bank->ADDR.reg = (uint32_t) buffer;
    2f06:	0044      	lsls	r4, r0, #1
    2f08:	19e4      	adds	r4, r4, r7
    2f0a:	0124      	lsls	r4, r4, #4
    2f0c:	4e25      	ldr	r6, [pc, #148]	; (2fa4 <dcd_edpt_xfer+0xb0>)
    2f0e:	51a2      	str	r2, [r4, r6]

  // A SETUP token can occur immediately after an ZLP Status.
  // So make sure we have a valid buffer for setup packet.
  //   Status = ZLP EP0 with direction opposite to one in the dir bit of current setup
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2f10:	2800      	cmp	r0, #0
    2f12:	d101      	bne.n	2f18 <dcd_edpt_xfer+0x24>
    2f14:	2a00      	cmp	r2, #0
    2f16:	d017      	beq.n	2f48 <dcd_edpt_xfer+0x54>
    prepare_setup();
  }

  if ( dir == TUSB_DIR_OUT )
    2f18:	2900      	cmp	r1, #0
    2f1a:	db2b      	blt.n	2f74 <dcd_edpt_xfer+0x80>
  {
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = total_bytes;
    2f1c:	0040      	lsls	r0, r0, #1
    2f1e:	19c0      	adds	r0, r0, r7
    2f20:	0102      	lsls	r2, r0, #4
    2f22:	4820      	ldr	r0, [pc, #128]	; (2fa4 <dcd_edpt_xfer+0xb0>)
    2f24:	1880      	adds	r0, r0, r2
    2f26:	6842      	ldr	r2, [r0, #4]
    2f28:	049b      	lsls	r3, r3, #18
    2f2a:	091b      	lsrs	r3, r3, #4
    2f2c:	491e      	ldr	r1, [pc, #120]	; (2fa8 <dcd_edpt_xfer+0xb4>)
    2f2e:	400a      	ands	r2, r1
    2f30:	4313      	orrs	r3, r2
    2f32:	6043      	str	r3, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = 0;
    2f34:	6843      	ldr	r3, [r0, #4]
    2f36:	0b9b      	lsrs	r3, r3, #14
    2f38:	039a      	lsls	r2, r3, #14
    2f3a:	6042      	str	r2, [r0, #4]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2f3c:	2340      	movs	r3, #64	; 0x40
    2f3e:	712b      	strb	r3, [r5, #4]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2f40:	3b3c      	subs	r3, #60	; 0x3c
    2f42:	71eb      	strb	r3, [r5, #7]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
  }

  return true;
}
    2f44:	2001      	movs	r0, #1
    2f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d1e5      	bne.n	2f18 <dcd_edpt_xfer+0x24>
    2f4c:	4a17      	ldr	r2, [pc, #92]	; (2fac <dcd_edpt_xfer+0xb8>)
    2f4e:	7812      	ldrb	r2, [r2, #0]
    2f50:	09d2      	lsrs	r2, r2, #7
    2f52:	4297      	cmp	r7, r2
    2f54:	d0e0      	beq.n	2f18 <dcd_edpt_xfer+0x24>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2f56:	0032      	movs	r2, r6
    2f58:	4c14      	ldr	r4, [pc, #80]	; (2fac <dcd_edpt_xfer+0xb8>)
    2f5a:	6034      	str	r4, [r6, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2f5c:	6876      	ldr	r6, [r6, #4]
    2f5e:	4c12      	ldr	r4, [pc, #72]	; (2fa8 <dcd_edpt_xfer+0xb4>)
    2f60:	4026      	ands	r6, r4
    2f62:	2480      	movs	r4, #128	; 0x80
    2f64:	02a4      	lsls	r4, r4, #10
    2f66:	4334      	orrs	r4, r6
    2f68:	6054      	str	r4, [r2, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2f6a:	6854      	ldr	r4, [r2, #4]
    2f6c:	0ba4      	lsrs	r4, r4, #14
    2f6e:	03a6      	lsls	r6, r4, #14
    2f70:	6056      	str	r6, [r2, #4]
    2f72:	e7d1      	b.n	2f18 <dcd_edpt_xfer+0x24>
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2f74:	0040      	lsls	r0, r0, #1
    2f76:	19c0      	adds	r0, r0, r7
    2f78:	0100      	lsls	r0, r0, #4
    2f7a:	4a0a      	ldr	r2, [pc, #40]	; (2fa4 <dcd_edpt_xfer+0xb0>)
    2f7c:	1810      	adds	r0, r2, r0
    2f7e:	6841      	ldr	r1, [r0, #4]
    2f80:	4a09      	ldr	r2, [pc, #36]	; (2fa8 <dcd_edpt_xfer+0xb4>)
    2f82:	400a      	ands	r2, r1
    2f84:	6042      	str	r2, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = total_bytes;
    2f86:	6842      	ldr	r2, [r0, #4]
    2f88:	049b      	lsls	r3, r3, #18
    2f8a:	0c9b      	lsrs	r3, r3, #18
    2f8c:	0b92      	lsrs	r2, r2, #14
    2f8e:	0392      	lsls	r2, r2, #14
    2f90:	4313      	orrs	r3, r2
    2f92:	6043      	str	r3, [r0, #4]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	716b      	strb	r3, [r5, #5]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2f98:	3b78      	subs	r3, #120	; 0x78
    2f9a:	71eb      	strb	r3, [r5, #7]
    2f9c:	e7d2      	b.n	2f44 <dcd_edpt_xfer+0x50>
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	41005100 	.word	0x41005100
    2fa4:	200004c4 	.word	0x200004c4
    2fa8:	f0003fff 	.word	0xf0003fff
    2fac:	200005c4 	.word	0x200005c4

00002fb0 <dcd_set_address>:
{
    2fb0:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, 0x80, NULL, 0);
    2fb2:	2300      	movs	r3, #0
    2fb4:	2200      	movs	r2, #0
    2fb6:	2180      	movs	r1, #128	; 0x80
    2fb8:	4c03      	ldr	r4, [pc, #12]	; (2fc8 <dcd_set_address+0x18>)
    2fba:	47a0      	blx	r4
  USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTENCLR_SUSPEND; // clear pending
    2fbc:	4b03      	ldr	r3, [pc, #12]	; (2fcc <dcd_set_address+0x1c>)
    2fbe:	2201      	movs	r2, #1
    2fc0:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_SUSPEND;
    2fc2:	831a      	strh	r2, [r3, #24]
}
    2fc4:	bd10      	pop	{r4, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00002ef5 	.word	0x00002ef5
    2fcc:	41005000 	.word	0x41005000

00002fd0 <dcd_edpt_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2fd0:	237f      	movs	r3, #127	; 0x7f
    2fd2:	400b      	ands	r3, r1
void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2fd4:	015b      	lsls	r3, r3, #5
    2fd6:	4a06      	ldr	r2, [pc, #24]	; (2ff0 <dcd_edpt_stall+0x20>)
    2fd8:	4694      	mov	ip, r2
    2fda:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2fdc:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    2fde:	2900      	cmp	r1, #0
    2fe0:	db02      	blt.n	2fe8 <dcd_edpt_stall+0x18>
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
  } else {
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2fe2:	2210      	movs	r2, #16
    2fe4:	715a      	strb	r2, [r3, #5]
  }
}
    2fe6:	4770      	bx	lr
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2fe8:	2220      	movs	r2, #32
    2fea:	715a      	strb	r2, [r3, #5]
    2fec:	e7fb      	b.n	2fe6 <dcd_edpt_stall+0x16>
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	41005100 	.word	0x41005100

00002ff4 <dcd_edpt_clear_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2ff4:	237f      	movs	r3, #127	; 0x7f
    2ff6:	400b      	ands	r3, r1
void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2ff8:	015b      	lsls	r3, r3, #5
    2ffa:	4a06      	ldr	r2, [pc, #24]	; (3014 <dcd_edpt_clear_stall+0x20>)
    2ffc:	4694      	mov	ip, r2
    2ffe:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    3000:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    3002:	2900      	cmp	r1, #0
    3004:	db02      	blt.n	300c <dcd_edpt_clear_stall+0x18>
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
  } else {
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT;
    3006:	2211      	movs	r2, #17
    3008:	711a      	strb	r2, [r3, #4]
  }
}
    300a:	4770      	bx	lr
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
    300c:	2222      	movs	r2, #34	; 0x22
    300e:	711a      	strb	r2, [r3, #4]
    3010:	e7fb      	b.n	300a <dcd_edpt_clear_stall+0x16>
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	41005100 	.word	0x41005100

00003018 <maybe_transfer_complete>:

//--------------------------------------------------------------------+
// Interrupt Handler
//--------------------------------------------------------------------+
void maybe_transfer_complete(void) {
    3018:	b5f0      	push	{r4, r5, r6, r7, lr}
    301a:	46de      	mov	lr, fp
    301c:	4657      	mov	r7, sl
    301e:	464e      	mov	r6, r9
    3020:	4645      	mov	r5, r8
    3022:	b5e0      	push	{r5, r6, r7, lr}
    3024:	b085      	sub	sp, #20
  uint32_t epints = USB->DEVICE.EPINTSMRY.reg;
    3026:	4b2d      	ldr	r3, [pc, #180]	; (30dc <maybe_transfer_complete+0xc4>)
    3028:	8c1b      	ldrh	r3, [r3, #32]
    302a:	b29b      	uxth	r3, r3
    302c:	4698      	mov	r8, r3

  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    302e:	2400      	movs	r4, #0
    3030:	e022      	b.n	3078 <maybe_transfer_complete+0x60>
    uint32_t epintflag = ep->EPINTFLAG.reg;

    // Handle IN completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_IN];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    3032:	0162      	lsls	r2, r4, #5
    3034:	4b2a      	ldr	r3, [pc, #168]	; (30e0 <maybe_transfer_complete+0xc8>)
    3036:	189b      	adds	r3, r3, r2
    3038:	3310      	adds	r3, #16
    303a:	685b      	ldr	r3, [r3, #4]
    303c:	049b      	lsls	r3, r3, #18
    303e:	0c9b      	lsrs	r3, r3, #18
    3040:	469a      	mov	sl, r3

      dcd_event_xfer_complete(0, epnum | TUSB_DIR_IN_MASK, total_transfer_size, XFER_RESULT_SUCCESS, true);
    3042:	2380      	movs	r3, #128	; 0x80
    3044:	425b      	negs	r3, r3
    3046:	4323      	orrs	r3, r4
    3048:	b2db      	uxtb	r3, r3
    304a:	469b      	mov	fp, r3
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    304c:	af01      	add	r7, sp, #4
    304e:	220c      	movs	r2, #12
    3050:	2100      	movs	r1, #0
    3052:	0038      	movs	r0, r7
    3054:	4b23      	ldr	r3, [pc, #140]	; (30e4 <maybe_transfer_complete+0xcc>)
    3056:	4798      	blx	r3
    3058:	2307      	movs	r3, #7
    305a:	707b      	strb	r3, [r7, #1]

  event.xfer_complete.ep_addr = ep_addr;
    305c:	465b      	mov	r3, fp
    305e:	713b      	strb	r3, [r7, #4]
  event.xfer_complete.len     = xferred_bytes;
    3060:	4653      	mov	r3, sl
    3062:	60bb      	str	r3, [r7, #8]
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
    3064:	2101      	movs	r1, #1
    3066:	0038      	movs	r0, r7
    3068:	4b1f      	ldr	r3, [pc, #124]	; (30e8 <maybe_transfer_complete+0xd0>)
    306a:	4798      	blx	r3

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    306c:	2302      	movs	r3, #2
    306e:	464a      	mov	r2, r9
    3070:	71d3      	strb	r3, [r2, #7]
    3072:	e012      	b.n	309a <maybe_transfer_complete+0x82>
  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    3074:	3401      	adds	r4, #1
    3076:	b2e4      	uxtb	r4, r4
    3078:	2c07      	cmp	r4, #7
    307a:	d828      	bhi.n	30ce <maybe_transfer_complete+0xb6>
    if ((epints & (1 << epnum)) == 0) {
    307c:	0025      	movs	r5, r4
    307e:	2301      	movs	r3, #1
    3080:	40a3      	lsls	r3, r4
    3082:	4642      	mov	r2, r8
    3084:	4213      	tst	r3, r2
    3086:	d0f5      	beq.n	3074 <maybe_transfer_complete+0x5c>
    UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    3088:	0163      	lsls	r3, r4, #5
    308a:	4a18      	ldr	r2, [pc, #96]	; (30ec <maybe_transfer_complete+0xd4>)
    308c:	4691      	mov	r9, r2
    308e:	4499      	add	r9, r3
    uint32_t epintflag = ep->EPINTFLAG.reg;
    3090:	464b      	mov	r3, r9
    3092:	79de      	ldrb	r6, [r3, #7]
    3094:	b2f6      	uxtb	r6, r6
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
    3096:	07b3      	lsls	r3, r6, #30
    3098:	d4cb      	bmi.n	3032 <maybe_transfer_complete+0x1a>
    }

    // Handle OUT completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT0) != 0) {
    309a:	07f3      	lsls	r3, r6, #31
    309c:	d5ea      	bpl.n	3074 <maybe_transfer_complete+0x5c>
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_OUT];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    309e:	016d      	lsls	r5, r5, #5
    30a0:	4b0f      	ldr	r3, [pc, #60]	; (30e0 <maybe_transfer_complete+0xc8>)
    30a2:	195d      	adds	r5, r3, r5
    30a4:	686e      	ldr	r6, [r5, #4]
    30a6:	04b6      	lsls	r6, r6, #18
    30a8:	0cb6      	lsrs	r6, r6, #18
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    30aa:	ad01      	add	r5, sp, #4
    30ac:	220c      	movs	r2, #12
    30ae:	2100      	movs	r1, #0
    30b0:	0028      	movs	r0, r5
    30b2:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <maybe_transfer_complete+0xcc>)
    30b4:	4798      	blx	r3
    30b6:	2307      	movs	r3, #7
    30b8:	706b      	strb	r3, [r5, #1]
  event.xfer_complete.ep_addr = ep_addr;
    30ba:	712c      	strb	r4, [r5, #4]
  event.xfer_complete.len     = xferred_bytes;
    30bc:	60ae      	str	r6, [r5, #8]
  dcd_event_handler(&event, in_isr);
    30be:	2101      	movs	r1, #1
    30c0:	0028      	movs	r0, r5
    30c2:	4b09      	ldr	r3, [pc, #36]	; (30e8 <maybe_transfer_complete+0xd0>)
    30c4:	4798      	blx	r3

      dcd_event_xfer_complete(0, epnum, total_transfer_size, XFER_RESULT_SUCCESS, true);

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    30c6:	2301      	movs	r3, #1
    30c8:	464a      	mov	r2, r9
    30ca:	71d3      	strb	r3, [r2, #7]
    30cc:	e7d2      	b.n	3074 <maybe_transfer_complete+0x5c>
    }
  }
}
    30ce:	b005      	add	sp, #20
    30d0:	bc3c      	pop	{r2, r3, r4, r5}
    30d2:	4690      	mov	r8, r2
    30d4:	4699      	mov	r9, r3
    30d6:	46a2      	mov	sl, r4
    30d8:	46ab      	mov	fp, r5
    30da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30dc:	41005000 	.word	0x41005000
    30e0:	200004c4 	.word	0x200004c4
    30e4:	00005a73 	.word	0x00005a73
    30e8:	000021d5 	.word	0x000021d5
    30ec:	41005100 	.word	0x41005100

000030f0 <dcd_int_handler>:


void dcd_int_handler (uint8_t rhport)
{
    30f0:	b530      	push	{r4, r5, lr}
    30f2:	b085      	sub	sp, #20
  (void) rhport;

  uint32_t int_status = USB->DEVICE.INTFLAG.reg & USB->DEVICE.INTENSET.reg;
    30f4:	4b39      	ldr	r3, [pc, #228]	; (31dc <dcd_int_handler+0xec>)
    30f6:	8b9a      	ldrh	r2, [r3, #28]
    30f8:	8b1c      	ldrh	r4, [r3, #24]
    30fa:	4014      	ands	r4, r2

  // Start of Frame
  if ( int_status & USB_DEVICE_INTFLAG_SOF )
    30fc:	0763      	lsls	r3, r4, #29
    30fe:	d40f      	bmi.n	3120 <dcd_int_handler+0x30>

  // SAMD doesn't distinguish between Suspend and Disconnect state.
  // Both condition will cause SUSPEND interrupt triggered.
  // To prevent being triggered when D+/D- are not stable, SUSPEND interrupt is only
  // enabled when we received SET_ADDRESS request and cleared on Bus Reset
  if ( int_status & USB_DEVICE_INTFLAG_SUSPEND )
    3100:	07e3      	lsls	r3, r4, #31
    3102:	d41d      	bmi.n	3140 <dcd_int_handler+0x50>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  // Wakeup interrupt is only enabled when we got suspended.
  // Wakeup interrupt will disable itself
  if ( int_status & USB_DEVICE_INTFLAG_WAKEUP )
    3104:	06e3      	lsls	r3, r4, #27
    3106:	d42e      	bmi.n	3166 <dcd_int_handler+0x76>
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  // Enable of Reset
  if ( int_status & USB_DEVICE_INTFLAG_EORST )
    3108:	0723      	lsls	r3, r4, #28
    310a:	d43d      	bmi.n	3188 <dcd_int_handler+0x98>
    bus_reset();
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
  }

  // Handle SETUP packet
  if (USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.bit.RXSTP)
    310c:	2308      	movs	r3, #8
    310e:	33ff      	adds	r3, #255	; 0xff
    3110:	4a32      	ldr	r2, [pc, #200]	; (31dc <dcd_int_handler+0xec>)
    3112:	5cd3      	ldrb	r3, [r2, r3]
    3114:	06db      	lsls	r3, r3, #27
    3116:	d44b      	bmi.n	31b0 <dcd_int_handler+0xc0>
    // Since control status complete event is optional, we can just clear TRCPT0 and skip the status event
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
  }

  // Handle complete transfer
  maybe_transfer_complete();
    3118:	4b31      	ldr	r3, [pc, #196]	; (31e0 <dcd_int_handler+0xf0>)
    311a:	4798      	blx	r3
}
    311c:	b005      	add	sp, #20
    311e:	bd30      	pop	{r4, r5, pc}
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF;
    3120:	2204      	movs	r2, #4
    3122:	4b2e      	ldr	r3, [pc, #184]	; (31dc <dcd_int_handler+0xec>)
    3124:	839a      	strh	r2, [r3, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    3126:	ad01      	add	r5, sp, #4
    3128:	3208      	adds	r2, #8
    312a:	2100      	movs	r1, #0
    312c:	0028      	movs	r0, r5
    312e:	4b2d      	ldr	r3, [pc, #180]	; (31e4 <dcd_int_handler+0xf4>)
    3130:	4798      	blx	r3
    3132:	2303      	movs	r3, #3
    3134:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    3136:	2101      	movs	r1, #1
    3138:	0028      	movs	r0, r5
    313a:	4b2b      	ldr	r3, [pc, #172]	; (31e8 <dcd_int_handler+0xf8>)
    313c:	4798      	blx	r3
    313e:	e7df      	b.n	3100 <dcd_int_handler+0x10>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SUSPEND;
    3140:	4b26      	ldr	r3, [pc, #152]	; (31dc <dcd_int_handler+0xec>)
    3142:	2201      	movs	r2, #1
    3144:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP; // clear pending
    3146:	320f      	adds	r2, #15
    3148:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENSET.reg = USB_DEVICE_INTFLAG_WAKEUP;
    314a:	831a      	strh	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    314c:	ad01      	add	r5, sp, #4
    314e:	3a04      	subs	r2, #4
    3150:	2100      	movs	r1, #0
    3152:	0028      	movs	r0, r5
    3154:	4b23      	ldr	r3, [pc, #140]	; (31e4 <dcd_int_handler+0xf4>)
    3156:	4798      	blx	r3
    3158:	2304      	movs	r3, #4
    315a:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    315c:	2101      	movs	r1, #1
    315e:	0028      	movs	r0, r5
    3160:	4b21      	ldr	r3, [pc, #132]	; (31e8 <dcd_int_handler+0xf8>)
    3162:	4798      	blx	r3
    3164:	e7ce      	b.n	3104 <dcd_int_handler+0x14>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP;
    3166:	4b1d      	ldr	r3, [pc, #116]	; (31dc <dcd_int_handler+0xec>)
    3168:	2210      	movs	r2, #16
    316a:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    316c:	829a      	strh	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    316e:	ad01      	add	r5, sp, #4
    3170:	3a04      	subs	r2, #4
    3172:	2100      	movs	r1, #0
    3174:	0028      	movs	r0, r5
    3176:	4b1b      	ldr	r3, [pc, #108]	; (31e4 <dcd_int_handler+0xf4>)
    3178:	4798      	blx	r3
    317a:	2305      	movs	r3, #5
    317c:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    317e:	2101      	movs	r1, #1
    3180:	0028      	movs	r0, r5
    3182:	4b19      	ldr	r3, [pc, #100]	; (31e8 <dcd_int_handler+0xf8>)
    3184:	4798      	blx	r3
    3186:	e7bf      	b.n	3108 <dcd_int_handler+0x18>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    3188:	4b14      	ldr	r3, [pc, #80]	; (31dc <dcd_int_handler+0xec>)
    318a:	2208      	movs	r2, #8
    318c:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP | USB_DEVICE_INTFLAG_SUSPEND;
    318e:	3209      	adds	r2, #9
    3190:	829a      	strh	r2, [r3, #20]
    bus_reset();
    3192:	4b16      	ldr	r3, [pc, #88]	; (31ec <dcd_int_handler+0xfc>)
    3194:	4798      	blx	r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
    3196:	ac01      	add	r4, sp, #4
    3198:	220c      	movs	r2, #12
    319a:	2100      	movs	r1, #0
    319c:	0020      	movs	r0, r4
    319e:	4b11      	ldr	r3, [pc, #68]	; (31e4 <dcd_int_handler+0xf4>)
    31a0:	4798      	blx	r3
    31a2:	2301      	movs	r3, #1
    31a4:	7063      	strb	r3, [r4, #1]
  dcd_event_handler(&event, in_isr);
    31a6:	2101      	movs	r1, #1
    31a8:	0020      	movs	r0, r4
    31aa:	4b0f      	ldr	r3, [pc, #60]	; (31e8 <dcd_int_handler+0xf8>)
    31ac:	4798      	blx	r3
    31ae:	e7ad      	b.n	310c <dcd_int_handler+0x1c>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
    31b0:	ac01      	add	r4, sp, #4
    31b2:	220c      	movs	r2, #12
    31b4:	2100      	movs	r1, #0
    31b6:	0020      	movs	r0, r4
    31b8:	4b0a      	ldr	r3, [pc, #40]	; (31e4 <dcd_int_handler+0xf4>)
    31ba:	4798      	blx	r3
    31bc:	2306      	movs	r3, #6
    31be:	7063      	strb	r3, [r4, #1]
  memcpy(&event.setup_received, setup, 8);
    31c0:	4a0b      	ldr	r2, [pc, #44]	; (31f0 <dcd_int_handler+0x100>)
    31c2:	ab02      	add	r3, sp, #8
    31c4:	ca03      	ldmia	r2!, {r0, r1}
    31c6:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
    31c8:	2101      	movs	r1, #1
    31ca:	0020      	movs	r0, r4
    31cc:	4b06      	ldr	r3, [pc, #24]	; (31e8 <dcd_int_handler+0xf8>)
    31ce:	4798      	blx	r3
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
    31d0:	2111      	movs	r1, #17
    31d2:	2308      	movs	r3, #8
    31d4:	33ff      	adds	r3, #255	; 0xff
    31d6:	4a01      	ldr	r2, [pc, #4]	; (31dc <dcd_int_handler+0xec>)
    31d8:	54d1      	strb	r1, [r2, r3]
    31da:	e79d      	b.n	3118 <dcd_int_handler+0x28>
    31dc:	41005000 	.word	0x41005000
    31e0:	00003019 	.word	0x00003019
    31e4:	00005a73 	.word	0x00005a73
    31e8:	000021d5 	.word	0x000021d5
    31ec:	00002cc5 	.word	0x00002cc5
    31f0:	200005c4 	.word	0x200005c4

000031f4 <tusb_inited>:

  return true;
}

bool tusb_inited(void)
{
    31f4:	b510      	push	{r4, lr}
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
    31f6:	4b03      	ldr	r3, [pc, #12]	; (3204 <tusb_inited+0x10>)
    31f8:	4798      	blx	r3
    31fa:	2800      	cmp	r0, #0
    31fc:	d000      	beq.n	3200 <tusb_inited+0xc>
    31fe:	2001      	movs	r0, #1
#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
}
    3200:	bd10      	pop	{r4, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00002105 	.word	0x00002105

00003208 <tu_edpt_validate>:
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    3208:	7902      	ldrb	r2, [r0, #4]
    320a:	7943      	ldrb	r3, [r0, #5]
    320c:	021b      	lsls	r3, r3, #8
    320e:	4313      	orrs	r3, r2
    3210:	055b      	lsls	r3, r3, #21
    3212:	0d5b      	lsrs	r3, r3, #21
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
    3214:	78c2      	ldrb	r2, [r0, #3]
    3216:	0792      	lsls	r2, r2, #30
    3218:	0f92      	lsrs	r2, r2, #30
    321a:	2a02      	cmp	r2, #2
    321c:	d00c      	beq.n	3238 <tu_edpt_validate+0x30>
    321e:	d819      	bhi.n	3254 <tu_edpt_validate+0x4c>
    3220:	2a01      	cmp	r2, #1
    3222:	d121      	bne.n	3268 <tu_edpt_validate+0x60>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    3224:	2902      	cmp	r1, #2
    3226:	d004      	beq.n	3232 <tu_edpt_validate+0x2a>
    3228:	4a13      	ldr	r2, [pc, #76]	; (3278 <tu_edpt_validate+0x70>)
      TU_ASSERT(max_packet_size <= spec_size);
    322a:	429a      	cmp	r2, r3
    322c:	d31e      	bcc.n	326c <tu_edpt_validate+0x64>
    break;

    default: return false;
  }

  return true;
    322e:	2001      	movs	r0, #1
    3230:	e01b      	b.n	326a <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    3232:	2280      	movs	r2, #128	; 0x80
    3234:	00d2      	lsls	r2, r2, #3
    3236:	e7f8      	b.n	322a <tu_edpt_validate+0x22>
      if (speed == TUSB_SPEED_HIGH)
    3238:	2902      	cmp	r1, #2
    323a:	d003      	beq.n	3244 <tu_edpt_validate+0x3c>
        TU_ASSERT(max_packet_size <= 64);
    323c:	2b40      	cmp	r3, #64	; 0x40
    323e:	d817      	bhi.n	3270 <tu_edpt_validate+0x68>
  return true;
    3240:	2001      	movs	r0, #1
    3242:	e012      	b.n	326a <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size == 512);
    3244:	2280      	movs	r2, #128	; 0x80
    3246:	0092      	lsls	r2, r2, #2
    3248:	4293      	cmp	r3, r2
    324a:	d001      	beq.n	3250 <tu_edpt_validate+0x48>
    324c:	2000      	movs	r0, #0
    324e:	e00c      	b.n	326a <tu_edpt_validate+0x62>
  return true;
    3250:	2001      	movs	r0, #1
    3252:	e00a      	b.n	326a <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    3254:	2902      	cmp	r1, #2
    3256:	d004      	beq.n	3262 <tu_edpt_validate+0x5a>
    3258:	2240      	movs	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
    325a:	429a      	cmp	r2, r3
    325c:	d30a      	bcc.n	3274 <tu_edpt_validate+0x6c>
  return true;
    325e:	2001      	movs	r0, #1
    3260:	e003      	b.n	326a <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    3262:	2280      	movs	r2, #128	; 0x80
    3264:	00d2      	lsls	r2, r2, #3
    3266:	e7f8      	b.n	325a <tu_edpt_validate+0x52>
    default: return false;
    3268:	2000      	movs	r0, #0
}
    326a:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    326c:	2000      	movs	r0, #0
    326e:	e7fc      	b.n	326a <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size <= 64);
    3270:	2000      	movs	r0, #0
    3272:	e7fa      	b.n	326a <tu_edpt_validate+0x62>
      TU_ASSERT(max_packet_size <= spec_size);
    3274:	2000      	movs	r0, #0
    3276:	e7f8      	b.n	326a <tu_edpt_validate+0x62>
    3278:	000003ff 	.word	0x000003ff

0000327c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
    327c:	b530      	push	{r4, r5, lr}
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
    327e:	188a      	adds	r2, r1, r2

  while( p_desc < desc_end )
    3280:	e001      	b.n	3286 <tu_edpt_bind_driver+0xa>
  return desc8 + desc8[DESC_OFFSET_LEN];
    3282:	780c      	ldrb	r4, [r1, #0]
    3284:	1909      	adds	r1, r1, r4
    3286:	4291      	cmp	r1, r2
    3288:	d20a      	bcs.n	32a0 <tu_edpt_bind_driver+0x24>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    328a:	784c      	ldrb	r4, [r1, #1]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
    328c:	2c05      	cmp	r4, #5
    328e:	d1f8      	bne.n	3282 <tu_edpt_bind_driver+0x6>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
    3290:	788d      	ldrb	r5, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    3292:	347a      	adds	r4, #122	; 0x7a
    3294:	402c      	ands	r4, r5

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    3296:	0064      	lsls	r4, r4, #1
    3298:	1904      	adds	r4, r0, r4
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    329a:	09ed      	lsrs	r5, r5, #7
    329c:	5563      	strb	r3, [r4, r5]
    329e:	e7f0      	b.n	3282 <tu_edpt_bind_driver+0x6>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
    32a0:	bd30      	pop	{r4, r5, pc}
	...

000032a4 <__udivsi3>:
    32a4:	2200      	movs	r2, #0
    32a6:	0843      	lsrs	r3, r0, #1
    32a8:	428b      	cmp	r3, r1
    32aa:	d374      	bcc.n	3396 <__udivsi3+0xf2>
    32ac:	0903      	lsrs	r3, r0, #4
    32ae:	428b      	cmp	r3, r1
    32b0:	d35f      	bcc.n	3372 <__udivsi3+0xce>
    32b2:	0a03      	lsrs	r3, r0, #8
    32b4:	428b      	cmp	r3, r1
    32b6:	d344      	bcc.n	3342 <__udivsi3+0x9e>
    32b8:	0b03      	lsrs	r3, r0, #12
    32ba:	428b      	cmp	r3, r1
    32bc:	d328      	bcc.n	3310 <__udivsi3+0x6c>
    32be:	0c03      	lsrs	r3, r0, #16
    32c0:	428b      	cmp	r3, r1
    32c2:	d30d      	bcc.n	32e0 <__udivsi3+0x3c>
    32c4:	22ff      	movs	r2, #255	; 0xff
    32c6:	0209      	lsls	r1, r1, #8
    32c8:	ba12      	rev	r2, r2
    32ca:	0c03      	lsrs	r3, r0, #16
    32cc:	428b      	cmp	r3, r1
    32ce:	d302      	bcc.n	32d6 <__udivsi3+0x32>
    32d0:	1212      	asrs	r2, r2, #8
    32d2:	0209      	lsls	r1, r1, #8
    32d4:	d065      	beq.n	33a2 <__udivsi3+0xfe>
    32d6:	0b03      	lsrs	r3, r0, #12
    32d8:	428b      	cmp	r3, r1
    32da:	d319      	bcc.n	3310 <__udivsi3+0x6c>
    32dc:	e000      	b.n	32e0 <__udivsi3+0x3c>
    32de:	0a09      	lsrs	r1, r1, #8
    32e0:	0bc3      	lsrs	r3, r0, #15
    32e2:	428b      	cmp	r3, r1
    32e4:	d301      	bcc.n	32ea <__udivsi3+0x46>
    32e6:	03cb      	lsls	r3, r1, #15
    32e8:	1ac0      	subs	r0, r0, r3
    32ea:	4152      	adcs	r2, r2
    32ec:	0b83      	lsrs	r3, r0, #14
    32ee:	428b      	cmp	r3, r1
    32f0:	d301      	bcc.n	32f6 <__udivsi3+0x52>
    32f2:	038b      	lsls	r3, r1, #14
    32f4:	1ac0      	subs	r0, r0, r3
    32f6:	4152      	adcs	r2, r2
    32f8:	0b43      	lsrs	r3, r0, #13
    32fa:	428b      	cmp	r3, r1
    32fc:	d301      	bcc.n	3302 <__udivsi3+0x5e>
    32fe:	034b      	lsls	r3, r1, #13
    3300:	1ac0      	subs	r0, r0, r3
    3302:	4152      	adcs	r2, r2
    3304:	0b03      	lsrs	r3, r0, #12
    3306:	428b      	cmp	r3, r1
    3308:	d301      	bcc.n	330e <__udivsi3+0x6a>
    330a:	030b      	lsls	r3, r1, #12
    330c:	1ac0      	subs	r0, r0, r3
    330e:	4152      	adcs	r2, r2
    3310:	0ac3      	lsrs	r3, r0, #11
    3312:	428b      	cmp	r3, r1
    3314:	d301      	bcc.n	331a <__udivsi3+0x76>
    3316:	02cb      	lsls	r3, r1, #11
    3318:	1ac0      	subs	r0, r0, r3
    331a:	4152      	adcs	r2, r2
    331c:	0a83      	lsrs	r3, r0, #10
    331e:	428b      	cmp	r3, r1
    3320:	d301      	bcc.n	3326 <__udivsi3+0x82>
    3322:	028b      	lsls	r3, r1, #10
    3324:	1ac0      	subs	r0, r0, r3
    3326:	4152      	adcs	r2, r2
    3328:	0a43      	lsrs	r3, r0, #9
    332a:	428b      	cmp	r3, r1
    332c:	d301      	bcc.n	3332 <__udivsi3+0x8e>
    332e:	024b      	lsls	r3, r1, #9
    3330:	1ac0      	subs	r0, r0, r3
    3332:	4152      	adcs	r2, r2
    3334:	0a03      	lsrs	r3, r0, #8
    3336:	428b      	cmp	r3, r1
    3338:	d301      	bcc.n	333e <__udivsi3+0x9a>
    333a:	020b      	lsls	r3, r1, #8
    333c:	1ac0      	subs	r0, r0, r3
    333e:	4152      	adcs	r2, r2
    3340:	d2cd      	bcs.n	32de <__udivsi3+0x3a>
    3342:	09c3      	lsrs	r3, r0, #7
    3344:	428b      	cmp	r3, r1
    3346:	d301      	bcc.n	334c <__udivsi3+0xa8>
    3348:	01cb      	lsls	r3, r1, #7
    334a:	1ac0      	subs	r0, r0, r3
    334c:	4152      	adcs	r2, r2
    334e:	0983      	lsrs	r3, r0, #6
    3350:	428b      	cmp	r3, r1
    3352:	d301      	bcc.n	3358 <__udivsi3+0xb4>
    3354:	018b      	lsls	r3, r1, #6
    3356:	1ac0      	subs	r0, r0, r3
    3358:	4152      	adcs	r2, r2
    335a:	0943      	lsrs	r3, r0, #5
    335c:	428b      	cmp	r3, r1
    335e:	d301      	bcc.n	3364 <__udivsi3+0xc0>
    3360:	014b      	lsls	r3, r1, #5
    3362:	1ac0      	subs	r0, r0, r3
    3364:	4152      	adcs	r2, r2
    3366:	0903      	lsrs	r3, r0, #4
    3368:	428b      	cmp	r3, r1
    336a:	d301      	bcc.n	3370 <__udivsi3+0xcc>
    336c:	010b      	lsls	r3, r1, #4
    336e:	1ac0      	subs	r0, r0, r3
    3370:	4152      	adcs	r2, r2
    3372:	08c3      	lsrs	r3, r0, #3
    3374:	428b      	cmp	r3, r1
    3376:	d301      	bcc.n	337c <__udivsi3+0xd8>
    3378:	00cb      	lsls	r3, r1, #3
    337a:	1ac0      	subs	r0, r0, r3
    337c:	4152      	adcs	r2, r2
    337e:	0883      	lsrs	r3, r0, #2
    3380:	428b      	cmp	r3, r1
    3382:	d301      	bcc.n	3388 <__udivsi3+0xe4>
    3384:	008b      	lsls	r3, r1, #2
    3386:	1ac0      	subs	r0, r0, r3
    3388:	4152      	adcs	r2, r2
    338a:	0843      	lsrs	r3, r0, #1
    338c:	428b      	cmp	r3, r1
    338e:	d301      	bcc.n	3394 <__udivsi3+0xf0>
    3390:	004b      	lsls	r3, r1, #1
    3392:	1ac0      	subs	r0, r0, r3
    3394:	4152      	adcs	r2, r2
    3396:	1a41      	subs	r1, r0, r1
    3398:	d200      	bcs.n	339c <__udivsi3+0xf8>
    339a:	4601      	mov	r1, r0
    339c:	4152      	adcs	r2, r2
    339e:	4610      	mov	r0, r2
    33a0:	4770      	bx	lr
    33a2:	e7ff      	b.n	33a4 <__udivsi3+0x100>
    33a4:	b501      	push	{r0, lr}
    33a6:	2000      	movs	r0, #0
    33a8:	f000 f8f0 	bl	358c <__aeabi_idiv0>
    33ac:	bd02      	pop	{r1, pc}
    33ae:	46c0      	nop			; (mov r8, r8)

000033b0 <__aeabi_uidivmod>:
    33b0:	2900      	cmp	r1, #0
    33b2:	d0f7      	beq.n	33a4 <__udivsi3+0x100>
    33b4:	e776      	b.n	32a4 <__udivsi3>
    33b6:	4770      	bx	lr

000033b8 <__divsi3>:
    33b8:	4603      	mov	r3, r0
    33ba:	430b      	orrs	r3, r1
    33bc:	d47f      	bmi.n	34be <__divsi3+0x106>
    33be:	2200      	movs	r2, #0
    33c0:	0843      	lsrs	r3, r0, #1
    33c2:	428b      	cmp	r3, r1
    33c4:	d374      	bcc.n	34b0 <__divsi3+0xf8>
    33c6:	0903      	lsrs	r3, r0, #4
    33c8:	428b      	cmp	r3, r1
    33ca:	d35f      	bcc.n	348c <__divsi3+0xd4>
    33cc:	0a03      	lsrs	r3, r0, #8
    33ce:	428b      	cmp	r3, r1
    33d0:	d344      	bcc.n	345c <__divsi3+0xa4>
    33d2:	0b03      	lsrs	r3, r0, #12
    33d4:	428b      	cmp	r3, r1
    33d6:	d328      	bcc.n	342a <__divsi3+0x72>
    33d8:	0c03      	lsrs	r3, r0, #16
    33da:	428b      	cmp	r3, r1
    33dc:	d30d      	bcc.n	33fa <__divsi3+0x42>
    33de:	22ff      	movs	r2, #255	; 0xff
    33e0:	0209      	lsls	r1, r1, #8
    33e2:	ba12      	rev	r2, r2
    33e4:	0c03      	lsrs	r3, r0, #16
    33e6:	428b      	cmp	r3, r1
    33e8:	d302      	bcc.n	33f0 <__divsi3+0x38>
    33ea:	1212      	asrs	r2, r2, #8
    33ec:	0209      	lsls	r1, r1, #8
    33ee:	d065      	beq.n	34bc <__divsi3+0x104>
    33f0:	0b03      	lsrs	r3, r0, #12
    33f2:	428b      	cmp	r3, r1
    33f4:	d319      	bcc.n	342a <__divsi3+0x72>
    33f6:	e000      	b.n	33fa <__divsi3+0x42>
    33f8:	0a09      	lsrs	r1, r1, #8
    33fa:	0bc3      	lsrs	r3, r0, #15
    33fc:	428b      	cmp	r3, r1
    33fe:	d301      	bcc.n	3404 <__divsi3+0x4c>
    3400:	03cb      	lsls	r3, r1, #15
    3402:	1ac0      	subs	r0, r0, r3
    3404:	4152      	adcs	r2, r2
    3406:	0b83      	lsrs	r3, r0, #14
    3408:	428b      	cmp	r3, r1
    340a:	d301      	bcc.n	3410 <__divsi3+0x58>
    340c:	038b      	lsls	r3, r1, #14
    340e:	1ac0      	subs	r0, r0, r3
    3410:	4152      	adcs	r2, r2
    3412:	0b43      	lsrs	r3, r0, #13
    3414:	428b      	cmp	r3, r1
    3416:	d301      	bcc.n	341c <__divsi3+0x64>
    3418:	034b      	lsls	r3, r1, #13
    341a:	1ac0      	subs	r0, r0, r3
    341c:	4152      	adcs	r2, r2
    341e:	0b03      	lsrs	r3, r0, #12
    3420:	428b      	cmp	r3, r1
    3422:	d301      	bcc.n	3428 <__divsi3+0x70>
    3424:	030b      	lsls	r3, r1, #12
    3426:	1ac0      	subs	r0, r0, r3
    3428:	4152      	adcs	r2, r2
    342a:	0ac3      	lsrs	r3, r0, #11
    342c:	428b      	cmp	r3, r1
    342e:	d301      	bcc.n	3434 <__divsi3+0x7c>
    3430:	02cb      	lsls	r3, r1, #11
    3432:	1ac0      	subs	r0, r0, r3
    3434:	4152      	adcs	r2, r2
    3436:	0a83      	lsrs	r3, r0, #10
    3438:	428b      	cmp	r3, r1
    343a:	d301      	bcc.n	3440 <__divsi3+0x88>
    343c:	028b      	lsls	r3, r1, #10
    343e:	1ac0      	subs	r0, r0, r3
    3440:	4152      	adcs	r2, r2
    3442:	0a43      	lsrs	r3, r0, #9
    3444:	428b      	cmp	r3, r1
    3446:	d301      	bcc.n	344c <__divsi3+0x94>
    3448:	024b      	lsls	r3, r1, #9
    344a:	1ac0      	subs	r0, r0, r3
    344c:	4152      	adcs	r2, r2
    344e:	0a03      	lsrs	r3, r0, #8
    3450:	428b      	cmp	r3, r1
    3452:	d301      	bcc.n	3458 <__divsi3+0xa0>
    3454:	020b      	lsls	r3, r1, #8
    3456:	1ac0      	subs	r0, r0, r3
    3458:	4152      	adcs	r2, r2
    345a:	d2cd      	bcs.n	33f8 <__divsi3+0x40>
    345c:	09c3      	lsrs	r3, r0, #7
    345e:	428b      	cmp	r3, r1
    3460:	d301      	bcc.n	3466 <__divsi3+0xae>
    3462:	01cb      	lsls	r3, r1, #7
    3464:	1ac0      	subs	r0, r0, r3
    3466:	4152      	adcs	r2, r2
    3468:	0983      	lsrs	r3, r0, #6
    346a:	428b      	cmp	r3, r1
    346c:	d301      	bcc.n	3472 <__divsi3+0xba>
    346e:	018b      	lsls	r3, r1, #6
    3470:	1ac0      	subs	r0, r0, r3
    3472:	4152      	adcs	r2, r2
    3474:	0943      	lsrs	r3, r0, #5
    3476:	428b      	cmp	r3, r1
    3478:	d301      	bcc.n	347e <__divsi3+0xc6>
    347a:	014b      	lsls	r3, r1, #5
    347c:	1ac0      	subs	r0, r0, r3
    347e:	4152      	adcs	r2, r2
    3480:	0903      	lsrs	r3, r0, #4
    3482:	428b      	cmp	r3, r1
    3484:	d301      	bcc.n	348a <__divsi3+0xd2>
    3486:	010b      	lsls	r3, r1, #4
    3488:	1ac0      	subs	r0, r0, r3
    348a:	4152      	adcs	r2, r2
    348c:	08c3      	lsrs	r3, r0, #3
    348e:	428b      	cmp	r3, r1
    3490:	d301      	bcc.n	3496 <__divsi3+0xde>
    3492:	00cb      	lsls	r3, r1, #3
    3494:	1ac0      	subs	r0, r0, r3
    3496:	4152      	adcs	r2, r2
    3498:	0883      	lsrs	r3, r0, #2
    349a:	428b      	cmp	r3, r1
    349c:	d301      	bcc.n	34a2 <__divsi3+0xea>
    349e:	008b      	lsls	r3, r1, #2
    34a0:	1ac0      	subs	r0, r0, r3
    34a2:	4152      	adcs	r2, r2
    34a4:	0843      	lsrs	r3, r0, #1
    34a6:	428b      	cmp	r3, r1
    34a8:	d301      	bcc.n	34ae <__divsi3+0xf6>
    34aa:	004b      	lsls	r3, r1, #1
    34ac:	1ac0      	subs	r0, r0, r3
    34ae:	4152      	adcs	r2, r2
    34b0:	1a41      	subs	r1, r0, r1
    34b2:	d200      	bcs.n	34b6 <__divsi3+0xfe>
    34b4:	4601      	mov	r1, r0
    34b6:	4152      	adcs	r2, r2
    34b8:	4610      	mov	r0, r2
    34ba:	4770      	bx	lr
    34bc:	e05d      	b.n	357a <__divsi3+0x1c2>
    34be:	0fca      	lsrs	r2, r1, #31
    34c0:	d000      	beq.n	34c4 <__divsi3+0x10c>
    34c2:	4249      	negs	r1, r1
    34c4:	1003      	asrs	r3, r0, #32
    34c6:	d300      	bcc.n	34ca <__divsi3+0x112>
    34c8:	4240      	negs	r0, r0
    34ca:	4053      	eors	r3, r2
    34cc:	2200      	movs	r2, #0
    34ce:	469c      	mov	ip, r3
    34d0:	0903      	lsrs	r3, r0, #4
    34d2:	428b      	cmp	r3, r1
    34d4:	d32d      	bcc.n	3532 <__divsi3+0x17a>
    34d6:	0a03      	lsrs	r3, r0, #8
    34d8:	428b      	cmp	r3, r1
    34da:	d312      	bcc.n	3502 <__divsi3+0x14a>
    34dc:	22fc      	movs	r2, #252	; 0xfc
    34de:	0189      	lsls	r1, r1, #6
    34e0:	ba12      	rev	r2, r2
    34e2:	0a03      	lsrs	r3, r0, #8
    34e4:	428b      	cmp	r3, r1
    34e6:	d30c      	bcc.n	3502 <__divsi3+0x14a>
    34e8:	0189      	lsls	r1, r1, #6
    34ea:	1192      	asrs	r2, r2, #6
    34ec:	428b      	cmp	r3, r1
    34ee:	d308      	bcc.n	3502 <__divsi3+0x14a>
    34f0:	0189      	lsls	r1, r1, #6
    34f2:	1192      	asrs	r2, r2, #6
    34f4:	428b      	cmp	r3, r1
    34f6:	d304      	bcc.n	3502 <__divsi3+0x14a>
    34f8:	0189      	lsls	r1, r1, #6
    34fa:	d03a      	beq.n	3572 <__divsi3+0x1ba>
    34fc:	1192      	asrs	r2, r2, #6
    34fe:	e000      	b.n	3502 <__divsi3+0x14a>
    3500:	0989      	lsrs	r1, r1, #6
    3502:	09c3      	lsrs	r3, r0, #7
    3504:	428b      	cmp	r3, r1
    3506:	d301      	bcc.n	350c <__divsi3+0x154>
    3508:	01cb      	lsls	r3, r1, #7
    350a:	1ac0      	subs	r0, r0, r3
    350c:	4152      	adcs	r2, r2
    350e:	0983      	lsrs	r3, r0, #6
    3510:	428b      	cmp	r3, r1
    3512:	d301      	bcc.n	3518 <__divsi3+0x160>
    3514:	018b      	lsls	r3, r1, #6
    3516:	1ac0      	subs	r0, r0, r3
    3518:	4152      	adcs	r2, r2
    351a:	0943      	lsrs	r3, r0, #5
    351c:	428b      	cmp	r3, r1
    351e:	d301      	bcc.n	3524 <__divsi3+0x16c>
    3520:	014b      	lsls	r3, r1, #5
    3522:	1ac0      	subs	r0, r0, r3
    3524:	4152      	adcs	r2, r2
    3526:	0903      	lsrs	r3, r0, #4
    3528:	428b      	cmp	r3, r1
    352a:	d301      	bcc.n	3530 <__divsi3+0x178>
    352c:	010b      	lsls	r3, r1, #4
    352e:	1ac0      	subs	r0, r0, r3
    3530:	4152      	adcs	r2, r2
    3532:	08c3      	lsrs	r3, r0, #3
    3534:	428b      	cmp	r3, r1
    3536:	d301      	bcc.n	353c <__divsi3+0x184>
    3538:	00cb      	lsls	r3, r1, #3
    353a:	1ac0      	subs	r0, r0, r3
    353c:	4152      	adcs	r2, r2
    353e:	0883      	lsrs	r3, r0, #2
    3540:	428b      	cmp	r3, r1
    3542:	d301      	bcc.n	3548 <__divsi3+0x190>
    3544:	008b      	lsls	r3, r1, #2
    3546:	1ac0      	subs	r0, r0, r3
    3548:	4152      	adcs	r2, r2
    354a:	d2d9      	bcs.n	3500 <__divsi3+0x148>
    354c:	0843      	lsrs	r3, r0, #1
    354e:	428b      	cmp	r3, r1
    3550:	d301      	bcc.n	3556 <__divsi3+0x19e>
    3552:	004b      	lsls	r3, r1, #1
    3554:	1ac0      	subs	r0, r0, r3
    3556:	4152      	adcs	r2, r2
    3558:	1a41      	subs	r1, r0, r1
    355a:	d200      	bcs.n	355e <__divsi3+0x1a6>
    355c:	4601      	mov	r1, r0
    355e:	4663      	mov	r3, ip
    3560:	4152      	adcs	r2, r2
    3562:	105b      	asrs	r3, r3, #1
    3564:	4610      	mov	r0, r2
    3566:	d301      	bcc.n	356c <__divsi3+0x1b4>
    3568:	4240      	negs	r0, r0
    356a:	2b00      	cmp	r3, #0
    356c:	d500      	bpl.n	3570 <__divsi3+0x1b8>
    356e:	4249      	negs	r1, r1
    3570:	4770      	bx	lr
    3572:	4663      	mov	r3, ip
    3574:	105b      	asrs	r3, r3, #1
    3576:	d300      	bcc.n	357a <__divsi3+0x1c2>
    3578:	4240      	negs	r0, r0
    357a:	b501      	push	{r0, lr}
    357c:	2000      	movs	r0, #0
    357e:	f000 f805 	bl	358c <__aeabi_idiv0>
    3582:	bd02      	pop	{r1, pc}

00003584 <__aeabi_idivmod>:
    3584:	2900      	cmp	r1, #0
    3586:	d0f8      	beq.n	357a <__divsi3+0x1c2>
    3588:	e716      	b.n	33b8 <__divsi3>
    358a:	4770      	bx	lr

0000358c <__aeabi_idiv0>:
    358c:	4770      	bx	lr
    358e:	46c0      	nop			; (mov r8, r8)

00003590 <__aeabi_d2uiz>:
    3590:	b570      	push	{r4, r5, r6, lr}
    3592:	2200      	movs	r2, #0
    3594:	4b0c      	ldr	r3, [pc, #48]	; (35c8 <__aeabi_d2uiz+0x38>)
    3596:	0004      	movs	r4, r0
    3598:	000d      	movs	r5, r1
    359a:	f002 f8e9 	bl	5770 <__aeabi_dcmpge>
    359e:	2800      	cmp	r0, #0
    35a0:	d104      	bne.n	35ac <__aeabi_d2uiz+0x1c>
    35a2:	0020      	movs	r0, r4
    35a4:	0029      	movs	r1, r5
    35a6:	f001 ff5d 	bl	5464 <__aeabi_d2iz>
    35aa:	bd70      	pop	{r4, r5, r6, pc}
    35ac:	4b06      	ldr	r3, [pc, #24]	; (35c8 <__aeabi_d2uiz+0x38>)
    35ae:	2200      	movs	r2, #0
    35b0:	0020      	movs	r0, r4
    35b2:	0029      	movs	r1, r5
    35b4:	f001 fc40 	bl	4e38 <__aeabi_dsub>
    35b8:	f001 ff54 	bl	5464 <__aeabi_d2iz>
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	061b      	lsls	r3, r3, #24
    35c0:	469c      	mov	ip, r3
    35c2:	4460      	add	r0, ip
    35c4:	e7f1      	b.n	35aa <__aeabi_d2uiz+0x1a>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	41e00000 	.word	0x41e00000

000035cc <__aeabi_fmul>:
    35cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ce:	4657      	mov	r7, sl
    35d0:	464e      	mov	r6, r9
    35d2:	4645      	mov	r5, r8
    35d4:	46de      	mov	lr, fp
    35d6:	b5e0      	push	{r5, r6, r7, lr}
    35d8:	0247      	lsls	r7, r0, #9
    35da:	0046      	lsls	r6, r0, #1
    35dc:	4688      	mov	r8, r1
    35de:	0a7f      	lsrs	r7, r7, #9
    35e0:	0e36      	lsrs	r6, r6, #24
    35e2:	0fc4      	lsrs	r4, r0, #31
    35e4:	2e00      	cmp	r6, #0
    35e6:	d047      	beq.n	3678 <__aeabi_fmul+0xac>
    35e8:	2eff      	cmp	r6, #255	; 0xff
    35ea:	d024      	beq.n	3636 <__aeabi_fmul+0x6a>
    35ec:	00fb      	lsls	r3, r7, #3
    35ee:	2780      	movs	r7, #128	; 0x80
    35f0:	04ff      	lsls	r7, r7, #19
    35f2:	431f      	orrs	r7, r3
    35f4:	2300      	movs	r3, #0
    35f6:	4699      	mov	r9, r3
    35f8:	469a      	mov	sl, r3
    35fa:	3e7f      	subs	r6, #127	; 0x7f
    35fc:	4643      	mov	r3, r8
    35fe:	025d      	lsls	r5, r3, #9
    3600:	0058      	lsls	r0, r3, #1
    3602:	0fdb      	lsrs	r3, r3, #31
    3604:	0a6d      	lsrs	r5, r5, #9
    3606:	0e00      	lsrs	r0, r0, #24
    3608:	4698      	mov	r8, r3
    360a:	d043      	beq.n	3694 <__aeabi_fmul+0xc8>
    360c:	28ff      	cmp	r0, #255	; 0xff
    360e:	d03b      	beq.n	3688 <__aeabi_fmul+0xbc>
    3610:	00eb      	lsls	r3, r5, #3
    3612:	2580      	movs	r5, #128	; 0x80
    3614:	2200      	movs	r2, #0
    3616:	04ed      	lsls	r5, r5, #19
    3618:	431d      	orrs	r5, r3
    361a:	387f      	subs	r0, #127	; 0x7f
    361c:	1836      	adds	r6, r6, r0
    361e:	1c73      	adds	r3, r6, #1
    3620:	4641      	mov	r1, r8
    3622:	469b      	mov	fp, r3
    3624:	464b      	mov	r3, r9
    3626:	4061      	eors	r1, r4
    3628:	4313      	orrs	r3, r2
    362a:	2b0f      	cmp	r3, #15
    362c:	d864      	bhi.n	36f8 <__aeabi_fmul+0x12c>
    362e:	4875      	ldr	r0, [pc, #468]	; (3804 <__aeabi_fmul+0x238>)
    3630:	009b      	lsls	r3, r3, #2
    3632:	58c3      	ldr	r3, [r0, r3]
    3634:	469f      	mov	pc, r3
    3636:	2f00      	cmp	r7, #0
    3638:	d142      	bne.n	36c0 <__aeabi_fmul+0xf4>
    363a:	2308      	movs	r3, #8
    363c:	4699      	mov	r9, r3
    363e:	3b06      	subs	r3, #6
    3640:	26ff      	movs	r6, #255	; 0xff
    3642:	469a      	mov	sl, r3
    3644:	e7da      	b.n	35fc <__aeabi_fmul+0x30>
    3646:	4641      	mov	r1, r8
    3648:	2a02      	cmp	r2, #2
    364a:	d028      	beq.n	369e <__aeabi_fmul+0xd2>
    364c:	2a03      	cmp	r2, #3
    364e:	d100      	bne.n	3652 <__aeabi_fmul+0x86>
    3650:	e0ce      	b.n	37f0 <__aeabi_fmul+0x224>
    3652:	2a01      	cmp	r2, #1
    3654:	d000      	beq.n	3658 <__aeabi_fmul+0x8c>
    3656:	e0ac      	b.n	37b2 <__aeabi_fmul+0x1e6>
    3658:	4011      	ands	r1, r2
    365a:	2000      	movs	r0, #0
    365c:	2200      	movs	r2, #0
    365e:	b2cc      	uxtb	r4, r1
    3660:	0240      	lsls	r0, r0, #9
    3662:	05d2      	lsls	r2, r2, #23
    3664:	0a40      	lsrs	r0, r0, #9
    3666:	07e4      	lsls	r4, r4, #31
    3668:	4310      	orrs	r0, r2
    366a:	4320      	orrs	r0, r4
    366c:	bc3c      	pop	{r2, r3, r4, r5}
    366e:	4690      	mov	r8, r2
    3670:	4699      	mov	r9, r3
    3672:	46a2      	mov	sl, r4
    3674:	46ab      	mov	fp, r5
    3676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3678:	2f00      	cmp	r7, #0
    367a:	d115      	bne.n	36a8 <__aeabi_fmul+0xdc>
    367c:	2304      	movs	r3, #4
    367e:	4699      	mov	r9, r3
    3680:	3b03      	subs	r3, #3
    3682:	2600      	movs	r6, #0
    3684:	469a      	mov	sl, r3
    3686:	e7b9      	b.n	35fc <__aeabi_fmul+0x30>
    3688:	20ff      	movs	r0, #255	; 0xff
    368a:	2202      	movs	r2, #2
    368c:	2d00      	cmp	r5, #0
    368e:	d0c5      	beq.n	361c <__aeabi_fmul+0x50>
    3690:	2203      	movs	r2, #3
    3692:	e7c3      	b.n	361c <__aeabi_fmul+0x50>
    3694:	2d00      	cmp	r5, #0
    3696:	d119      	bne.n	36cc <__aeabi_fmul+0x100>
    3698:	2000      	movs	r0, #0
    369a:	2201      	movs	r2, #1
    369c:	e7be      	b.n	361c <__aeabi_fmul+0x50>
    369e:	2401      	movs	r4, #1
    36a0:	22ff      	movs	r2, #255	; 0xff
    36a2:	400c      	ands	r4, r1
    36a4:	2000      	movs	r0, #0
    36a6:	e7db      	b.n	3660 <__aeabi_fmul+0x94>
    36a8:	0038      	movs	r0, r7
    36aa:	f002 f86b 	bl	5784 <__clzsi2>
    36ae:	2676      	movs	r6, #118	; 0x76
    36b0:	1f43      	subs	r3, r0, #5
    36b2:	409f      	lsls	r7, r3
    36b4:	2300      	movs	r3, #0
    36b6:	4276      	negs	r6, r6
    36b8:	1a36      	subs	r6, r6, r0
    36ba:	4699      	mov	r9, r3
    36bc:	469a      	mov	sl, r3
    36be:	e79d      	b.n	35fc <__aeabi_fmul+0x30>
    36c0:	230c      	movs	r3, #12
    36c2:	4699      	mov	r9, r3
    36c4:	3b09      	subs	r3, #9
    36c6:	26ff      	movs	r6, #255	; 0xff
    36c8:	469a      	mov	sl, r3
    36ca:	e797      	b.n	35fc <__aeabi_fmul+0x30>
    36cc:	0028      	movs	r0, r5
    36ce:	f002 f859 	bl	5784 <__clzsi2>
    36d2:	1f43      	subs	r3, r0, #5
    36d4:	409d      	lsls	r5, r3
    36d6:	2376      	movs	r3, #118	; 0x76
    36d8:	425b      	negs	r3, r3
    36da:	1a18      	subs	r0, r3, r0
    36dc:	2200      	movs	r2, #0
    36de:	e79d      	b.n	361c <__aeabi_fmul+0x50>
    36e0:	2080      	movs	r0, #128	; 0x80
    36e2:	2400      	movs	r4, #0
    36e4:	03c0      	lsls	r0, r0, #15
    36e6:	22ff      	movs	r2, #255	; 0xff
    36e8:	e7ba      	b.n	3660 <__aeabi_fmul+0x94>
    36ea:	003d      	movs	r5, r7
    36ec:	4652      	mov	r2, sl
    36ee:	e7ab      	b.n	3648 <__aeabi_fmul+0x7c>
    36f0:	003d      	movs	r5, r7
    36f2:	0021      	movs	r1, r4
    36f4:	4652      	mov	r2, sl
    36f6:	e7a7      	b.n	3648 <__aeabi_fmul+0x7c>
    36f8:	0c3b      	lsrs	r3, r7, #16
    36fa:	469c      	mov	ip, r3
    36fc:	042a      	lsls	r2, r5, #16
    36fe:	0c12      	lsrs	r2, r2, #16
    3700:	0c2b      	lsrs	r3, r5, #16
    3702:	0014      	movs	r4, r2
    3704:	4660      	mov	r0, ip
    3706:	4665      	mov	r5, ip
    3708:	043f      	lsls	r7, r7, #16
    370a:	0c3f      	lsrs	r7, r7, #16
    370c:	437c      	muls	r4, r7
    370e:	4342      	muls	r2, r0
    3710:	435d      	muls	r5, r3
    3712:	437b      	muls	r3, r7
    3714:	0c27      	lsrs	r7, r4, #16
    3716:	189b      	adds	r3, r3, r2
    3718:	18ff      	adds	r7, r7, r3
    371a:	42ba      	cmp	r2, r7
    371c:	d903      	bls.n	3726 <__aeabi_fmul+0x15a>
    371e:	2380      	movs	r3, #128	; 0x80
    3720:	025b      	lsls	r3, r3, #9
    3722:	469c      	mov	ip, r3
    3724:	4465      	add	r5, ip
    3726:	0424      	lsls	r4, r4, #16
    3728:	043a      	lsls	r2, r7, #16
    372a:	0c24      	lsrs	r4, r4, #16
    372c:	1912      	adds	r2, r2, r4
    372e:	0193      	lsls	r3, r2, #6
    3730:	1e5c      	subs	r4, r3, #1
    3732:	41a3      	sbcs	r3, r4
    3734:	0c3f      	lsrs	r7, r7, #16
    3736:	0e92      	lsrs	r2, r2, #26
    3738:	197d      	adds	r5, r7, r5
    373a:	431a      	orrs	r2, r3
    373c:	01ad      	lsls	r5, r5, #6
    373e:	4315      	orrs	r5, r2
    3740:	012b      	lsls	r3, r5, #4
    3742:	d504      	bpl.n	374e <__aeabi_fmul+0x182>
    3744:	2301      	movs	r3, #1
    3746:	465e      	mov	r6, fp
    3748:	086a      	lsrs	r2, r5, #1
    374a:	401d      	ands	r5, r3
    374c:	4315      	orrs	r5, r2
    374e:	0032      	movs	r2, r6
    3750:	327f      	adds	r2, #127	; 0x7f
    3752:	2a00      	cmp	r2, #0
    3754:	dd25      	ble.n	37a2 <__aeabi_fmul+0x1d6>
    3756:	076b      	lsls	r3, r5, #29
    3758:	d004      	beq.n	3764 <__aeabi_fmul+0x198>
    375a:	230f      	movs	r3, #15
    375c:	402b      	ands	r3, r5
    375e:	2b04      	cmp	r3, #4
    3760:	d000      	beq.n	3764 <__aeabi_fmul+0x198>
    3762:	3504      	adds	r5, #4
    3764:	012b      	lsls	r3, r5, #4
    3766:	d503      	bpl.n	3770 <__aeabi_fmul+0x1a4>
    3768:	0032      	movs	r2, r6
    376a:	4b27      	ldr	r3, [pc, #156]	; (3808 <__aeabi_fmul+0x23c>)
    376c:	3280      	adds	r2, #128	; 0x80
    376e:	401d      	ands	r5, r3
    3770:	2afe      	cmp	r2, #254	; 0xfe
    3772:	dc94      	bgt.n	369e <__aeabi_fmul+0xd2>
    3774:	2401      	movs	r4, #1
    3776:	01a8      	lsls	r0, r5, #6
    3778:	0a40      	lsrs	r0, r0, #9
    377a:	b2d2      	uxtb	r2, r2
    377c:	400c      	ands	r4, r1
    377e:	e76f      	b.n	3660 <__aeabi_fmul+0x94>
    3780:	2080      	movs	r0, #128	; 0x80
    3782:	03c0      	lsls	r0, r0, #15
    3784:	4207      	tst	r7, r0
    3786:	d007      	beq.n	3798 <__aeabi_fmul+0x1cc>
    3788:	4205      	tst	r5, r0
    378a:	d105      	bne.n	3798 <__aeabi_fmul+0x1cc>
    378c:	4328      	orrs	r0, r5
    378e:	0240      	lsls	r0, r0, #9
    3790:	0a40      	lsrs	r0, r0, #9
    3792:	4644      	mov	r4, r8
    3794:	22ff      	movs	r2, #255	; 0xff
    3796:	e763      	b.n	3660 <__aeabi_fmul+0x94>
    3798:	4338      	orrs	r0, r7
    379a:	0240      	lsls	r0, r0, #9
    379c:	0a40      	lsrs	r0, r0, #9
    379e:	22ff      	movs	r2, #255	; 0xff
    37a0:	e75e      	b.n	3660 <__aeabi_fmul+0x94>
    37a2:	2401      	movs	r4, #1
    37a4:	1aa3      	subs	r3, r4, r2
    37a6:	2b1b      	cmp	r3, #27
    37a8:	dd05      	ble.n	37b6 <__aeabi_fmul+0x1ea>
    37aa:	400c      	ands	r4, r1
    37ac:	2200      	movs	r2, #0
    37ae:	2000      	movs	r0, #0
    37b0:	e756      	b.n	3660 <__aeabi_fmul+0x94>
    37b2:	465e      	mov	r6, fp
    37b4:	e7cb      	b.n	374e <__aeabi_fmul+0x182>
    37b6:	002a      	movs	r2, r5
    37b8:	2020      	movs	r0, #32
    37ba:	40da      	lsrs	r2, r3
    37bc:	1ac3      	subs	r3, r0, r3
    37be:	409d      	lsls	r5, r3
    37c0:	002b      	movs	r3, r5
    37c2:	1e5d      	subs	r5, r3, #1
    37c4:	41ab      	sbcs	r3, r5
    37c6:	4313      	orrs	r3, r2
    37c8:	075a      	lsls	r2, r3, #29
    37ca:	d004      	beq.n	37d6 <__aeabi_fmul+0x20a>
    37cc:	220f      	movs	r2, #15
    37ce:	401a      	ands	r2, r3
    37d0:	2a04      	cmp	r2, #4
    37d2:	d000      	beq.n	37d6 <__aeabi_fmul+0x20a>
    37d4:	3304      	adds	r3, #4
    37d6:	015a      	lsls	r2, r3, #5
    37d8:	d504      	bpl.n	37e4 <__aeabi_fmul+0x218>
    37da:	2401      	movs	r4, #1
    37dc:	2201      	movs	r2, #1
    37de:	400c      	ands	r4, r1
    37e0:	2000      	movs	r0, #0
    37e2:	e73d      	b.n	3660 <__aeabi_fmul+0x94>
    37e4:	2401      	movs	r4, #1
    37e6:	019b      	lsls	r3, r3, #6
    37e8:	0a58      	lsrs	r0, r3, #9
    37ea:	400c      	ands	r4, r1
    37ec:	2200      	movs	r2, #0
    37ee:	e737      	b.n	3660 <__aeabi_fmul+0x94>
    37f0:	2080      	movs	r0, #128	; 0x80
    37f2:	2401      	movs	r4, #1
    37f4:	03c0      	lsls	r0, r0, #15
    37f6:	4328      	orrs	r0, r5
    37f8:	0240      	lsls	r0, r0, #9
    37fa:	0a40      	lsrs	r0, r0, #9
    37fc:	400c      	ands	r4, r1
    37fe:	22ff      	movs	r2, #255	; 0xff
    3800:	e72e      	b.n	3660 <__aeabi_fmul+0x94>
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	00007e04 	.word	0x00007e04
    3808:	f7ffffff 	.word	0xf7ffffff

0000380c <__aeabi_fsub>:
    380c:	b5f0      	push	{r4, r5, r6, r7, lr}
    380e:	464f      	mov	r7, r9
    3810:	46d6      	mov	lr, sl
    3812:	4646      	mov	r6, r8
    3814:	0044      	lsls	r4, r0, #1
    3816:	b5c0      	push	{r6, r7, lr}
    3818:	0fc2      	lsrs	r2, r0, #31
    381a:	0247      	lsls	r7, r0, #9
    381c:	0248      	lsls	r0, r1, #9
    381e:	0a40      	lsrs	r0, r0, #9
    3820:	4684      	mov	ip, r0
    3822:	4666      	mov	r6, ip
    3824:	0a7b      	lsrs	r3, r7, #9
    3826:	0048      	lsls	r0, r1, #1
    3828:	0fc9      	lsrs	r1, r1, #31
    382a:	469a      	mov	sl, r3
    382c:	0e24      	lsrs	r4, r4, #24
    382e:	0015      	movs	r5, r2
    3830:	00db      	lsls	r3, r3, #3
    3832:	0e00      	lsrs	r0, r0, #24
    3834:	4689      	mov	r9, r1
    3836:	00f6      	lsls	r6, r6, #3
    3838:	28ff      	cmp	r0, #255	; 0xff
    383a:	d100      	bne.n	383e <__aeabi_fsub+0x32>
    383c:	e08f      	b.n	395e <__aeabi_fsub+0x152>
    383e:	2101      	movs	r1, #1
    3840:	464f      	mov	r7, r9
    3842:	404f      	eors	r7, r1
    3844:	0039      	movs	r1, r7
    3846:	4291      	cmp	r1, r2
    3848:	d066      	beq.n	3918 <__aeabi_fsub+0x10c>
    384a:	1a22      	subs	r2, r4, r0
    384c:	2a00      	cmp	r2, #0
    384e:	dc00      	bgt.n	3852 <__aeabi_fsub+0x46>
    3850:	e09d      	b.n	398e <__aeabi_fsub+0x182>
    3852:	2800      	cmp	r0, #0
    3854:	d13d      	bne.n	38d2 <__aeabi_fsub+0xc6>
    3856:	2e00      	cmp	r6, #0
    3858:	d100      	bne.n	385c <__aeabi_fsub+0x50>
    385a:	e08b      	b.n	3974 <__aeabi_fsub+0x168>
    385c:	1e51      	subs	r1, r2, #1
    385e:	2900      	cmp	r1, #0
    3860:	d000      	beq.n	3864 <__aeabi_fsub+0x58>
    3862:	e0b5      	b.n	39d0 <__aeabi_fsub+0x1c4>
    3864:	2401      	movs	r4, #1
    3866:	1b9b      	subs	r3, r3, r6
    3868:	015a      	lsls	r2, r3, #5
    386a:	d544      	bpl.n	38f6 <__aeabi_fsub+0xea>
    386c:	019b      	lsls	r3, r3, #6
    386e:	099f      	lsrs	r7, r3, #6
    3870:	0038      	movs	r0, r7
    3872:	f001 ff87 	bl	5784 <__clzsi2>
    3876:	3805      	subs	r0, #5
    3878:	4087      	lsls	r7, r0
    387a:	4284      	cmp	r4, r0
    387c:	dd00      	ble.n	3880 <__aeabi_fsub+0x74>
    387e:	e096      	b.n	39ae <__aeabi_fsub+0x1a2>
    3880:	1b04      	subs	r4, r0, r4
    3882:	003a      	movs	r2, r7
    3884:	2020      	movs	r0, #32
    3886:	3401      	adds	r4, #1
    3888:	40e2      	lsrs	r2, r4
    388a:	1b04      	subs	r4, r0, r4
    388c:	40a7      	lsls	r7, r4
    388e:	003b      	movs	r3, r7
    3890:	1e5f      	subs	r7, r3, #1
    3892:	41bb      	sbcs	r3, r7
    3894:	2400      	movs	r4, #0
    3896:	4313      	orrs	r3, r2
    3898:	075a      	lsls	r2, r3, #29
    389a:	d004      	beq.n	38a6 <__aeabi_fsub+0x9a>
    389c:	220f      	movs	r2, #15
    389e:	401a      	ands	r2, r3
    38a0:	2a04      	cmp	r2, #4
    38a2:	d000      	beq.n	38a6 <__aeabi_fsub+0x9a>
    38a4:	3304      	adds	r3, #4
    38a6:	015a      	lsls	r2, r3, #5
    38a8:	d527      	bpl.n	38fa <__aeabi_fsub+0xee>
    38aa:	3401      	adds	r4, #1
    38ac:	2cff      	cmp	r4, #255	; 0xff
    38ae:	d100      	bne.n	38b2 <__aeabi_fsub+0xa6>
    38b0:	e079      	b.n	39a6 <__aeabi_fsub+0x19a>
    38b2:	2201      	movs	r2, #1
    38b4:	019b      	lsls	r3, r3, #6
    38b6:	0a5b      	lsrs	r3, r3, #9
    38b8:	b2e4      	uxtb	r4, r4
    38ba:	402a      	ands	r2, r5
    38bc:	025b      	lsls	r3, r3, #9
    38be:	05e4      	lsls	r4, r4, #23
    38c0:	0a58      	lsrs	r0, r3, #9
    38c2:	07d2      	lsls	r2, r2, #31
    38c4:	4320      	orrs	r0, r4
    38c6:	4310      	orrs	r0, r2
    38c8:	bc1c      	pop	{r2, r3, r4}
    38ca:	4690      	mov	r8, r2
    38cc:	4699      	mov	r9, r3
    38ce:	46a2      	mov	sl, r4
    38d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38d2:	2cff      	cmp	r4, #255	; 0xff
    38d4:	d0e0      	beq.n	3898 <__aeabi_fsub+0x8c>
    38d6:	2180      	movs	r1, #128	; 0x80
    38d8:	04c9      	lsls	r1, r1, #19
    38da:	430e      	orrs	r6, r1
    38dc:	2a1b      	cmp	r2, #27
    38de:	dc7b      	bgt.n	39d8 <__aeabi_fsub+0x1cc>
    38e0:	0031      	movs	r1, r6
    38e2:	2020      	movs	r0, #32
    38e4:	40d1      	lsrs	r1, r2
    38e6:	1a82      	subs	r2, r0, r2
    38e8:	4096      	lsls	r6, r2
    38ea:	1e72      	subs	r2, r6, #1
    38ec:	4196      	sbcs	r6, r2
    38ee:	430e      	orrs	r6, r1
    38f0:	1b9b      	subs	r3, r3, r6
    38f2:	015a      	lsls	r2, r3, #5
    38f4:	d4ba      	bmi.n	386c <__aeabi_fsub+0x60>
    38f6:	075a      	lsls	r2, r3, #29
    38f8:	d1d0      	bne.n	389c <__aeabi_fsub+0x90>
    38fa:	2201      	movs	r2, #1
    38fc:	08df      	lsrs	r7, r3, #3
    38fe:	402a      	ands	r2, r5
    3900:	2cff      	cmp	r4, #255	; 0xff
    3902:	d133      	bne.n	396c <__aeabi_fsub+0x160>
    3904:	2f00      	cmp	r7, #0
    3906:	d100      	bne.n	390a <__aeabi_fsub+0xfe>
    3908:	e0a8      	b.n	3a5c <__aeabi_fsub+0x250>
    390a:	2380      	movs	r3, #128	; 0x80
    390c:	03db      	lsls	r3, r3, #15
    390e:	433b      	orrs	r3, r7
    3910:	025b      	lsls	r3, r3, #9
    3912:	0a5b      	lsrs	r3, r3, #9
    3914:	24ff      	movs	r4, #255	; 0xff
    3916:	e7d1      	b.n	38bc <__aeabi_fsub+0xb0>
    3918:	1a21      	subs	r1, r4, r0
    391a:	2900      	cmp	r1, #0
    391c:	dd4c      	ble.n	39b8 <__aeabi_fsub+0x1ac>
    391e:	2800      	cmp	r0, #0
    3920:	d02a      	beq.n	3978 <__aeabi_fsub+0x16c>
    3922:	2cff      	cmp	r4, #255	; 0xff
    3924:	d0b8      	beq.n	3898 <__aeabi_fsub+0x8c>
    3926:	2080      	movs	r0, #128	; 0x80
    3928:	04c0      	lsls	r0, r0, #19
    392a:	4306      	orrs	r6, r0
    392c:	291b      	cmp	r1, #27
    392e:	dd00      	ble.n	3932 <__aeabi_fsub+0x126>
    3930:	e0af      	b.n	3a92 <__aeabi_fsub+0x286>
    3932:	0030      	movs	r0, r6
    3934:	2720      	movs	r7, #32
    3936:	40c8      	lsrs	r0, r1
    3938:	1a79      	subs	r1, r7, r1
    393a:	408e      	lsls	r6, r1
    393c:	1e71      	subs	r1, r6, #1
    393e:	418e      	sbcs	r6, r1
    3940:	4306      	orrs	r6, r0
    3942:	199b      	adds	r3, r3, r6
    3944:	0159      	lsls	r1, r3, #5
    3946:	d5d6      	bpl.n	38f6 <__aeabi_fsub+0xea>
    3948:	3401      	adds	r4, #1
    394a:	2cff      	cmp	r4, #255	; 0xff
    394c:	d100      	bne.n	3950 <__aeabi_fsub+0x144>
    394e:	e085      	b.n	3a5c <__aeabi_fsub+0x250>
    3950:	2201      	movs	r2, #1
    3952:	497a      	ldr	r1, [pc, #488]	; (3b3c <__aeabi_fsub+0x330>)
    3954:	401a      	ands	r2, r3
    3956:	085b      	lsrs	r3, r3, #1
    3958:	400b      	ands	r3, r1
    395a:	4313      	orrs	r3, r2
    395c:	e79c      	b.n	3898 <__aeabi_fsub+0x8c>
    395e:	2e00      	cmp	r6, #0
    3960:	d000      	beq.n	3964 <__aeabi_fsub+0x158>
    3962:	e770      	b.n	3846 <__aeabi_fsub+0x3a>
    3964:	e76b      	b.n	383e <__aeabi_fsub+0x32>
    3966:	1e3b      	subs	r3, r7, #0
    3968:	d1c5      	bne.n	38f6 <__aeabi_fsub+0xea>
    396a:	2200      	movs	r2, #0
    396c:	027b      	lsls	r3, r7, #9
    396e:	0a5b      	lsrs	r3, r3, #9
    3970:	b2e4      	uxtb	r4, r4
    3972:	e7a3      	b.n	38bc <__aeabi_fsub+0xb0>
    3974:	0014      	movs	r4, r2
    3976:	e78f      	b.n	3898 <__aeabi_fsub+0x8c>
    3978:	2e00      	cmp	r6, #0
    397a:	d04d      	beq.n	3a18 <__aeabi_fsub+0x20c>
    397c:	1e48      	subs	r0, r1, #1
    397e:	2800      	cmp	r0, #0
    3980:	d157      	bne.n	3a32 <__aeabi_fsub+0x226>
    3982:	199b      	adds	r3, r3, r6
    3984:	2401      	movs	r4, #1
    3986:	015a      	lsls	r2, r3, #5
    3988:	d5b5      	bpl.n	38f6 <__aeabi_fsub+0xea>
    398a:	2402      	movs	r4, #2
    398c:	e7e0      	b.n	3950 <__aeabi_fsub+0x144>
    398e:	2a00      	cmp	r2, #0
    3990:	d125      	bne.n	39de <__aeabi_fsub+0x1d2>
    3992:	1c62      	adds	r2, r4, #1
    3994:	b2d2      	uxtb	r2, r2
    3996:	2a01      	cmp	r2, #1
    3998:	dd72      	ble.n	3a80 <__aeabi_fsub+0x274>
    399a:	1b9f      	subs	r7, r3, r6
    399c:	017a      	lsls	r2, r7, #5
    399e:	d535      	bpl.n	3a0c <__aeabi_fsub+0x200>
    39a0:	1af7      	subs	r7, r6, r3
    39a2:	000d      	movs	r5, r1
    39a4:	e764      	b.n	3870 <__aeabi_fsub+0x64>
    39a6:	2201      	movs	r2, #1
    39a8:	2300      	movs	r3, #0
    39aa:	402a      	ands	r2, r5
    39ac:	e786      	b.n	38bc <__aeabi_fsub+0xb0>
    39ae:	003b      	movs	r3, r7
    39b0:	4a63      	ldr	r2, [pc, #396]	; (3b40 <__aeabi_fsub+0x334>)
    39b2:	1a24      	subs	r4, r4, r0
    39b4:	4013      	ands	r3, r2
    39b6:	e76f      	b.n	3898 <__aeabi_fsub+0x8c>
    39b8:	2900      	cmp	r1, #0
    39ba:	d16c      	bne.n	3a96 <__aeabi_fsub+0x28a>
    39bc:	1c61      	adds	r1, r4, #1
    39be:	b2c8      	uxtb	r0, r1
    39c0:	2801      	cmp	r0, #1
    39c2:	dd4e      	ble.n	3a62 <__aeabi_fsub+0x256>
    39c4:	29ff      	cmp	r1, #255	; 0xff
    39c6:	d049      	beq.n	3a5c <__aeabi_fsub+0x250>
    39c8:	199b      	adds	r3, r3, r6
    39ca:	085b      	lsrs	r3, r3, #1
    39cc:	000c      	movs	r4, r1
    39ce:	e763      	b.n	3898 <__aeabi_fsub+0x8c>
    39d0:	2aff      	cmp	r2, #255	; 0xff
    39d2:	d041      	beq.n	3a58 <__aeabi_fsub+0x24c>
    39d4:	000a      	movs	r2, r1
    39d6:	e781      	b.n	38dc <__aeabi_fsub+0xd0>
    39d8:	2601      	movs	r6, #1
    39da:	1b9b      	subs	r3, r3, r6
    39dc:	e789      	b.n	38f2 <__aeabi_fsub+0xe6>
    39de:	2c00      	cmp	r4, #0
    39e0:	d01c      	beq.n	3a1c <__aeabi_fsub+0x210>
    39e2:	28ff      	cmp	r0, #255	; 0xff
    39e4:	d021      	beq.n	3a2a <__aeabi_fsub+0x21e>
    39e6:	2480      	movs	r4, #128	; 0x80
    39e8:	04e4      	lsls	r4, r4, #19
    39ea:	4252      	negs	r2, r2
    39ec:	4323      	orrs	r3, r4
    39ee:	2a1b      	cmp	r2, #27
    39f0:	dd00      	ble.n	39f4 <__aeabi_fsub+0x1e8>
    39f2:	e096      	b.n	3b22 <__aeabi_fsub+0x316>
    39f4:	001c      	movs	r4, r3
    39f6:	2520      	movs	r5, #32
    39f8:	40d4      	lsrs	r4, r2
    39fa:	1aaa      	subs	r2, r5, r2
    39fc:	4093      	lsls	r3, r2
    39fe:	1e5a      	subs	r2, r3, #1
    3a00:	4193      	sbcs	r3, r2
    3a02:	4323      	orrs	r3, r4
    3a04:	1af3      	subs	r3, r6, r3
    3a06:	0004      	movs	r4, r0
    3a08:	000d      	movs	r5, r1
    3a0a:	e72d      	b.n	3868 <__aeabi_fsub+0x5c>
    3a0c:	2f00      	cmp	r7, #0
    3a0e:	d000      	beq.n	3a12 <__aeabi_fsub+0x206>
    3a10:	e72e      	b.n	3870 <__aeabi_fsub+0x64>
    3a12:	2200      	movs	r2, #0
    3a14:	2400      	movs	r4, #0
    3a16:	e7a9      	b.n	396c <__aeabi_fsub+0x160>
    3a18:	000c      	movs	r4, r1
    3a1a:	e73d      	b.n	3898 <__aeabi_fsub+0x8c>
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	d058      	beq.n	3ad2 <__aeabi_fsub+0x2c6>
    3a20:	43d2      	mvns	r2, r2
    3a22:	2a00      	cmp	r2, #0
    3a24:	d0ee      	beq.n	3a04 <__aeabi_fsub+0x1f8>
    3a26:	28ff      	cmp	r0, #255	; 0xff
    3a28:	d1e1      	bne.n	39ee <__aeabi_fsub+0x1e2>
    3a2a:	0033      	movs	r3, r6
    3a2c:	24ff      	movs	r4, #255	; 0xff
    3a2e:	000d      	movs	r5, r1
    3a30:	e732      	b.n	3898 <__aeabi_fsub+0x8c>
    3a32:	29ff      	cmp	r1, #255	; 0xff
    3a34:	d010      	beq.n	3a58 <__aeabi_fsub+0x24c>
    3a36:	0001      	movs	r1, r0
    3a38:	e778      	b.n	392c <__aeabi_fsub+0x120>
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d06e      	beq.n	3b1c <__aeabi_fsub+0x310>
    3a3e:	24ff      	movs	r4, #255	; 0xff
    3a40:	2e00      	cmp	r6, #0
    3a42:	d100      	bne.n	3a46 <__aeabi_fsub+0x23a>
    3a44:	e728      	b.n	3898 <__aeabi_fsub+0x8c>
    3a46:	2280      	movs	r2, #128	; 0x80
    3a48:	4651      	mov	r1, sl
    3a4a:	03d2      	lsls	r2, r2, #15
    3a4c:	4211      	tst	r1, r2
    3a4e:	d003      	beq.n	3a58 <__aeabi_fsub+0x24c>
    3a50:	4661      	mov	r1, ip
    3a52:	4211      	tst	r1, r2
    3a54:	d100      	bne.n	3a58 <__aeabi_fsub+0x24c>
    3a56:	0033      	movs	r3, r6
    3a58:	24ff      	movs	r4, #255	; 0xff
    3a5a:	e71d      	b.n	3898 <__aeabi_fsub+0x8c>
    3a5c:	24ff      	movs	r4, #255	; 0xff
    3a5e:	2300      	movs	r3, #0
    3a60:	e72c      	b.n	38bc <__aeabi_fsub+0xb0>
    3a62:	2c00      	cmp	r4, #0
    3a64:	d1e9      	bne.n	3a3a <__aeabi_fsub+0x22e>
    3a66:	2b00      	cmp	r3, #0
    3a68:	d063      	beq.n	3b32 <__aeabi_fsub+0x326>
    3a6a:	2e00      	cmp	r6, #0
    3a6c:	d100      	bne.n	3a70 <__aeabi_fsub+0x264>
    3a6e:	e713      	b.n	3898 <__aeabi_fsub+0x8c>
    3a70:	199b      	adds	r3, r3, r6
    3a72:	015a      	lsls	r2, r3, #5
    3a74:	d400      	bmi.n	3a78 <__aeabi_fsub+0x26c>
    3a76:	e73e      	b.n	38f6 <__aeabi_fsub+0xea>
    3a78:	4a31      	ldr	r2, [pc, #196]	; (3b40 <__aeabi_fsub+0x334>)
    3a7a:	000c      	movs	r4, r1
    3a7c:	4013      	ands	r3, r2
    3a7e:	e70b      	b.n	3898 <__aeabi_fsub+0x8c>
    3a80:	2c00      	cmp	r4, #0
    3a82:	d11e      	bne.n	3ac2 <__aeabi_fsub+0x2b6>
    3a84:	2b00      	cmp	r3, #0
    3a86:	d12f      	bne.n	3ae8 <__aeabi_fsub+0x2dc>
    3a88:	2e00      	cmp	r6, #0
    3a8a:	d04f      	beq.n	3b2c <__aeabi_fsub+0x320>
    3a8c:	0033      	movs	r3, r6
    3a8e:	000d      	movs	r5, r1
    3a90:	e702      	b.n	3898 <__aeabi_fsub+0x8c>
    3a92:	2601      	movs	r6, #1
    3a94:	e755      	b.n	3942 <__aeabi_fsub+0x136>
    3a96:	2c00      	cmp	r4, #0
    3a98:	d11f      	bne.n	3ada <__aeabi_fsub+0x2ce>
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d043      	beq.n	3b26 <__aeabi_fsub+0x31a>
    3a9e:	43c9      	mvns	r1, r1
    3aa0:	2900      	cmp	r1, #0
    3aa2:	d00b      	beq.n	3abc <__aeabi_fsub+0x2b0>
    3aa4:	28ff      	cmp	r0, #255	; 0xff
    3aa6:	d039      	beq.n	3b1c <__aeabi_fsub+0x310>
    3aa8:	291b      	cmp	r1, #27
    3aaa:	dc44      	bgt.n	3b36 <__aeabi_fsub+0x32a>
    3aac:	001c      	movs	r4, r3
    3aae:	2720      	movs	r7, #32
    3ab0:	40cc      	lsrs	r4, r1
    3ab2:	1a79      	subs	r1, r7, r1
    3ab4:	408b      	lsls	r3, r1
    3ab6:	1e59      	subs	r1, r3, #1
    3ab8:	418b      	sbcs	r3, r1
    3aba:	4323      	orrs	r3, r4
    3abc:	199b      	adds	r3, r3, r6
    3abe:	0004      	movs	r4, r0
    3ac0:	e740      	b.n	3944 <__aeabi_fsub+0x138>
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d11a      	bne.n	3afc <__aeabi_fsub+0x2f0>
    3ac6:	2e00      	cmp	r6, #0
    3ac8:	d124      	bne.n	3b14 <__aeabi_fsub+0x308>
    3aca:	2780      	movs	r7, #128	; 0x80
    3acc:	2200      	movs	r2, #0
    3ace:	03ff      	lsls	r7, r7, #15
    3ad0:	e71b      	b.n	390a <__aeabi_fsub+0xfe>
    3ad2:	0033      	movs	r3, r6
    3ad4:	0004      	movs	r4, r0
    3ad6:	000d      	movs	r5, r1
    3ad8:	e6de      	b.n	3898 <__aeabi_fsub+0x8c>
    3ada:	28ff      	cmp	r0, #255	; 0xff
    3adc:	d01e      	beq.n	3b1c <__aeabi_fsub+0x310>
    3ade:	2480      	movs	r4, #128	; 0x80
    3ae0:	04e4      	lsls	r4, r4, #19
    3ae2:	4249      	negs	r1, r1
    3ae4:	4323      	orrs	r3, r4
    3ae6:	e7df      	b.n	3aa8 <__aeabi_fsub+0x29c>
    3ae8:	2e00      	cmp	r6, #0
    3aea:	d100      	bne.n	3aee <__aeabi_fsub+0x2e2>
    3aec:	e6d4      	b.n	3898 <__aeabi_fsub+0x8c>
    3aee:	1b9f      	subs	r7, r3, r6
    3af0:	017a      	lsls	r2, r7, #5
    3af2:	d400      	bmi.n	3af6 <__aeabi_fsub+0x2ea>
    3af4:	e737      	b.n	3966 <__aeabi_fsub+0x15a>
    3af6:	1af3      	subs	r3, r6, r3
    3af8:	000d      	movs	r5, r1
    3afa:	e6cd      	b.n	3898 <__aeabi_fsub+0x8c>
    3afc:	24ff      	movs	r4, #255	; 0xff
    3afe:	2e00      	cmp	r6, #0
    3b00:	d100      	bne.n	3b04 <__aeabi_fsub+0x2f8>
    3b02:	e6c9      	b.n	3898 <__aeabi_fsub+0x8c>
    3b04:	2280      	movs	r2, #128	; 0x80
    3b06:	4650      	mov	r0, sl
    3b08:	03d2      	lsls	r2, r2, #15
    3b0a:	4210      	tst	r0, r2
    3b0c:	d0a4      	beq.n	3a58 <__aeabi_fsub+0x24c>
    3b0e:	4660      	mov	r0, ip
    3b10:	4210      	tst	r0, r2
    3b12:	d1a1      	bne.n	3a58 <__aeabi_fsub+0x24c>
    3b14:	0033      	movs	r3, r6
    3b16:	000d      	movs	r5, r1
    3b18:	24ff      	movs	r4, #255	; 0xff
    3b1a:	e6bd      	b.n	3898 <__aeabi_fsub+0x8c>
    3b1c:	0033      	movs	r3, r6
    3b1e:	24ff      	movs	r4, #255	; 0xff
    3b20:	e6ba      	b.n	3898 <__aeabi_fsub+0x8c>
    3b22:	2301      	movs	r3, #1
    3b24:	e76e      	b.n	3a04 <__aeabi_fsub+0x1f8>
    3b26:	0033      	movs	r3, r6
    3b28:	0004      	movs	r4, r0
    3b2a:	e6b5      	b.n	3898 <__aeabi_fsub+0x8c>
    3b2c:	2700      	movs	r7, #0
    3b2e:	2200      	movs	r2, #0
    3b30:	e71c      	b.n	396c <__aeabi_fsub+0x160>
    3b32:	0033      	movs	r3, r6
    3b34:	e6b0      	b.n	3898 <__aeabi_fsub+0x8c>
    3b36:	2301      	movs	r3, #1
    3b38:	e7c0      	b.n	3abc <__aeabi_fsub+0x2b0>
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	7dffffff 	.word	0x7dffffff
    3b40:	fbffffff 	.word	0xfbffffff

00003b44 <__aeabi_f2iz>:
    3b44:	0241      	lsls	r1, r0, #9
    3b46:	0043      	lsls	r3, r0, #1
    3b48:	0fc2      	lsrs	r2, r0, #31
    3b4a:	0a49      	lsrs	r1, r1, #9
    3b4c:	0e1b      	lsrs	r3, r3, #24
    3b4e:	2000      	movs	r0, #0
    3b50:	2b7e      	cmp	r3, #126	; 0x7e
    3b52:	dd0d      	ble.n	3b70 <__aeabi_f2iz+0x2c>
    3b54:	2b9d      	cmp	r3, #157	; 0x9d
    3b56:	dc0c      	bgt.n	3b72 <__aeabi_f2iz+0x2e>
    3b58:	2080      	movs	r0, #128	; 0x80
    3b5a:	0400      	lsls	r0, r0, #16
    3b5c:	4301      	orrs	r1, r0
    3b5e:	2b95      	cmp	r3, #149	; 0x95
    3b60:	dc0a      	bgt.n	3b78 <__aeabi_f2iz+0x34>
    3b62:	2096      	movs	r0, #150	; 0x96
    3b64:	1ac3      	subs	r3, r0, r3
    3b66:	40d9      	lsrs	r1, r3
    3b68:	4248      	negs	r0, r1
    3b6a:	2a00      	cmp	r2, #0
    3b6c:	d100      	bne.n	3b70 <__aeabi_f2iz+0x2c>
    3b6e:	0008      	movs	r0, r1
    3b70:	4770      	bx	lr
    3b72:	4b03      	ldr	r3, [pc, #12]	; (3b80 <__aeabi_f2iz+0x3c>)
    3b74:	18d0      	adds	r0, r2, r3
    3b76:	e7fb      	b.n	3b70 <__aeabi_f2iz+0x2c>
    3b78:	3b96      	subs	r3, #150	; 0x96
    3b7a:	4099      	lsls	r1, r3
    3b7c:	e7f4      	b.n	3b68 <__aeabi_f2iz+0x24>
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	7fffffff 	.word	0x7fffffff

00003b84 <__aeabi_i2f>:
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	2800      	cmp	r0, #0
    3b88:	d030      	beq.n	3bec <__aeabi_i2f+0x68>
    3b8a:	17c3      	asrs	r3, r0, #31
    3b8c:	18c4      	adds	r4, r0, r3
    3b8e:	405c      	eors	r4, r3
    3b90:	0fc5      	lsrs	r5, r0, #31
    3b92:	0020      	movs	r0, r4
    3b94:	f001 fdf6 	bl	5784 <__clzsi2>
    3b98:	239e      	movs	r3, #158	; 0x9e
    3b9a:	1a1b      	subs	r3, r3, r0
    3b9c:	2b96      	cmp	r3, #150	; 0x96
    3b9e:	dc0d      	bgt.n	3bbc <__aeabi_i2f+0x38>
    3ba0:	2296      	movs	r2, #150	; 0x96
    3ba2:	1ad2      	subs	r2, r2, r3
    3ba4:	4094      	lsls	r4, r2
    3ba6:	002a      	movs	r2, r5
    3ba8:	0264      	lsls	r4, r4, #9
    3baa:	0a64      	lsrs	r4, r4, #9
    3bac:	b2db      	uxtb	r3, r3
    3bae:	0264      	lsls	r4, r4, #9
    3bb0:	05db      	lsls	r3, r3, #23
    3bb2:	0a60      	lsrs	r0, r4, #9
    3bb4:	07d2      	lsls	r2, r2, #31
    3bb6:	4318      	orrs	r0, r3
    3bb8:	4310      	orrs	r0, r2
    3bba:	bd70      	pop	{r4, r5, r6, pc}
    3bbc:	2b99      	cmp	r3, #153	; 0x99
    3bbe:	dc19      	bgt.n	3bf4 <__aeabi_i2f+0x70>
    3bc0:	2299      	movs	r2, #153	; 0x99
    3bc2:	1ad2      	subs	r2, r2, r3
    3bc4:	2a00      	cmp	r2, #0
    3bc6:	dd29      	ble.n	3c1c <__aeabi_i2f+0x98>
    3bc8:	4094      	lsls	r4, r2
    3bca:	0022      	movs	r2, r4
    3bcc:	4c14      	ldr	r4, [pc, #80]	; (3c20 <__aeabi_i2f+0x9c>)
    3bce:	4014      	ands	r4, r2
    3bd0:	0751      	lsls	r1, r2, #29
    3bd2:	d004      	beq.n	3bde <__aeabi_i2f+0x5a>
    3bd4:	210f      	movs	r1, #15
    3bd6:	400a      	ands	r2, r1
    3bd8:	2a04      	cmp	r2, #4
    3bda:	d000      	beq.n	3bde <__aeabi_i2f+0x5a>
    3bdc:	3404      	adds	r4, #4
    3bde:	0162      	lsls	r2, r4, #5
    3be0:	d413      	bmi.n	3c0a <__aeabi_i2f+0x86>
    3be2:	01a4      	lsls	r4, r4, #6
    3be4:	0a64      	lsrs	r4, r4, #9
    3be6:	b2db      	uxtb	r3, r3
    3be8:	002a      	movs	r2, r5
    3bea:	e7e0      	b.n	3bae <__aeabi_i2f+0x2a>
    3bec:	2200      	movs	r2, #0
    3bee:	2300      	movs	r3, #0
    3bf0:	2400      	movs	r4, #0
    3bf2:	e7dc      	b.n	3bae <__aeabi_i2f+0x2a>
    3bf4:	2205      	movs	r2, #5
    3bf6:	0021      	movs	r1, r4
    3bf8:	1a12      	subs	r2, r2, r0
    3bfa:	40d1      	lsrs	r1, r2
    3bfc:	22b9      	movs	r2, #185	; 0xb9
    3bfe:	1ad2      	subs	r2, r2, r3
    3c00:	4094      	lsls	r4, r2
    3c02:	1e62      	subs	r2, r4, #1
    3c04:	4194      	sbcs	r4, r2
    3c06:	430c      	orrs	r4, r1
    3c08:	e7da      	b.n	3bc0 <__aeabi_i2f+0x3c>
    3c0a:	4b05      	ldr	r3, [pc, #20]	; (3c20 <__aeabi_i2f+0x9c>)
    3c0c:	002a      	movs	r2, r5
    3c0e:	401c      	ands	r4, r3
    3c10:	239f      	movs	r3, #159	; 0x9f
    3c12:	01a4      	lsls	r4, r4, #6
    3c14:	1a1b      	subs	r3, r3, r0
    3c16:	0a64      	lsrs	r4, r4, #9
    3c18:	b2db      	uxtb	r3, r3
    3c1a:	e7c8      	b.n	3bae <__aeabi_i2f+0x2a>
    3c1c:	0022      	movs	r2, r4
    3c1e:	e7d5      	b.n	3bcc <__aeabi_i2f+0x48>
    3c20:	fbffffff 	.word	0xfbffffff

00003c24 <__aeabi_ui2f>:
    3c24:	b510      	push	{r4, lr}
    3c26:	1e04      	subs	r4, r0, #0
    3c28:	d027      	beq.n	3c7a <__aeabi_ui2f+0x56>
    3c2a:	f001 fdab 	bl	5784 <__clzsi2>
    3c2e:	239e      	movs	r3, #158	; 0x9e
    3c30:	1a1b      	subs	r3, r3, r0
    3c32:	2b96      	cmp	r3, #150	; 0x96
    3c34:	dc0a      	bgt.n	3c4c <__aeabi_ui2f+0x28>
    3c36:	2296      	movs	r2, #150	; 0x96
    3c38:	1ad2      	subs	r2, r2, r3
    3c3a:	4094      	lsls	r4, r2
    3c3c:	0264      	lsls	r4, r4, #9
    3c3e:	0a64      	lsrs	r4, r4, #9
    3c40:	b2db      	uxtb	r3, r3
    3c42:	0264      	lsls	r4, r4, #9
    3c44:	05db      	lsls	r3, r3, #23
    3c46:	0a60      	lsrs	r0, r4, #9
    3c48:	4318      	orrs	r0, r3
    3c4a:	bd10      	pop	{r4, pc}
    3c4c:	2b99      	cmp	r3, #153	; 0x99
    3c4e:	dc17      	bgt.n	3c80 <__aeabi_ui2f+0x5c>
    3c50:	2299      	movs	r2, #153	; 0x99
    3c52:	1ad2      	subs	r2, r2, r3
    3c54:	2a00      	cmp	r2, #0
    3c56:	dd27      	ble.n	3ca8 <__aeabi_ui2f+0x84>
    3c58:	4094      	lsls	r4, r2
    3c5a:	0022      	movs	r2, r4
    3c5c:	4c13      	ldr	r4, [pc, #76]	; (3cac <__aeabi_ui2f+0x88>)
    3c5e:	4014      	ands	r4, r2
    3c60:	0751      	lsls	r1, r2, #29
    3c62:	d004      	beq.n	3c6e <__aeabi_ui2f+0x4a>
    3c64:	210f      	movs	r1, #15
    3c66:	400a      	ands	r2, r1
    3c68:	2a04      	cmp	r2, #4
    3c6a:	d000      	beq.n	3c6e <__aeabi_ui2f+0x4a>
    3c6c:	3404      	adds	r4, #4
    3c6e:	0162      	lsls	r2, r4, #5
    3c70:	d412      	bmi.n	3c98 <__aeabi_ui2f+0x74>
    3c72:	01a4      	lsls	r4, r4, #6
    3c74:	0a64      	lsrs	r4, r4, #9
    3c76:	b2db      	uxtb	r3, r3
    3c78:	e7e3      	b.n	3c42 <__aeabi_ui2f+0x1e>
    3c7a:	2300      	movs	r3, #0
    3c7c:	2400      	movs	r4, #0
    3c7e:	e7e0      	b.n	3c42 <__aeabi_ui2f+0x1e>
    3c80:	22b9      	movs	r2, #185	; 0xb9
    3c82:	0021      	movs	r1, r4
    3c84:	1ad2      	subs	r2, r2, r3
    3c86:	4091      	lsls	r1, r2
    3c88:	000a      	movs	r2, r1
    3c8a:	1e51      	subs	r1, r2, #1
    3c8c:	418a      	sbcs	r2, r1
    3c8e:	2105      	movs	r1, #5
    3c90:	1a09      	subs	r1, r1, r0
    3c92:	40cc      	lsrs	r4, r1
    3c94:	4314      	orrs	r4, r2
    3c96:	e7db      	b.n	3c50 <__aeabi_ui2f+0x2c>
    3c98:	4b04      	ldr	r3, [pc, #16]	; (3cac <__aeabi_ui2f+0x88>)
    3c9a:	401c      	ands	r4, r3
    3c9c:	239f      	movs	r3, #159	; 0x9f
    3c9e:	01a4      	lsls	r4, r4, #6
    3ca0:	1a1b      	subs	r3, r3, r0
    3ca2:	0a64      	lsrs	r4, r4, #9
    3ca4:	b2db      	uxtb	r3, r3
    3ca6:	e7cc      	b.n	3c42 <__aeabi_ui2f+0x1e>
    3ca8:	0022      	movs	r2, r4
    3caa:	e7d7      	b.n	3c5c <__aeabi_ui2f+0x38>
    3cac:	fbffffff 	.word	0xfbffffff

00003cb0 <__aeabi_dadd>:
    3cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cb2:	4645      	mov	r5, r8
    3cb4:	46de      	mov	lr, fp
    3cb6:	4657      	mov	r7, sl
    3cb8:	464e      	mov	r6, r9
    3cba:	030c      	lsls	r4, r1, #12
    3cbc:	b5e0      	push	{r5, r6, r7, lr}
    3cbe:	004e      	lsls	r6, r1, #1
    3cc0:	0fc9      	lsrs	r1, r1, #31
    3cc2:	4688      	mov	r8, r1
    3cc4:	000d      	movs	r5, r1
    3cc6:	0a61      	lsrs	r1, r4, #9
    3cc8:	0f44      	lsrs	r4, r0, #29
    3cca:	430c      	orrs	r4, r1
    3ccc:	00c7      	lsls	r7, r0, #3
    3cce:	0319      	lsls	r1, r3, #12
    3cd0:	0058      	lsls	r0, r3, #1
    3cd2:	0fdb      	lsrs	r3, r3, #31
    3cd4:	469b      	mov	fp, r3
    3cd6:	0a4b      	lsrs	r3, r1, #9
    3cd8:	0f51      	lsrs	r1, r2, #29
    3cda:	430b      	orrs	r3, r1
    3cdc:	0d76      	lsrs	r6, r6, #21
    3cde:	0d40      	lsrs	r0, r0, #21
    3ce0:	0019      	movs	r1, r3
    3ce2:	00d2      	lsls	r2, r2, #3
    3ce4:	45d8      	cmp	r8, fp
    3ce6:	d100      	bne.n	3cea <__aeabi_dadd+0x3a>
    3ce8:	e0ae      	b.n	3e48 <__aeabi_dadd+0x198>
    3cea:	1a35      	subs	r5, r6, r0
    3cec:	2d00      	cmp	r5, #0
    3cee:	dc00      	bgt.n	3cf2 <__aeabi_dadd+0x42>
    3cf0:	e0f6      	b.n	3ee0 <__aeabi_dadd+0x230>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d10f      	bne.n	3d16 <__aeabi_dadd+0x66>
    3cf6:	4313      	orrs	r3, r2
    3cf8:	d100      	bne.n	3cfc <__aeabi_dadd+0x4c>
    3cfa:	e0db      	b.n	3eb4 <__aeabi_dadd+0x204>
    3cfc:	1e6b      	subs	r3, r5, #1
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d000      	beq.n	3d04 <__aeabi_dadd+0x54>
    3d02:	e137      	b.n	3f74 <__aeabi_dadd+0x2c4>
    3d04:	1aba      	subs	r2, r7, r2
    3d06:	4297      	cmp	r7, r2
    3d08:	41bf      	sbcs	r7, r7
    3d0a:	1a64      	subs	r4, r4, r1
    3d0c:	427f      	negs	r7, r7
    3d0e:	1be4      	subs	r4, r4, r7
    3d10:	2601      	movs	r6, #1
    3d12:	0017      	movs	r7, r2
    3d14:	e024      	b.n	3d60 <__aeabi_dadd+0xb0>
    3d16:	4bc6      	ldr	r3, [pc, #792]	; (4030 <__aeabi_dadd+0x380>)
    3d18:	429e      	cmp	r6, r3
    3d1a:	d04d      	beq.n	3db8 <__aeabi_dadd+0x108>
    3d1c:	2380      	movs	r3, #128	; 0x80
    3d1e:	041b      	lsls	r3, r3, #16
    3d20:	4319      	orrs	r1, r3
    3d22:	2d38      	cmp	r5, #56	; 0x38
    3d24:	dd00      	ble.n	3d28 <__aeabi_dadd+0x78>
    3d26:	e107      	b.n	3f38 <__aeabi_dadd+0x288>
    3d28:	2d1f      	cmp	r5, #31
    3d2a:	dd00      	ble.n	3d2e <__aeabi_dadd+0x7e>
    3d2c:	e138      	b.n	3fa0 <__aeabi_dadd+0x2f0>
    3d2e:	2020      	movs	r0, #32
    3d30:	1b43      	subs	r3, r0, r5
    3d32:	469a      	mov	sl, r3
    3d34:	000b      	movs	r3, r1
    3d36:	4650      	mov	r0, sl
    3d38:	4083      	lsls	r3, r0
    3d3a:	4699      	mov	r9, r3
    3d3c:	0013      	movs	r3, r2
    3d3e:	4648      	mov	r0, r9
    3d40:	40eb      	lsrs	r3, r5
    3d42:	4318      	orrs	r0, r3
    3d44:	0003      	movs	r3, r0
    3d46:	4650      	mov	r0, sl
    3d48:	4082      	lsls	r2, r0
    3d4a:	1e50      	subs	r0, r2, #1
    3d4c:	4182      	sbcs	r2, r0
    3d4e:	40e9      	lsrs	r1, r5
    3d50:	431a      	orrs	r2, r3
    3d52:	1aba      	subs	r2, r7, r2
    3d54:	1a61      	subs	r1, r4, r1
    3d56:	4297      	cmp	r7, r2
    3d58:	41a4      	sbcs	r4, r4
    3d5a:	0017      	movs	r7, r2
    3d5c:	4264      	negs	r4, r4
    3d5e:	1b0c      	subs	r4, r1, r4
    3d60:	0223      	lsls	r3, r4, #8
    3d62:	d562      	bpl.n	3e2a <__aeabi_dadd+0x17a>
    3d64:	0264      	lsls	r4, r4, #9
    3d66:	0a65      	lsrs	r5, r4, #9
    3d68:	2d00      	cmp	r5, #0
    3d6a:	d100      	bne.n	3d6e <__aeabi_dadd+0xbe>
    3d6c:	e0df      	b.n	3f2e <__aeabi_dadd+0x27e>
    3d6e:	0028      	movs	r0, r5
    3d70:	f001 fd08 	bl	5784 <__clzsi2>
    3d74:	0003      	movs	r3, r0
    3d76:	3b08      	subs	r3, #8
    3d78:	2b1f      	cmp	r3, #31
    3d7a:	dd00      	ble.n	3d7e <__aeabi_dadd+0xce>
    3d7c:	e0d2      	b.n	3f24 <__aeabi_dadd+0x274>
    3d7e:	2220      	movs	r2, #32
    3d80:	003c      	movs	r4, r7
    3d82:	1ad2      	subs	r2, r2, r3
    3d84:	409d      	lsls	r5, r3
    3d86:	40d4      	lsrs	r4, r2
    3d88:	409f      	lsls	r7, r3
    3d8a:	4325      	orrs	r5, r4
    3d8c:	429e      	cmp	r6, r3
    3d8e:	dd00      	ble.n	3d92 <__aeabi_dadd+0xe2>
    3d90:	e0c4      	b.n	3f1c <__aeabi_dadd+0x26c>
    3d92:	1b9e      	subs	r6, r3, r6
    3d94:	1c73      	adds	r3, r6, #1
    3d96:	2b1f      	cmp	r3, #31
    3d98:	dd00      	ble.n	3d9c <__aeabi_dadd+0xec>
    3d9a:	e0f1      	b.n	3f80 <__aeabi_dadd+0x2d0>
    3d9c:	2220      	movs	r2, #32
    3d9e:	0038      	movs	r0, r7
    3da0:	0029      	movs	r1, r5
    3da2:	1ad2      	subs	r2, r2, r3
    3da4:	40d8      	lsrs	r0, r3
    3da6:	4091      	lsls	r1, r2
    3da8:	4097      	lsls	r7, r2
    3daa:	002c      	movs	r4, r5
    3dac:	4301      	orrs	r1, r0
    3dae:	1e78      	subs	r0, r7, #1
    3db0:	4187      	sbcs	r7, r0
    3db2:	40dc      	lsrs	r4, r3
    3db4:	2600      	movs	r6, #0
    3db6:	430f      	orrs	r7, r1
    3db8:	077b      	lsls	r3, r7, #29
    3dba:	d009      	beq.n	3dd0 <__aeabi_dadd+0x120>
    3dbc:	230f      	movs	r3, #15
    3dbe:	403b      	ands	r3, r7
    3dc0:	2b04      	cmp	r3, #4
    3dc2:	d005      	beq.n	3dd0 <__aeabi_dadd+0x120>
    3dc4:	1d3b      	adds	r3, r7, #4
    3dc6:	42bb      	cmp	r3, r7
    3dc8:	41bf      	sbcs	r7, r7
    3dca:	427f      	negs	r7, r7
    3dcc:	19e4      	adds	r4, r4, r7
    3dce:	001f      	movs	r7, r3
    3dd0:	0223      	lsls	r3, r4, #8
    3dd2:	d52c      	bpl.n	3e2e <__aeabi_dadd+0x17e>
    3dd4:	4b96      	ldr	r3, [pc, #600]	; (4030 <__aeabi_dadd+0x380>)
    3dd6:	3601      	adds	r6, #1
    3dd8:	429e      	cmp	r6, r3
    3dda:	d100      	bne.n	3dde <__aeabi_dadd+0x12e>
    3ddc:	e09a      	b.n	3f14 <__aeabi_dadd+0x264>
    3dde:	4645      	mov	r5, r8
    3de0:	4b94      	ldr	r3, [pc, #592]	; (4034 <__aeabi_dadd+0x384>)
    3de2:	08ff      	lsrs	r7, r7, #3
    3de4:	401c      	ands	r4, r3
    3de6:	0760      	lsls	r0, r4, #29
    3de8:	0576      	lsls	r6, r6, #21
    3dea:	0264      	lsls	r4, r4, #9
    3dec:	4307      	orrs	r7, r0
    3dee:	0b24      	lsrs	r4, r4, #12
    3df0:	0d76      	lsrs	r6, r6, #21
    3df2:	2100      	movs	r1, #0
    3df4:	0324      	lsls	r4, r4, #12
    3df6:	0b23      	lsrs	r3, r4, #12
    3df8:	0d0c      	lsrs	r4, r1, #20
    3dfa:	4a8f      	ldr	r2, [pc, #572]	; (4038 <__aeabi_dadd+0x388>)
    3dfc:	0524      	lsls	r4, r4, #20
    3dfe:	431c      	orrs	r4, r3
    3e00:	4014      	ands	r4, r2
    3e02:	0533      	lsls	r3, r6, #20
    3e04:	4323      	orrs	r3, r4
    3e06:	005b      	lsls	r3, r3, #1
    3e08:	07ed      	lsls	r5, r5, #31
    3e0a:	085b      	lsrs	r3, r3, #1
    3e0c:	432b      	orrs	r3, r5
    3e0e:	0038      	movs	r0, r7
    3e10:	0019      	movs	r1, r3
    3e12:	bc3c      	pop	{r2, r3, r4, r5}
    3e14:	4690      	mov	r8, r2
    3e16:	4699      	mov	r9, r3
    3e18:	46a2      	mov	sl, r4
    3e1a:	46ab      	mov	fp, r5
    3e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e1e:	4664      	mov	r4, ip
    3e20:	4304      	orrs	r4, r0
    3e22:	d100      	bne.n	3e26 <__aeabi_dadd+0x176>
    3e24:	e211      	b.n	424a <__aeabi_dadd+0x59a>
    3e26:	0004      	movs	r4, r0
    3e28:	4667      	mov	r7, ip
    3e2a:	077b      	lsls	r3, r7, #29
    3e2c:	d1c6      	bne.n	3dbc <__aeabi_dadd+0x10c>
    3e2e:	4645      	mov	r5, r8
    3e30:	0760      	lsls	r0, r4, #29
    3e32:	08ff      	lsrs	r7, r7, #3
    3e34:	4307      	orrs	r7, r0
    3e36:	08e4      	lsrs	r4, r4, #3
    3e38:	4b7d      	ldr	r3, [pc, #500]	; (4030 <__aeabi_dadd+0x380>)
    3e3a:	429e      	cmp	r6, r3
    3e3c:	d030      	beq.n	3ea0 <__aeabi_dadd+0x1f0>
    3e3e:	0324      	lsls	r4, r4, #12
    3e40:	0576      	lsls	r6, r6, #21
    3e42:	0b24      	lsrs	r4, r4, #12
    3e44:	0d76      	lsrs	r6, r6, #21
    3e46:	e7d4      	b.n	3df2 <__aeabi_dadd+0x142>
    3e48:	1a33      	subs	r3, r6, r0
    3e4a:	469a      	mov	sl, r3
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	dd78      	ble.n	3f42 <__aeabi_dadd+0x292>
    3e50:	2800      	cmp	r0, #0
    3e52:	d031      	beq.n	3eb8 <__aeabi_dadd+0x208>
    3e54:	4876      	ldr	r0, [pc, #472]	; (4030 <__aeabi_dadd+0x380>)
    3e56:	4286      	cmp	r6, r0
    3e58:	d0ae      	beq.n	3db8 <__aeabi_dadd+0x108>
    3e5a:	2080      	movs	r0, #128	; 0x80
    3e5c:	0400      	lsls	r0, r0, #16
    3e5e:	4301      	orrs	r1, r0
    3e60:	4653      	mov	r3, sl
    3e62:	2b38      	cmp	r3, #56	; 0x38
    3e64:	dc00      	bgt.n	3e68 <__aeabi_dadd+0x1b8>
    3e66:	e0e9      	b.n	403c <__aeabi_dadd+0x38c>
    3e68:	430a      	orrs	r2, r1
    3e6a:	1e51      	subs	r1, r2, #1
    3e6c:	418a      	sbcs	r2, r1
    3e6e:	2100      	movs	r1, #0
    3e70:	19d2      	adds	r2, r2, r7
    3e72:	42ba      	cmp	r2, r7
    3e74:	41bf      	sbcs	r7, r7
    3e76:	1909      	adds	r1, r1, r4
    3e78:	427c      	negs	r4, r7
    3e7a:	0017      	movs	r7, r2
    3e7c:	190c      	adds	r4, r1, r4
    3e7e:	0223      	lsls	r3, r4, #8
    3e80:	d5d3      	bpl.n	3e2a <__aeabi_dadd+0x17a>
    3e82:	4b6b      	ldr	r3, [pc, #428]	; (4030 <__aeabi_dadd+0x380>)
    3e84:	3601      	adds	r6, #1
    3e86:	429e      	cmp	r6, r3
    3e88:	d100      	bne.n	3e8c <__aeabi_dadd+0x1dc>
    3e8a:	e13a      	b.n	4102 <__aeabi_dadd+0x452>
    3e8c:	2001      	movs	r0, #1
    3e8e:	4b69      	ldr	r3, [pc, #420]	; (4034 <__aeabi_dadd+0x384>)
    3e90:	401c      	ands	r4, r3
    3e92:	087b      	lsrs	r3, r7, #1
    3e94:	4007      	ands	r7, r0
    3e96:	431f      	orrs	r7, r3
    3e98:	07e0      	lsls	r0, r4, #31
    3e9a:	4307      	orrs	r7, r0
    3e9c:	0864      	lsrs	r4, r4, #1
    3e9e:	e78b      	b.n	3db8 <__aeabi_dadd+0x108>
    3ea0:	0023      	movs	r3, r4
    3ea2:	433b      	orrs	r3, r7
    3ea4:	d100      	bne.n	3ea8 <__aeabi_dadd+0x1f8>
    3ea6:	e1cb      	b.n	4240 <__aeabi_dadd+0x590>
    3ea8:	2280      	movs	r2, #128	; 0x80
    3eaa:	0312      	lsls	r2, r2, #12
    3eac:	4314      	orrs	r4, r2
    3eae:	0324      	lsls	r4, r4, #12
    3eb0:	0b24      	lsrs	r4, r4, #12
    3eb2:	e79e      	b.n	3df2 <__aeabi_dadd+0x142>
    3eb4:	002e      	movs	r6, r5
    3eb6:	e77f      	b.n	3db8 <__aeabi_dadd+0x108>
    3eb8:	0008      	movs	r0, r1
    3eba:	4310      	orrs	r0, r2
    3ebc:	d100      	bne.n	3ec0 <__aeabi_dadd+0x210>
    3ebe:	e0b4      	b.n	402a <__aeabi_dadd+0x37a>
    3ec0:	1e58      	subs	r0, r3, #1
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d000      	beq.n	3ec8 <__aeabi_dadd+0x218>
    3ec6:	e0de      	b.n	4086 <__aeabi_dadd+0x3d6>
    3ec8:	18ba      	adds	r2, r7, r2
    3eca:	42ba      	cmp	r2, r7
    3ecc:	419b      	sbcs	r3, r3
    3ece:	1864      	adds	r4, r4, r1
    3ed0:	425b      	negs	r3, r3
    3ed2:	18e4      	adds	r4, r4, r3
    3ed4:	0017      	movs	r7, r2
    3ed6:	2601      	movs	r6, #1
    3ed8:	0223      	lsls	r3, r4, #8
    3eda:	d5a6      	bpl.n	3e2a <__aeabi_dadd+0x17a>
    3edc:	2602      	movs	r6, #2
    3ede:	e7d5      	b.n	3e8c <__aeabi_dadd+0x1dc>
    3ee0:	2d00      	cmp	r5, #0
    3ee2:	d16e      	bne.n	3fc2 <__aeabi_dadd+0x312>
    3ee4:	1c70      	adds	r0, r6, #1
    3ee6:	0540      	lsls	r0, r0, #21
    3ee8:	0d40      	lsrs	r0, r0, #21
    3eea:	2801      	cmp	r0, #1
    3eec:	dc00      	bgt.n	3ef0 <__aeabi_dadd+0x240>
    3eee:	e0f9      	b.n	40e4 <__aeabi_dadd+0x434>
    3ef0:	1ab8      	subs	r0, r7, r2
    3ef2:	4684      	mov	ip, r0
    3ef4:	4287      	cmp	r7, r0
    3ef6:	4180      	sbcs	r0, r0
    3ef8:	1ae5      	subs	r5, r4, r3
    3efa:	4240      	negs	r0, r0
    3efc:	1a2d      	subs	r5, r5, r0
    3efe:	0228      	lsls	r0, r5, #8
    3f00:	d400      	bmi.n	3f04 <__aeabi_dadd+0x254>
    3f02:	e089      	b.n	4018 <__aeabi_dadd+0x368>
    3f04:	1bd7      	subs	r7, r2, r7
    3f06:	42ba      	cmp	r2, r7
    3f08:	4192      	sbcs	r2, r2
    3f0a:	1b1c      	subs	r4, r3, r4
    3f0c:	4252      	negs	r2, r2
    3f0e:	1aa5      	subs	r5, r4, r2
    3f10:	46d8      	mov	r8, fp
    3f12:	e729      	b.n	3d68 <__aeabi_dadd+0xb8>
    3f14:	4645      	mov	r5, r8
    3f16:	2400      	movs	r4, #0
    3f18:	2700      	movs	r7, #0
    3f1a:	e76a      	b.n	3df2 <__aeabi_dadd+0x142>
    3f1c:	4c45      	ldr	r4, [pc, #276]	; (4034 <__aeabi_dadd+0x384>)
    3f1e:	1af6      	subs	r6, r6, r3
    3f20:	402c      	ands	r4, r5
    3f22:	e749      	b.n	3db8 <__aeabi_dadd+0x108>
    3f24:	003d      	movs	r5, r7
    3f26:	3828      	subs	r0, #40	; 0x28
    3f28:	4085      	lsls	r5, r0
    3f2a:	2700      	movs	r7, #0
    3f2c:	e72e      	b.n	3d8c <__aeabi_dadd+0xdc>
    3f2e:	0038      	movs	r0, r7
    3f30:	f001 fc28 	bl	5784 <__clzsi2>
    3f34:	3020      	adds	r0, #32
    3f36:	e71d      	b.n	3d74 <__aeabi_dadd+0xc4>
    3f38:	430a      	orrs	r2, r1
    3f3a:	1e51      	subs	r1, r2, #1
    3f3c:	418a      	sbcs	r2, r1
    3f3e:	2100      	movs	r1, #0
    3f40:	e707      	b.n	3d52 <__aeabi_dadd+0xa2>
    3f42:	2b00      	cmp	r3, #0
    3f44:	d000      	beq.n	3f48 <__aeabi_dadd+0x298>
    3f46:	e0f3      	b.n	4130 <__aeabi_dadd+0x480>
    3f48:	1c70      	adds	r0, r6, #1
    3f4a:	0543      	lsls	r3, r0, #21
    3f4c:	0d5b      	lsrs	r3, r3, #21
    3f4e:	2b01      	cmp	r3, #1
    3f50:	dc00      	bgt.n	3f54 <__aeabi_dadd+0x2a4>
    3f52:	e0ad      	b.n	40b0 <__aeabi_dadd+0x400>
    3f54:	4b36      	ldr	r3, [pc, #216]	; (4030 <__aeabi_dadd+0x380>)
    3f56:	4298      	cmp	r0, r3
    3f58:	d100      	bne.n	3f5c <__aeabi_dadd+0x2ac>
    3f5a:	e0d1      	b.n	4100 <__aeabi_dadd+0x450>
    3f5c:	18ba      	adds	r2, r7, r2
    3f5e:	42ba      	cmp	r2, r7
    3f60:	41bf      	sbcs	r7, r7
    3f62:	1864      	adds	r4, r4, r1
    3f64:	427f      	negs	r7, r7
    3f66:	19e4      	adds	r4, r4, r7
    3f68:	07e7      	lsls	r7, r4, #31
    3f6a:	0852      	lsrs	r2, r2, #1
    3f6c:	4317      	orrs	r7, r2
    3f6e:	0864      	lsrs	r4, r4, #1
    3f70:	0006      	movs	r6, r0
    3f72:	e721      	b.n	3db8 <__aeabi_dadd+0x108>
    3f74:	482e      	ldr	r0, [pc, #184]	; (4030 <__aeabi_dadd+0x380>)
    3f76:	4285      	cmp	r5, r0
    3f78:	d100      	bne.n	3f7c <__aeabi_dadd+0x2cc>
    3f7a:	e093      	b.n	40a4 <__aeabi_dadd+0x3f4>
    3f7c:	001d      	movs	r5, r3
    3f7e:	e6d0      	b.n	3d22 <__aeabi_dadd+0x72>
    3f80:	0029      	movs	r1, r5
    3f82:	3e1f      	subs	r6, #31
    3f84:	40f1      	lsrs	r1, r6
    3f86:	2b20      	cmp	r3, #32
    3f88:	d100      	bne.n	3f8c <__aeabi_dadd+0x2dc>
    3f8a:	e08d      	b.n	40a8 <__aeabi_dadd+0x3f8>
    3f8c:	2240      	movs	r2, #64	; 0x40
    3f8e:	1ad3      	subs	r3, r2, r3
    3f90:	409d      	lsls	r5, r3
    3f92:	432f      	orrs	r7, r5
    3f94:	1e7d      	subs	r5, r7, #1
    3f96:	41af      	sbcs	r7, r5
    3f98:	2400      	movs	r4, #0
    3f9a:	430f      	orrs	r7, r1
    3f9c:	2600      	movs	r6, #0
    3f9e:	e744      	b.n	3e2a <__aeabi_dadd+0x17a>
    3fa0:	002b      	movs	r3, r5
    3fa2:	0008      	movs	r0, r1
    3fa4:	3b20      	subs	r3, #32
    3fa6:	40d8      	lsrs	r0, r3
    3fa8:	0003      	movs	r3, r0
    3faa:	2d20      	cmp	r5, #32
    3fac:	d100      	bne.n	3fb0 <__aeabi_dadd+0x300>
    3fae:	e07d      	b.n	40ac <__aeabi_dadd+0x3fc>
    3fb0:	2040      	movs	r0, #64	; 0x40
    3fb2:	1b45      	subs	r5, r0, r5
    3fb4:	40a9      	lsls	r1, r5
    3fb6:	430a      	orrs	r2, r1
    3fb8:	1e51      	subs	r1, r2, #1
    3fba:	418a      	sbcs	r2, r1
    3fbc:	2100      	movs	r1, #0
    3fbe:	431a      	orrs	r2, r3
    3fc0:	e6c7      	b.n	3d52 <__aeabi_dadd+0xa2>
    3fc2:	2e00      	cmp	r6, #0
    3fc4:	d050      	beq.n	4068 <__aeabi_dadd+0x3b8>
    3fc6:	4e1a      	ldr	r6, [pc, #104]	; (4030 <__aeabi_dadd+0x380>)
    3fc8:	42b0      	cmp	r0, r6
    3fca:	d057      	beq.n	407c <__aeabi_dadd+0x3cc>
    3fcc:	2680      	movs	r6, #128	; 0x80
    3fce:	426b      	negs	r3, r5
    3fd0:	4699      	mov	r9, r3
    3fd2:	0436      	lsls	r6, r6, #16
    3fd4:	4334      	orrs	r4, r6
    3fd6:	464b      	mov	r3, r9
    3fd8:	2b38      	cmp	r3, #56	; 0x38
    3fda:	dd00      	ble.n	3fde <__aeabi_dadd+0x32e>
    3fdc:	e0d6      	b.n	418c <__aeabi_dadd+0x4dc>
    3fde:	2b1f      	cmp	r3, #31
    3fe0:	dd00      	ble.n	3fe4 <__aeabi_dadd+0x334>
    3fe2:	e135      	b.n	4250 <__aeabi_dadd+0x5a0>
    3fe4:	2620      	movs	r6, #32
    3fe6:	1af5      	subs	r5, r6, r3
    3fe8:	0026      	movs	r6, r4
    3fea:	40ae      	lsls	r6, r5
    3fec:	46b2      	mov	sl, r6
    3fee:	003e      	movs	r6, r7
    3ff0:	40de      	lsrs	r6, r3
    3ff2:	46ac      	mov	ip, r5
    3ff4:	0035      	movs	r5, r6
    3ff6:	4656      	mov	r6, sl
    3ff8:	432e      	orrs	r6, r5
    3ffa:	4665      	mov	r5, ip
    3ffc:	40af      	lsls	r7, r5
    3ffe:	1e7d      	subs	r5, r7, #1
    4000:	41af      	sbcs	r7, r5
    4002:	40dc      	lsrs	r4, r3
    4004:	4337      	orrs	r7, r6
    4006:	1bd7      	subs	r7, r2, r7
    4008:	42ba      	cmp	r2, r7
    400a:	4192      	sbcs	r2, r2
    400c:	1b0c      	subs	r4, r1, r4
    400e:	4252      	negs	r2, r2
    4010:	1aa4      	subs	r4, r4, r2
    4012:	0006      	movs	r6, r0
    4014:	46d8      	mov	r8, fp
    4016:	e6a3      	b.n	3d60 <__aeabi_dadd+0xb0>
    4018:	4664      	mov	r4, ip
    401a:	4667      	mov	r7, ip
    401c:	432c      	orrs	r4, r5
    401e:	d000      	beq.n	4022 <__aeabi_dadd+0x372>
    4020:	e6a2      	b.n	3d68 <__aeabi_dadd+0xb8>
    4022:	2500      	movs	r5, #0
    4024:	2600      	movs	r6, #0
    4026:	2700      	movs	r7, #0
    4028:	e706      	b.n	3e38 <__aeabi_dadd+0x188>
    402a:	001e      	movs	r6, r3
    402c:	e6c4      	b.n	3db8 <__aeabi_dadd+0x108>
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	000007ff 	.word	0x000007ff
    4034:	ff7fffff 	.word	0xff7fffff
    4038:	800fffff 	.word	0x800fffff
    403c:	2b1f      	cmp	r3, #31
    403e:	dc63      	bgt.n	4108 <__aeabi_dadd+0x458>
    4040:	2020      	movs	r0, #32
    4042:	1ac3      	subs	r3, r0, r3
    4044:	0008      	movs	r0, r1
    4046:	4098      	lsls	r0, r3
    4048:	469c      	mov	ip, r3
    404a:	4683      	mov	fp, r0
    404c:	4653      	mov	r3, sl
    404e:	0010      	movs	r0, r2
    4050:	40d8      	lsrs	r0, r3
    4052:	0003      	movs	r3, r0
    4054:	4658      	mov	r0, fp
    4056:	4318      	orrs	r0, r3
    4058:	4663      	mov	r3, ip
    405a:	409a      	lsls	r2, r3
    405c:	1e53      	subs	r3, r2, #1
    405e:	419a      	sbcs	r2, r3
    4060:	4653      	mov	r3, sl
    4062:	4302      	orrs	r2, r0
    4064:	40d9      	lsrs	r1, r3
    4066:	e703      	b.n	3e70 <__aeabi_dadd+0x1c0>
    4068:	0026      	movs	r6, r4
    406a:	433e      	orrs	r6, r7
    406c:	d006      	beq.n	407c <__aeabi_dadd+0x3cc>
    406e:	43eb      	mvns	r3, r5
    4070:	4699      	mov	r9, r3
    4072:	2b00      	cmp	r3, #0
    4074:	d0c7      	beq.n	4006 <__aeabi_dadd+0x356>
    4076:	4e94      	ldr	r6, [pc, #592]	; (42c8 <__aeabi_dadd+0x618>)
    4078:	42b0      	cmp	r0, r6
    407a:	d1ac      	bne.n	3fd6 <__aeabi_dadd+0x326>
    407c:	000c      	movs	r4, r1
    407e:	0017      	movs	r7, r2
    4080:	0006      	movs	r6, r0
    4082:	46d8      	mov	r8, fp
    4084:	e698      	b.n	3db8 <__aeabi_dadd+0x108>
    4086:	4b90      	ldr	r3, [pc, #576]	; (42c8 <__aeabi_dadd+0x618>)
    4088:	459a      	cmp	sl, r3
    408a:	d00b      	beq.n	40a4 <__aeabi_dadd+0x3f4>
    408c:	4682      	mov	sl, r0
    408e:	e6e7      	b.n	3e60 <__aeabi_dadd+0x1b0>
    4090:	2800      	cmp	r0, #0
    4092:	d000      	beq.n	4096 <__aeabi_dadd+0x3e6>
    4094:	e09e      	b.n	41d4 <__aeabi_dadd+0x524>
    4096:	0018      	movs	r0, r3
    4098:	4310      	orrs	r0, r2
    409a:	d100      	bne.n	409e <__aeabi_dadd+0x3ee>
    409c:	e0e9      	b.n	4272 <__aeabi_dadd+0x5c2>
    409e:	001c      	movs	r4, r3
    40a0:	0017      	movs	r7, r2
    40a2:	46d8      	mov	r8, fp
    40a4:	4e88      	ldr	r6, [pc, #544]	; (42c8 <__aeabi_dadd+0x618>)
    40a6:	e687      	b.n	3db8 <__aeabi_dadd+0x108>
    40a8:	2500      	movs	r5, #0
    40aa:	e772      	b.n	3f92 <__aeabi_dadd+0x2e2>
    40ac:	2100      	movs	r1, #0
    40ae:	e782      	b.n	3fb6 <__aeabi_dadd+0x306>
    40b0:	0023      	movs	r3, r4
    40b2:	433b      	orrs	r3, r7
    40b4:	2e00      	cmp	r6, #0
    40b6:	d000      	beq.n	40ba <__aeabi_dadd+0x40a>
    40b8:	e0ab      	b.n	4212 <__aeabi_dadd+0x562>
    40ba:	2b00      	cmp	r3, #0
    40bc:	d100      	bne.n	40c0 <__aeabi_dadd+0x410>
    40be:	e0e7      	b.n	4290 <__aeabi_dadd+0x5e0>
    40c0:	000b      	movs	r3, r1
    40c2:	4313      	orrs	r3, r2
    40c4:	d100      	bne.n	40c8 <__aeabi_dadd+0x418>
    40c6:	e677      	b.n	3db8 <__aeabi_dadd+0x108>
    40c8:	18ba      	adds	r2, r7, r2
    40ca:	42ba      	cmp	r2, r7
    40cc:	41bf      	sbcs	r7, r7
    40ce:	1864      	adds	r4, r4, r1
    40d0:	427f      	negs	r7, r7
    40d2:	19e4      	adds	r4, r4, r7
    40d4:	0223      	lsls	r3, r4, #8
    40d6:	d400      	bmi.n	40da <__aeabi_dadd+0x42a>
    40d8:	e0f2      	b.n	42c0 <__aeabi_dadd+0x610>
    40da:	4b7c      	ldr	r3, [pc, #496]	; (42cc <__aeabi_dadd+0x61c>)
    40dc:	0017      	movs	r7, r2
    40de:	401c      	ands	r4, r3
    40e0:	0006      	movs	r6, r0
    40e2:	e669      	b.n	3db8 <__aeabi_dadd+0x108>
    40e4:	0020      	movs	r0, r4
    40e6:	4338      	orrs	r0, r7
    40e8:	2e00      	cmp	r6, #0
    40ea:	d1d1      	bne.n	4090 <__aeabi_dadd+0x3e0>
    40ec:	2800      	cmp	r0, #0
    40ee:	d15b      	bne.n	41a8 <__aeabi_dadd+0x4f8>
    40f0:	001c      	movs	r4, r3
    40f2:	4314      	orrs	r4, r2
    40f4:	d100      	bne.n	40f8 <__aeabi_dadd+0x448>
    40f6:	e0a8      	b.n	424a <__aeabi_dadd+0x59a>
    40f8:	001c      	movs	r4, r3
    40fa:	0017      	movs	r7, r2
    40fc:	46d8      	mov	r8, fp
    40fe:	e65b      	b.n	3db8 <__aeabi_dadd+0x108>
    4100:	0006      	movs	r6, r0
    4102:	2400      	movs	r4, #0
    4104:	2700      	movs	r7, #0
    4106:	e697      	b.n	3e38 <__aeabi_dadd+0x188>
    4108:	4650      	mov	r0, sl
    410a:	000b      	movs	r3, r1
    410c:	3820      	subs	r0, #32
    410e:	40c3      	lsrs	r3, r0
    4110:	4699      	mov	r9, r3
    4112:	4653      	mov	r3, sl
    4114:	2b20      	cmp	r3, #32
    4116:	d100      	bne.n	411a <__aeabi_dadd+0x46a>
    4118:	e095      	b.n	4246 <__aeabi_dadd+0x596>
    411a:	2340      	movs	r3, #64	; 0x40
    411c:	4650      	mov	r0, sl
    411e:	1a1b      	subs	r3, r3, r0
    4120:	4099      	lsls	r1, r3
    4122:	430a      	orrs	r2, r1
    4124:	1e51      	subs	r1, r2, #1
    4126:	418a      	sbcs	r2, r1
    4128:	464b      	mov	r3, r9
    412a:	2100      	movs	r1, #0
    412c:	431a      	orrs	r2, r3
    412e:	e69f      	b.n	3e70 <__aeabi_dadd+0x1c0>
    4130:	2e00      	cmp	r6, #0
    4132:	d130      	bne.n	4196 <__aeabi_dadd+0x4e6>
    4134:	0026      	movs	r6, r4
    4136:	433e      	orrs	r6, r7
    4138:	d067      	beq.n	420a <__aeabi_dadd+0x55a>
    413a:	43db      	mvns	r3, r3
    413c:	469a      	mov	sl, r3
    413e:	2b00      	cmp	r3, #0
    4140:	d01c      	beq.n	417c <__aeabi_dadd+0x4cc>
    4142:	4e61      	ldr	r6, [pc, #388]	; (42c8 <__aeabi_dadd+0x618>)
    4144:	42b0      	cmp	r0, r6
    4146:	d060      	beq.n	420a <__aeabi_dadd+0x55a>
    4148:	4653      	mov	r3, sl
    414a:	2b38      	cmp	r3, #56	; 0x38
    414c:	dd00      	ble.n	4150 <__aeabi_dadd+0x4a0>
    414e:	e096      	b.n	427e <__aeabi_dadd+0x5ce>
    4150:	2b1f      	cmp	r3, #31
    4152:	dd00      	ble.n	4156 <__aeabi_dadd+0x4a6>
    4154:	e09f      	b.n	4296 <__aeabi_dadd+0x5e6>
    4156:	2620      	movs	r6, #32
    4158:	1af3      	subs	r3, r6, r3
    415a:	0026      	movs	r6, r4
    415c:	409e      	lsls	r6, r3
    415e:	469c      	mov	ip, r3
    4160:	46b3      	mov	fp, r6
    4162:	4653      	mov	r3, sl
    4164:	003e      	movs	r6, r7
    4166:	40de      	lsrs	r6, r3
    4168:	0033      	movs	r3, r6
    416a:	465e      	mov	r6, fp
    416c:	431e      	orrs	r6, r3
    416e:	4663      	mov	r3, ip
    4170:	409f      	lsls	r7, r3
    4172:	1e7b      	subs	r3, r7, #1
    4174:	419f      	sbcs	r7, r3
    4176:	4653      	mov	r3, sl
    4178:	40dc      	lsrs	r4, r3
    417a:	4337      	orrs	r7, r6
    417c:	18bf      	adds	r7, r7, r2
    417e:	4297      	cmp	r7, r2
    4180:	4192      	sbcs	r2, r2
    4182:	1864      	adds	r4, r4, r1
    4184:	4252      	negs	r2, r2
    4186:	18a4      	adds	r4, r4, r2
    4188:	0006      	movs	r6, r0
    418a:	e678      	b.n	3e7e <__aeabi_dadd+0x1ce>
    418c:	4327      	orrs	r7, r4
    418e:	1e7c      	subs	r4, r7, #1
    4190:	41a7      	sbcs	r7, r4
    4192:	2400      	movs	r4, #0
    4194:	e737      	b.n	4006 <__aeabi_dadd+0x356>
    4196:	4e4c      	ldr	r6, [pc, #304]	; (42c8 <__aeabi_dadd+0x618>)
    4198:	42b0      	cmp	r0, r6
    419a:	d036      	beq.n	420a <__aeabi_dadd+0x55a>
    419c:	2680      	movs	r6, #128	; 0x80
    419e:	425b      	negs	r3, r3
    41a0:	0436      	lsls	r6, r6, #16
    41a2:	469a      	mov	sl, r3
    41a4:	4334      	orrs	r4, r6
    41a6:	e7cf      	b.n	4148 <__aeabi_dadd+0x498>
    41a8:	0018      	movs	r0, r3
    41aa:	4310      	orrs	r0, r2
    41ac:	d100      	bne.n	41b0 <__aeabi_dadd+0x500>
    41ae:	e603      	b.n	3db8 <__aeabi_dadd+0x108>
    41b0:	1ab8      	subs	r0, r7, r2
    41b2:	4684      	mov	ip, r0
    41b4:	4567      	cmp	r7, ip
    41b6:	41ad      	sbcs	r5, r5
    41b8:	1ae0      	subs	r0, r4, r3
    41ba:	426d      	negs	r5, r5
    41bc:	1b40      	subs	r0, r0, r5
    41be:	0205      	lsls	r5, r0, #8
    41c0:	d400      	bmi.n	41c4 <__aeabi_dadd+0x514>
    41c2:	e62c      	b.n	3e1e <__aeabi_dadd+0x16e>
    41c4:	1bd7      	subs	r7, r2, r7
    41c6:	42ba      	cmp	r2, r7
    41c8:	4192      	sbcs	r2, r2
    41ca:	1b1c      	subs	r4, r3, r4
    41cc:	4252      	negs	r2, r2
    41ce:	1aa4      	subs	r4, r4, r2
    41d0:	46d8      	mov	r8, fp
    41d2:	e5f1      	b.n	3db8 <__aeabi_dadd+0x108>
    41d4:	0018      	movs	r0, r3
    41d6:	4310      	orrs	r0, r2
    41d8:	d100      	bne.n	41dc <__aeabi_dadd+0x52c>
    41da:	e763      	b.n	40a4 <__aeabi_dadd+0x3f4>
    41dc:	08f8      	lsrs	r0, r7, #3
    41de:	0767      	lsls	r7, r4, #29
    41e0:	4307      	orrs	r7, r0
    41e2:	2080      	movs	r0, #128	; 0x80
    41e4:	08e4      	lsrs	r4, r4, #3
    41e6:	0300      	lsls	r0, r0, #12
    41e8:	4204      	tst	r4, r0
    41ea:	d008      	beq.n	41fe <__aeabi_dadd+0x54e>
    41ec:	08dd      	lsrs	r5, r3, #3
    41ee:	4205      	tst	r5, r0
    41f0:	d105      	bne.n	41fe <__aeabi_dadd+0x54e>
    41f2:	08d2      	lsrs	r2, r2, #3
    41f4:	0759      	lsls	r1, r3, #29
    41f6:	4311      	orrs	r1, r2
    41f8:	000f      	movs	r7, r1
    41fa:	002c      	movs	r4, r5
    41fc:	46d8      	mov	r8, fp
    41fe:	0f7b      	lsrs	r3, r7, #29
    4200:	00e4      	lsls	r4, r4, #3
    4202:	431c      	orrs	r4, r3
    4204:	00ff      	lsls	r7, r7, #3
    4206:	4e30      	ldr	r6, [pc, #192]	; (42c8 <__aeabi_dadd+0x618>)
    4208:	e5d6      	b.n	3db8 <__aeabi_dadd+0x108>
    420a:	000c      	movs	r4, r1
    420c:	0017      	movs	r7, r2
    420e:	0006      	movs	r6, r0
    4210:	e5d2      	b.n	3db8 <__aeabi_dadd+0x108>
    4212:	2b00      	cmp	r3, #0
    4214:	d038      	beq.n	4288 <__aeabi_dadd+0x5d8>
    4216:	000b      	movs	r3, r1
    4218:	4313      	orrs	r3, r2
    421a:	d100      	bne.n	421e <__aeabi_dadd+0x56e>
    421c:	e742      	b.n	40a4 <__aeabi_dadd+0x3f4>
    421e:	08f8      	lsrs	r0, r7, #3
    4220:	0767      	lsls	r7, r4, #29
    4222:	4307      	orrs	r7, r0
    4224:	2080      	movs	r0, #128	; 0x80
    4226:	08e4      	lsrs	r4, r4, #3
    4228:	0300      	lsls	r0, r0, #12
    422a:	4204      	tst	r4, r0
    422c:	d0e7      	beq.n	41fe <__aeabi_dadd+0x54e>
    422e:	08cb      	lsrs	r3, r1, #3
    4230:	4203      	tst	r3, r0
    4232:	d1e4      	bne.n	41fe <__aeabi_dadd+0x54e>
    4234:	08d2      	lsrs	r2, r2, #3
    4236:	0749      	lsls	r1, r1, #29
    4238:	4311      	orrs	r1, r2
    423a:	000f      	movs	r7, r1
    423c:	001c      	movs	r4, r3
    423e:	e7de      	b.n	41fe <__aeabi_dadd+0x54e>
    4240:	2700      	movs	r7, #0
    4242:	2400      	movs	r4, #0
    4244:	e5d5      	b.n	3df2 <__aeabi_dadd+0x142>
    4246:	2100      	movs	r1, #0
    4248:	e76b      	b.n	4122 <__aeabi_dadd+0x472>
    424a:	2500      	movs	r5, #0
    424c:	2700      	movs	r7, #0
    424e:	e5f3      	b.n	3e38 <__aeabi_dadd+0x188>
    4250:	464e      	mov	r6, r9
    4252:	0025      	movs	r5, r4
    4254:	3e20      	subs	r6, #32
    4256:	40f5      	lsrs	r5, r6
    4258:	464b      	mov	r3, r9
    425a:	002e      	movs	r6, r5
    425c:	2b20      	cmp	r3, #32
    425e:	d02d      	beq.n	42bc <__aeabi_dadd+0x60c>
    4260:	2540      	movs	r5, #64	; 0x40
    4262:	1aed      	subs	r5, r5, r3
    4264:	40ac      	lsls	r4, r5
    4266:	4327      	orrs	r7, r4
    4268:	1e7c      	subs	r4, r7, #1
    426a:	41a7      	sbcs	r7, r4
    426c:	2400      	movs	r4, #0
    426e:	4337      	orrs	r7, r6
    4270:	e6c9      	b.n	4006 <__aeabi_dadd+0x356>
    4272:	2480      	movs	r4, #128	; 0x80
    4274:	2500      	movs	r5, #0
    4276:	0324      	lsls	r4, r4, #12
    4278:	4e13      	ldr	r6, [pc, #76]	; (42c8 <__aeabi_dadd+0x618>)
    427a:	2700      	movs	r7, #0
    427c:	e5dc      	b.n	3e38 <__aeabi_dadd+0x188>
    427e:	4327      	orrs	r7, r4
    4280:	1e7c      	subs	r4, r7, #1
    4282:	41a7      	sbcs	r7, r4
    4284:	2400      	movs	r4, #0
    4286:	e779      	b.n	417c <__aeabi_dadd+0x4cc>
    4288:	000c      	movs	r4, r1
    428a:	0017      	movs	r7, r2
    428c:	4e0e      	ldr	r6, [pc, #56]	; (42c8 <__aeabi_dadd+0x618>)
    428e:	e593      	b.n	3db8 <__aeabi_dadd+0x108>
    4290:	000c      	movs	r4, r1
    4292:	0017      	movs	r7, r2
    4294:	e590      	b.n	3db8 <__aeabi_dadd+0x108>
    4296:	4656      	mov	r6, sl
    4298:	0023      	movs	r3, r4
    429a:	3e20      	subs	r6, #32
    429c:	40f3      	lsrs	r3, r6
    429e:	4699      	mov	r9, r3
    42a0:	4653      	mov	r3, sl
    42a2:	2b20      	cmp	r3, #32
    42a4:	d00e      	beq.n	42c4 <__aeabi_dadd+0x614>
    42a6:	2340      	movs	r3, #64	; 0x40
    42a8:	4656      	mov	r6, sl
    42aa:	1b9b      	subs	r3, r3, r6
    42ac:	409c      	lsls	r4, r3
    42ae:	4327      	orrs	r7, r4
    42b0:	1e7c      	subs	r4, r7, #1
    42b2:	41a7      	sbcs	r7, r4
    42b4:	464b      	mov	r3, r9
    42b6:	2400      	movs	r4, #0
    42b8:	431f      	orrs	r7, r3
    42ba:	e75f      	b.n	417c <__aeabi_dadd+0x4cc>
    42bc:	2400      	movs	r4, #0
    42be:	e7d2      	b.n	4266 <__aeabi_dadd+0x5b6>
    42c0:	0017      	movs	r7, r2
    42c2:	e5b2      	b.n	3e2a <__aeabi_dadd+0x17a>
    42c4:	2400      	movs	r4, #0
    42c6:	e7f2      	b.n	42ae <__aeabi_dadd+0x5fe>
    42c8:	000007ff 	.word	0x000007ff
    42cc:	ff7fffff 	.word	0xff7fffff

000042d0 <__aeabi_ddiv>:
    42d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d2:	4657      	mov	r7, sl
    42d4:	4645      	mov	r5, r8
    42d6:	46de      	mov	lr, fp
    42d8:	464e      	mov	r6, r9
    42da:	b5e0      	push	{r5, r6, r7, lr}
    42dc:	004c      	lsls	r4, r1, #1
    42de:	030e      	lsls	r6, r1, #12
    42e0:	b087      	sub	sp, #28
    42e2:	4683      	mov	fp, r0
    42e4:	4692      	mov	sl, r2
    42e6:	001d      	movs	r5, r3
    42e8:	4680      	mov	r8, r0
    42ea:	0b36      	lsrs	r6, r6, #12
    42ec:	0d64      	lsrs	r4, r4, #21
    42ee:	0fcf      	lsrs	r7, r1, #31
    42f0:	2c00      	cmp	r4, #0
    42f2:	d04f      	beq.n	4394 <__aeabi_ddiv+0xc4>
    42f4:	4b6f      	ldr	r3, [pc, #444]	; (44b4 <__aeabi_ddiv+0x1e4>)
    42f6:	429c      	cmp	r4, r3
    42f8:	d035      	beq.n	4366 <__aeabi_ddiv+0x96>
    42fa:	2380      	movs	r3, #128	; 0x80
    42fc:	0f42      	lsrs	r2, r0, #29
    42fe:	041b      	lsls	r3, r3, #16
    4300:	00f6      	lsls	r6, r6, #3
    4302:	4313      	orrs	r3, r2
    4304:	4333      	orrs	r3, r6
    4306:	4699      	mov	r9, r3
    4308:	00c3      	lsls	r3, r0, #3
    430a:	4698      	mov	r8, r3
    430c:	4b6a      	ldr	r3, [pc, #424]	; (44b8 <__aeabi_ddiv+0x1e8>)
    430e:	2600      	movs	r6, #0
    4310:	469c      	mov	ip, r3
    4312:	2300      	movs	r3, #0
    4314:	4464      	add	r4, ip
    4316:	9303      	str	r3, [sp, #12]
    4318:	032b      	lsls	r3, r5, #12
    431a:	0b1b      	lsrs	r3, r3, #12
    431c:	469b      	mov	fp, r3
    431e:	006b      	lsls	r3, r5, #1
    4320:	0fed      	lsrs	r5, r5, #31
    4322:	4650      	mov	r0, sl
    4324:	0d5b      	lsrs	r3, r3, #21
    4326:	9501      	str	r5, [sp, #4]
    4328:	d05e      	beq.n	43e8 <__aeabi_ddiv+0x118>
    432a:	4a62      	ldr	r2, [pc, #392]	; (44b4 <__aeabi_ddiv+0x1e4>)
    432c:	4293      	cmp	r3, r2
    432e:	d053      	beq.n	43d8 <__aeabi_ddiv+0x108>
    4330:	465a      	mov	r2, fp
    4332:	00d1      	lsls	r1, r2, #3
    4334:	2280      	movs	r2, #128	; 0x80
    4336:	0f40      	lsrs	r0, r0, #29
    4338:	0412      	lsls	r2, r2, #16
    433a:	4302      	orrs	r2, r0
    433c:	430a      	orrs	r2, r1
    433e:	4693      	mov	fp, r2
    4340:	4652      	mov	r2, sl
    4342:	00d1      	lsls	r1, r2, #3
    4344:	4a5c      	ldr	r2, [pc, #368]	; (44b8 <__aeabi_ddiv+0x1e8>)
    4346:	4694      	mov	ip, r2
    4348:	2200      	movs	r2, #0
    434a:	4463      	add	r3, ip
    434c:	0038      	movs	r0, r7
    434e:	4068      	eors	r0, r5
    4350:	4684      	mov	ip, r0
    4352:	9002      	str	r0, [sp, #8]
    4354:	1ae4      	subs	r4, r4, r3
    4356:	4316      	orrs	r6, r2
    4358:	2e0f      	cmp	r6, #15
    435a:	d900      	bls.n	435e <__aeabi_ddiv+0x8e>
    435c:	e0b4      	b.n	44c8 <__aeabi_ddiv+0x1f8>
    435e:	4b57      	ldr	r3, [pc, #348]	; (44bc <__aeabi_ddiv+0x1ec>)
    4360:	00b6      	lsls	r6, r6, #2
    4362:	599b      	ldr	r3, [r3, r6]
    4364:	469f      	mov	pc, r3
    4366:	0003      	movs	r3, r0
    4368:	4333      	orrs	r3, r6
    436a:	4699      	mov	r9, r3
    436c:	d16c      	bne.n	4448 <__aeabi_ddiv+0x178>
    436e:	2300      	movs	r3, #0
    4370:	4698      	mov	r8, r3
    4372:	3302      	adds	r3, #2
    4374:	2608      	movs	r6, #8
    4376:	9303      	str	r3, [sp, #12]
    4378:	e7ce      	b.n	4318 <__aeabi_ddiv+0x48>
    437a:	46cb      	mov	fp, r9
    437c:	4641      	mov	r1, r8
    437e:	9a03      	ldr	r2, [sp, #12]
    4380:	9701      	str	r7, [sp, #4]
    4382:	2a02      	cmp	r2, #2
    4384:	d165      	bne.n	4452 <__aeabi_ddiv+0x182>
    4386:	9b01      	ldr	r3, [sp, #4]
    4388:	4c4a      	ldr	r4, [pc, #296]	; (44b4 <__aeabi_ddiv+0x1e4>)
    438a:	469c      	mov	ip, r3
    438c:	2300      	movs	r3, #0
    438e:	2200      	movs	r2, #0
    4390:	4698      	mov	r8, r3
    4392:	e06b      	b.n	446c <__aeabi_ddiv+0x19c>
    4394:	0003      	movs	r3, r0
    4396:	4333      	orrs	r3, r6
    4398:	4699      	mov	r9, r3
    439a:	d04e      	beq.n	443a <__aeabi_ddiv+0x16a>
    439c:	2e00      	cmp	r6, #0
    439e:	d100      	bne.n	43a2 <__aeabi_ddiv+0xd2>
    43a0:	e1bc      	b.n	471c <__aeabi_ddiv+0x44c>
    43a2:	0030      	movs	r0, r6
    43a4:	f001 f9ee 	bl	5784 <__clzsi2>
    43a8:	0003      	movs	r3, r0
    43aa:	3b0b      	subs	r3, #11
    43ac:	2b1c      	cmp	r3, #28
    43ae:	dd00      	ble.n	43b2 <__aeabi_ddiv+0xe2>
    43b0:	e1ac      	b.n	470c <__aeabi_ddiv+0x43c>
    43b2:	221d      	movs	r2, #29
    43b4:	1ad3      	subs	r3, r2, r3
    43b6:	465a      	mov	r2, fp
    43b8:	0001      	movs	r1, r0
    43ba:	40da      	lsrs	r2, r3
    43bc:	3908      	subs	r1, #8
    43be:	408e      	lsls	r6, r1
    43c0:	0013      	movs	r3, r2
    43c2:	4333      	orrs	r3, r6
    43c4:	4699      	mov	r9, r3
    43c6:	465b      	mov	r3, fp
    43c8:	408b      	lsls	r3, r1
    43ca:	4698      	mov	r8, r3
    43cc:	2300      	movs	r3, #0
    43ce:	4c3c      	ldr	r4, [pc, #240]	; (44c0 <__aeabi_ddiv+0x1f0>)
    43d0:	2600      	movs	r6, #0
    43d2:	1a24      	subs	r4, r4, r0
    43d4:	9303      	str	r3, [sp, #12]
    43d6:	e79f      	b.n	4318 <__aeabi_ddiv+0x48>
    43d8:	4651      	mov	r1, sl
    43da:	465a      	mov	r2, fp
    43dc:	4311      	orrs	r1, r2
    43de:	d129      	bne.n	4434 <__aeabi_ddiv+0x164>
    43e0:	2200      	movs	r2, #0
    43e2:	4693      	mov	fp, r2
    43e4:	3202      	adds	r2, #2
    43e6:	e7b1      	b.n	434c <__aeabi_ddiv+0x7c>
    43e8:	4659      	mov	r1, fp
    43ea:	4301      	orrs	r1, r0
    43ec:	d01e      	beq.n	442c <__aeabi_ddiv+0x15c>
    43ee:	465b      	mov	r3, fp
    43f0:	2b00      	cmp	r3, #0
    43f2:	d100      	bne.n	43f6 <__aeabi_ddiv+0x126>
    43f4:	e19e      	b.n	4734 <__aeabi_ddiv+0x464>
    43f6:	4658      	mov	r0, fp
    43f8:	f001 f9c4 	bl	5784 <__clzsi2>
    43fc:	0003      	movs	r3, r0
    43fe:	3b0b      	subs	r3, #11
    4400:	2b1c      	cmp	r3, #28
    4402:	dd00      	ble.n	4406 <__aeabi_ddiv+0x136>
    4404:	e18f      	b.n	4726 <__aeabi_ddiv+0x456>
    4406:	0002      	movs	r2, r0
    4408:	4659      	mov	r1, fp
    440a:	3a08      	subs	r2, #8
    440c:	4091      	lsls	r1, r2
    440e:	468b      	mov	fp, r1
    4410:	211d      	movs	r1, #29
    4412:	1acb      	subs	r3, r1, r3
    4414:	4651      	mov	r1, sl
    4416:	40d9      	lsrs	r1, r3
    4418:	000b      	movs	r3, r1
    441a:	4659      	mov	r1, fp
    441c:	430b      	orrs	r3, r1
    441e:	4651      	mov	r1, sl
    4420:	469b      	mov	fp, r3
    4422:	4091      	lsls	r1, r2
    4424:	4b26      	ldr	r3, [pc, #152]	; (44c0 <__aeabi_ddiv+0x1f0>)
    4426:	2200      	movs	r2, #0
    4428:	1a1b      	subs	r3, r3, r0
    442a:	e78f      	b.n	434c <__aeabi_ddiv+0x7c>
    442c:	2300      	movs	r3, #0
    442e:	2201      	movs	r2, #1
    4430:	469b      	mov	fp, r3
    4432:	e78b      	b.n	434c <__aeabi_ddiv+0x7c>
    4434:	4651      	mov	r1, sl
    4436:	2203      	movs	r2, #3
    4438:	e788      	b.n	434c <__aeabi_ddiv+0x7c>
    443a:	2300      	movs	r3, #0
    443c:	4698      	mov	r8, r3
    443e:	3301      	adds	r3, #1
    4440:	2604      	movs	r6, #4
    4442:	2400      	movs	r4, #0
    4444:	9303      	str	r3, [sp, #12]
    4446:	e767      	b.n	4318 <__aeabi_ddiv+0x48>
    4448:	2303      	movs	r3, #3
    444a:	46b1      	mov	r9, r6
    444c:	9303      	str	r3, [sp, #12]
    444e:	260c      	movs	r6, #12
    4450:	e762      	b.n	4318 <__aeabi_ddiv+0x48>
    4452:	2a03      	cmp	r2, #3
    4454:	d100      	bne.n	4458 <__aeabi_ddiv+0x188>
    4456:	e25c      	b.n	4912 <__aeabi_ddiv+0x642>
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	2a01      	cmp	r2, #1
    445c:	d000      	beq.n	4460 <__aeabi_ddiv+0x190>
    445e:	e1e4      	b.n	482a <__aeabi_ddiv+0x55a>
    4460:	4013      	ands	r3, r2
    4462:	469c      	mov	ip, r3
    4464:	2300      	movs	r3, #0
    4466:	2400      	movs	r4, #0
    4468:	2200      	movs	r2, #0
    446a:	4698      	mov	r8, r3
    446c:	2100      	movs	r1, #0
    446e:	0312      	lsls	r2, r2, #12
    4470:	0b13      	lsrs	r3, r2, #12
    4472:	0d0a      	lsrs	r2, r1, #20
    4474:	0512      	lsls	r2, r2, #20
    4476:	431a      	orrs	r2, r3
    4478:	0523      	lsls	r3, r4, #20
    447a:	4c12      	ldr	r4, [pc, #72]	; (44c4 <__aeabi_ddiv+0x1f4>)
    447c:	4640      	mov	r0, r8
    447e:	4022      	ands	r2, r4
    4480:	4313      	orrs	r3, r2
    4482:	4662      	mov	r2, ip
    4484:	005b      	lsls	r3, r3, #1
    4486:	07d2      	lsls	r2, r2, #31
    4488:	085b      	lsrs	r3, r3, #1
    448a:	4313      	orrs	r3, r2
    448c:	0019      	movs	r1, r3
    448e:	b007      	add	sp, #28
    4490:	bc3c      	pop	{r2, r3, r4, r5}
    4492:	4690      	mov	r8, r2
    4494:	4699      	mov	r9, r3
    4496:	46a2      	mov	sl, r4
    4498:	46ab      	mov	fp, r5
    449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449c:	2300      	movs	r3, #0
    449e:	2280      	movs	r2, #128	; 0x80
    44a0:	469c      	mov	ip, r3
    44a2:	0312      	lsls	r2, r2, #12
    44a4:	4698      	mov	r8, r3
    44a6:	4c03      	ldr	r4, [pc, #12]	; (44b4 <__aeabi_ddiv+0x1e4>)
    44a8:	e7e0      	b.n	446c <__aeabi_ddiv+0x19c>
    44aa:	2300      	movs	r3, #0
    44ac:	4c01      	ldr	r4, [pc, #4]	; (44b4 <__aeabi_ddiv+0x1e4>)
    44ae:	2200      	movs	r2, #0
    44b0:	4698      	mov	r8, r3
    44b2:	e7db      	b.n	446c <__aeabi_ddiv+0x19c>
    44b4:	000007ff 	.word	0x000007ff
    44b8:	fffffc01 	.word	0xfffffc01
    44bc:	00007e44 	.word	0x00007e44
    44c0:	fffffc0d 	.word	0xfffffc0d
    44c4:	800fffff 	.word	0x800fffff
    44c8:	45d9      	cmp	r9, fp
    44ca:	d900      	bls.n	44ce <__aeabi_ddiv+0x1fe>
    44cc:	e139      	b.n	4742 <__aeabi_ddiv+0x472>
    44ce:	d100      	bne.n	44d2 <__aeabi_ddiv+0x202>
    44d0:	e134      	b.n	473c <__aeabi_ddiv+0x46c>
    44d2:	2300      	movs	r3, #0
    44d4:	4646      	mov	r6, r8
    44d6:	464d      	mov	r5, r9
    44d8:	469a      	mov	sl, r3
    44da:	3c01      	subs	r4, #1
    44dc:	465b      	mov	r3, fp
    44de:	0e0a      	lsrs	r2, r1, #24
    44e0:	021b      	lsls	r3, r3, #8
    44e2:	431a      	orrs	r2, r3
    44e4:	020b      	lsls	r3, r1, #8
    44e6:	0c17      	lsrs	r7, r2, #16
    44e8:	9303      	str	r3, [sp, #12]
    44ea:	0413      	lsls	r3, r2, #16
    44ec:	0c1b      	lsrs	r3, r3, #16
    44ee:	0039      	movs	r1, r7
    44f0:	0028      	movs	r0, r5
    44f2:	4690      	mov	r8, r2
    44f4:	9301      	str	r3, [sp, #4]
    44f6:	f7fe fed5 	bl	32a4 <__udivsi3>
    44fa:	0002      	movs	r2, r0
    44fc:	9b01      	ldr	r3, [sp, #4]
    44fe:	4683      	mov	fp, r0
    4500:	435a      	muls	r2, r3
    4502:	0028      	movs	r0, r5
    4504:	0039      	movs	r1, r7
    4506:	4691      	mov	r9, r2
    4508:	f7fe ff52 	bl	33b0 <__aeabi_uidivmod>
    450c:	0c35      	lsrs	r5, r6, #16
    450e:	0409      	lsls	r1, r1, #16
    4510:	430d      	orrs	r5, r1
    4512:	45a9      	cmp	r9, r5
    4514:	d90d      	bls.n	4532 <__aeabi_ddiv+0x262>
    4516:	465b      	mov	r3, fp
    4518:	4445      	add	r5, r8
    451a:	3b01      	subs	r3, #1
    451c:	45a8      	cmp	r8, r5
    451e:	d900      	bls.n	4522 <__aeabi_ddiv+0x252>
    4520:	e13a      	b.n	4798 <__aeabi_ddiv+0x4c8>
    4522:	45a9      	cmp	r9, r5
    4524:	d800      	bhi.n	4528 <__aeabi_ddiv+0x258>
    4526:	e137      	b.n	4798 <__aeabi_ddiv+0x4c8>
    4528:	2302      	movs	r3, #2
    452a:	425b      	negs	r3, r3
    452c:	469c      	mov	ip, r3
    452e:	4445      	add	r5, r8
    4530:	44e3      	add	fp, ip
    4532:	464b      	mov	r3, r9
    4534:	1aeb      	subs	r3, r5, r3
    4536:	0039      	movs	r1, r7
    4538:	0018      	movs	r0, r3
    453a:	9304      	str	r3, [sp, #16]
    453c:	f7fe feb2 	bl	32a4 <__udivsi3>
    4540:	9b01      	ldr	r3, [sp, #4]
    4542:	0005      	movs	r5, r0
    4544:	4343      	muls	r3, r0
    4546:	0039      	movs	r1, r7
    4548:	9804      	ldr	r0, [sp, #16]
    454a:	4699      	mov	r9, r3
    454c:	f7fe ff30 	bl	33b0 <__aeabi_uidivmod>
    4550:	0433      	lsls	r3, r6, #16
    4552:	0409      	lsls	r1, r1, #16
    4554:	0c1b      	lsrs	r3, r3, #16
    4556:	430b      	orrs	r3, r1
    4558:	4599      	cmp	r9, r3
    455a:	d909      	bls.n	4570 <__aeabi_ddiv+0x2a0>
    455c:	4443      	add	r3, r8
    455e:	1e6a      	subs	r2, r5, #1
    4560:	4598      	cmp	r8, r3
    4562:	d900      	bls.n	4566 <__aeabi_ddiv+0x296>
    4564:	e11a      	b.n	479c <__aeabi_ddiv+0x4cc>
    4566:	4599      	cmp	r9, r3
    4568:	d800      	bhi.n	456c <__aeabi_ddiv+0x29c>
    456a:	e117      	b.n	479c <__aeabi_ddiv+0x4cc>
    456c:	3d02      	subs	r5, #2
    456e:	4443      	add	r3, r8
    4570:	464a      	mov	r2, r9
    4572:	1a9b      	subs	r3, r3, r2
    4574:	465a      	mov	r2, fp
    4576:	0412      	lsls	r2, r2, #16
    4578:	432a      	orrs	r2, r5
    457a:	9903      	ldr	r1, [sp, #12]
    457c:	4693      	mov	fp, r2
    457e:	0c10      	lsrs	r0, r2, #16
    4580:	0c0a      	lsrs	r2, r1, #16
    4582:	4691      	mov	r9, r2
    4584:	0409      	lsls	r1, r1, #16
    4586:	465a      	mov	r2, fp
    4588:	0c09      	lsrs	r1, r1, #16
    458a:	464e      	mov	r6, r9
    458c:	000d      	movs	r5, r1
    458e:	0412      	lsls	r2, r2, #16
    4590:	0c12      	lsrs	r2, r2, #16
    4592:	4345      	muls	r5, r0
    4594:	9105      	str	r1, [sp, #20]
    4596:	4351      	muls	r1, r2
    4598:	4372      	muls	r2, r6
    459a:	4370      	muls	r0, r6
    459c:	1952      	adds	r2, r2, r5
    459e:	0c0e      	lsrs	r6, r1, #16
    45a0:	18b2      	adds	r2, r6, r2
    45a2:	4295      	cmp	r5, r2
    45a4:	d903      	bls.n	45ae <__aeabi_ddiv+0x2de>
    45a6:	2580      	movs	r5, #128	; 0x80
    45a8:	026d      	lsls	r5, r5, #9
    45aa:	46ac      	mov	ip, r5
    45ac:	4460      	add	r0, ip
    45ae:	0c15      	lsrs	r5, r2, #16
    45b0:	0409      	lsls	r1, r1, #16
    45b2:	0412      	lsls	r2, r2, #16
    45b4:	0c09      	lsrs	r1, r1, #16
    45b6:	1828      	adds	r0, r5, r0
    45b8:	1852      	adds	r2, r2, r1
    45ba:	4283      	cmp	r3, r0
    45bc:	d200      	bcs.n	45c0 <__aeabi_ddiv+0x2f0>
    45be:	e0ce      	b.n	475e <__aeabi_ddiv+0x48e>
    45c0:	d100      	bne.n	45c4 <__aeabi_ddiv+0x2f4>
    45c2:	e0c8      	b.n	4756 <__aeabi_ddiv+0x486>
    45c4:	1a1d      	subs	r5, r3, r0
    45c6:	4653      	mov	r3, sl
    45c8:	1a9e      	subs	r6, r3, r2
    45ca:	45b2      	cmp	sl, r6
    45cc:	4192      	sbcs	r2, r2
    45ce:	4252      	negs	r2, r2
    45d0:	1aab      	subs	r3, r5, r2
    45d2:	469a      	mov	sl, r3
    45d4:	4598      	cmp	r8, r3
    45d6:	d100      	bne.n	45da <__aeabi_ddiv+0x30a>
    45d8:	e117      	b.n	480a <__aeabi_ddiv+0x53a>
    45da:	0039      	movs	r1, r7
    45dc:	0018      	movs	r0, r3
    45de:	f7fe fe61 	bl	32a4 <__udivsi3>
    45e2:	9b01      	ldr	r3, [sp, #4]
    45e4:	0005      	movs	r5, r0
    45e6:	4343      	muls	r3, r0
    45e8:	0039      	movs	r1, r7
    45ea:	4650      	mov	r0, sl
    45ec:	9304      	str	r3, [sp, #16]
    45ee:	f7fe fedf 	bl	33b0 <__aeabi_uidivmod>
    45f2:	9804      	ldr	r0, [sp, #16]
    45f4:	040b      	lsls	r3, r1, #16
    45f6:	0c31      	lsrs	r1, r6, #16
    45f8:	4319      	orrs	r1, r3
    45fa:	4288      	cmp	r0, r1
    45fc:	d909      	bls.n	4612 <__aeabi_ddiv+0x342>
    45fe:	4441      	add	r1, r8
    4600:	1e6b      	subs	r3, r5, #1
    4602:	4588      	cmp	r8, r1
    4604:	d900      	bls.n	4608 <__aeabi_ddiv+0x338>
    4606:	e107      	b.n	4818 <__aeabi_ddiv+0x548>
    4608:	4288      	cmp	r0, r1
    460a:	d800      	bhi.n	460e <__aeabi_ddiv+0x33e>
    460c:	e104      	b.n	4818 <__aeabi_ddiv+0x548>
    460e:	3d02      	subs	r5, #2
    4610:	4441      	add	r1, r8
    4612:	9b04      	ldr	r3, [sp, #16]
    4614:	1acb      	subs	r3, r1, r3
    4616:	0018      	movs	r0, r3
    4618:	0039      	movs	r1, r7
    461a:	9304      	str	r3, [sp, #16]
    461c:	f7fe fe42 	bl	32a4 <__udivsi3>
    4620:	9b01      	ldr	r3, [sp, #4]
    4622:	4682      	mov	sl, r0
    4624:	4343      	muls	r3, r0
    4626:	0039      	movs	r1, r7
    4628:	9804      	ldr	r0, [sp, #16]
    462a:	9301      	str	r3, [sp, #4]
    462c:	f7fe fec0 	bl	33b0 <__aeabi_uidivmod>
    4630:	9801      	ldr	r0, [sp, #4]
    4632:	040b      	lsls	r3, r1, #16
    4634:	0431      	lsls	r1, r6, #16
    4636:	0c09      	lsrs	r1, r1, #16
    4638:	4319      	orrs	r1, r3
    463a:	4288      	cmp	r0, r1
    463c:	d90d      	bls.n	465a <__aeabi_ddiv+0x38a>
    463e:	4653      	mov	r3, sl
    4640:	4441      	add	r1, r8
    4642:	3b01      	subs	r3, #1
    4644:	4588      	cmp	r8, r1
    4646:	d900      	bls.n	464a <__aeabi_ddiv+0x37a>
    4648:	e0e8      	b.n	481c <__aeabi_ddiv+0x54c>
    464a:	4288      	cmp	r0, r1
    464c:	d800      	bhi.n	4650 <__aeabi_ddiv+0x380>
    464e:	e0e5      	b.n	481c <__aeabi_ddiv+0x54c>
    4650:	2302      	movs	r3, #2
    4652:	425b      	negs	r3, r3
    4654:	469c      	mov	ip, r3
    4656:	4441      	add	r1, r8
    4658:	44e2      	add	sl, ip
    465a:	9b01      	ldr	r3, [sp, #4]
    465c:	042d      	lsls	r5, r5, #16
    465e:	1ace      	subs	r6, r1, r3
    4660:	4651      	mov	r1, sl
    4662:	4329      	orrs	r1, r5
    4664:	9d05      	ldr	r5, [sp, #20]
    4666:	464f      	mov	r7, r9
    4668:	002a      	movs	r2, r5
    466a:	040b      	lsls	r3, r1, #16
    466c:	0c08      	lsrs	r0, r1, #16
    466e:	0c1b      	lsrs	r3, r3, #16
    4670:	435a      	muls	r2, r3
    4672:	4345      	muls	r5, r0
    4674:	437b      	muls	r3, r7
    4676:	4378      	muls	r0, r7
    4678:	195b      	adds	r3, r3, r5
    467a:	0c17      	lsrs	r7, r2, #16
    467c:	18fb      	adds	r3, r7, r3
    467e:	429d      	cmp	r5, r3
    4680:	d903      	bls.n	468a <__aeabi_ddiv+0x3ba>
    4682:	2580      	movs	r5, #128	; 0x80
    4684:	026d      	lsls	r5, r5, #9
    4686:	46ac      	mov	ip, r5
    4688:	4460      	add	r0, ip
    468a:	0c1d      	lsrs	r5, r3, #16
    468c:	0412      	lsls	r2, r2, #16
    468e:	041b      	lsls	r3, r3, #16
    4690:	0c12      	lsrs	r2, r2, #16
    4692:	1828      	adds	r0, r5, r0
    4694:	189b      	adds	r3, r3, r2
    4696:	4286      	cmp	r6, r0
    4698:	d200      	bcs.n	469c <__aeabi_ddiv+0x3cc>
    469a:	e093      	b.n	47c4 <__aeabi_ddiv+0x4f4>
    469c:	d100      	bne.n	46a0 <__aeabi_ddiv+0x3d0>
    469e:	e08e      	b.n	47be <__aeabi_ddiv+0x4ee>
    46a0:	2301      	movs	r3, #1
    46a2:	4319      	orrs	r1, r3
    46a4:	4ba0      	ldr	r3, [pc, #640]	; (4928 <__aeabi_ddiv+0x658>)
    46a6:	18e3      	adds	r3, r4, r3
    46a8:	2b00      	cmp	r3, #0
    46aa:	dc00      	bgt.n	46ae <__aeabi_ddiv+0x3de>
    46ac:	e099      	b.n	47e2 <__aeabi_ddiv+0x512>
    46ae:	074a      	lsls	r2, r1, #29
    46b0:	d000      	beq.n	46b4 <__aeabi_ddiv+0x3e4>
    46b2:	e09e      	b.n	47f2 <__aeabi_ddiv+0x522>
    46b4:	465a      	mov	r2, fp
    46b6:	01d2      	lsls	r2, r2, #7
    46b8:	d506      	bpl.n	46c8 <__aeabi_ddiv+0x3f8>
    46ba:	465a      	mov	r2, fp
    46bc:	4b9b      	ldr	r3, [pc, #620]	; (492c <__aeabi_ddiv+0x65c>)
    46be:	401a      	ands	r2, r3
    46c0:	2380      	movs	r3, #128	; 0x80
    46c2:	4693      	mov	fp, r2
    46c4:	00db      	lsls	r3, r3, #3
    46c6:	18e3      	adds	r3, r4, r3
    46c8:	4a99      	ldr	r2, [pc, #612]	; (4930 <__aeabi_ddiv+0x660>)
    46ca:	4293      	cmp	r3, r2
    46cc:	dd68      	ble.n	47a0 <__aeabi_ddiv+0x4d0>
    46ce:	2301      	movs	r3, #1
    46d0:	9a02      	ldr	r2, [sp, #8]
    46d2:	4c98      	ldr	r4, [pc, #608]	; (4934 <__aeabi_ddiv+0x664>)
    46d4:	401a      	ands	r2, r3
    46d6:	2300      	movs	r3, #0
    46d8:	4694      	mov	ip, r2
    46da:	4698      	mov	r8, r3
    46dc:	2200      	movs	r2, #0
    46de:	e6c5      	b.n	446c <__aeabi_ddiv+0x19c>
    46e0:	2280      	movs	r2, #128	; 0x80
    46e2:	464b      	mov	r3, r9
    46e4:	0312      	lsls	r2, r2, #12
    46e6:	4213      	tst	r3, r2
    46e8:	d00a      	beq.n	4700 <__aeabi_ddiv+0x430>
    46ea:	465b      	mov	r3, fp
    46ec:	4213      	tst	r3, r2
    46ee:	d106      	bne.n	46fe <__aeabi_ddiv+0x42e>
    46f0:	431a      	orrs	r2, r3
    46f2:	0312      	lsls	r2, r2, #12
    46f4:	0b12      	lsrs	r2, r2, #12
    46f6:	46ac      	mov	ip, r5
    46f8:	4688      	mov	r8, r1
    46fa:	4c8e      	ldr	r4, [pc, #568]	; (4934 <__aeabi_ddiv+0x664>)
    46fc:	e6b6      	b.n	446c <__aeabi_ddiv+0x19c>
    46fe:	464b      	mov	r3, r9
    4700:	431a      	orrs	r2, r3
    4702:	0312      	lsls	r2, r2, #12
    4704:	0b12      	lsrs	r2, r2, #12
    4706:	46bc      	mov	ip, r7
    4708:	4c8a      	ldr	r4, [pc, #552]	; (4934 <__aeabi_ddiv+0x664>)
    470a:	e6af      	b.n	446c <__aeabi_ddiv+0x19c>
    470c:	0003      	movs	r3, r0
    470e:	465a      	mov	r2, fp
    4710:	3b28      	subs	r3, #40	; 0x28
    4712:	409a      	lsls	r2, r3
    4714:	2300      	movs	r3, #0
    4716:	4691      	mov	r9, r2
    4718:	4698      	mov	r8, r3
    471a:	e657      	b.n	43cc <__aeabi_ddiv+0xfc>
    471c:	4658      	mov	r0, fp
    471e:	f001 f831 	bl	5784 <__clzsi2>
    4722:	3020      	adds	r0, #32
    4724:	e640      	b.n	43a8 <__aeabi_ddiv+0xd8>
    4726:	0003      	movs	r3, r0
    4728:	4652      	mov	r2, sl
    472a:	3b28      	subs	r3, #40	; 0x28
    472c:	409a      	lsls	r2, r3
    472e:	2100      	movs	r1, #0
    4730:	4693      	mov	fp, r2
    4732:	e677      	b.n	4424 <__aeabi_ddiv+0x154>
    4734:	f001 f826 	bl	5784 <__clzsi2>
    4738:	3020      	adds	r0, #32
    473a:	e65f      	b.n	43fc <__aeabi_ddiv+0x12c>
    473c:	4588      	cmp	r8, r1
    473e:	d200      	bcs.n	4742 <__aeabi_ddiv+0x472>
    4740:	e6c7      	b.n	44d2 <__aeabi_ddiv+0x202>
    4742:	464b      	mov	r3, r9
    4744:	07de      	lsls	r6, r3, #31
    4746:	085d      	lsrs	r5, r3, #1
    4748:	4643      	mov	r3, r8
    474a:	085b      	lsrs	r3, r3, #1
    474c:	431e      	orrs	r6, r3
    474e:	4643      	mov	r3, r8
    4750:	07db      	lsls	r3, r3, #31
    4752:	469a      	mov	sl, r3
    4754:	e6c2      	b.n	44dc <__aeabi_ddiv+0x20c>
    4756:	2500      	movs	r5, #0
    4758:	4592      	cmp	sl, r2
    475a:	d300      	bcc.n	475e <__aeabi_ddiv+0x48e>
    475c:	e733      	b.n	45c6 <__aeabi_ddiv+0x2f6>
    475e:	9e03      	ldr	r6, [sp, #12]
    4760:	4659      	mov	r1, fp
    4762:	46b4      	mov	ip, r6
    4764:	44e2      	add	sl, ip
    4766:	45b2      	cmp	sl, r6
    4768:	41ad      	sbcs	r5, r5
    476a:	426d      	negs	r5, r5
    476c:	4445      	add	r5, r8
    476e:	18eb      	adds	r3, r5, r3
    4770:	3901      	subs	r1, #1
    4772:	4598      	cmp	r8, r3
    4774:	d207      	bcs.n	4786 <__aeabi_ddiv+0x4b6>
    4776:	4298      	cmp	r0, r3
    4778:	d900      	bls.n	477c <__aeabi_ddiv+0x4ac>
    477a:	e07f      	b.n	487c <__aeabi_ddiv+0x5ac>
    477c:	d100      	bne.n	4780 <__aeabi_ddiv+0x4b0>
    477e:	e0bc      	b.n	48fa <__aeabi_ddiv+0x62a>
    4780:	1a1d      	subs	r5, r3, r0
    4782:	468b      	mov	fp, r1
    4784:	e71f      	b.n	45c6 <__aeabi_ddiv+0x2f6>
    4786:	4598      	cmp	r8, r3
    4788:	d1fa      	bne.n	4780 <__aeabi_ddiv+0x4b0>
    478a:	9d03      	ldr	r5, [sp, #12]
    478c:	4555      	cmp	r5, sl
    478e:	d9f2      	bls.n	4776 <__aeabi_ddiv+0x4a6>
    4790:	4643      	mov	r3, r8
    4792:	468b      	mov	fp, r1
    4794:	1a1d      	subs	r5, r3, r0
    4796:	e716      	b.n	45c6 <__aeabi_ddiv+0x2f6>
    4798:	469b      	mov	fp, r3
    479a:	e6ca      	b.n	4532 <__aeabi_ddiv+0x262>
    479c:	0015      	movs	r5, r2
    479e:	e6e7      	b.n	4570 <__aeabi_ddiv+0x2a0>
    47a0:	465a      	mov	r2, fp
    47a2:	08c9      	lsrs	r1, r1, #3
    47a4:	0752      	lsls	r2, r2, #29
    47a6:	430a      	orrs	r2, r1
    47a8:	055b      	lsls	r3, r3, #21
    47aa:	4690      	mov	r8, r2
    47ac:	0d5c      	lsrs	r4, r3, #21
    47ae:	465a      	mov	r2, fp
    47b0:	2301      	movs	r3, #1
    47b2:	9902      	ldr	r1, [sp, #8]
    47b4:	0252      	lsls	r2, r2, #9
    47b6:	4019      	ands	r1, r3
    47b8:	0b12      	lsrs	r2, r2, #12
    47ba:	468c      	mov	ip, r1
    47bc:	e656      	b.n	446c <__aeabi_ddiv+0x19c>
    47be:	2b00      	cmp	r3, #0
    47c0:	d100      	bne.n	47c4 <__aeabi_ddiv+0x4f4>
    47c2:	e76f      	b.n	46a4 <__aeabi_ddiv+0x3d4>
    47c4:	4446      	add	r6, r8
    47c6:	1e4a      	subs	r2, r1, #1
    47c8:	45b0      	cmp	r8, r6
    47ca:	d929      	bls.n	4820 <__aeabi_ddiv+0x550>
    47cc:	0011      	movs	r1, r2
    47ce:	4286      	cmp	r6, r0
    47d0:	d000      	beq.n	47d4 <__aeabi_ddiv+0x504>
    47d2:	e765      	b.n	46a0 <__aeabi_ddiv+0x3d0>
    47d4:	9a03      	ldr	r2, [sp, #12]
    47d6:	4293      	cmp	r3, r2
    47d8:	d000      	beq.n	47dc <__aeabi_ddiv+0x50c>
    47da:	e761      	b.n	46a0 <__aeabi_ddiv+0x3d0>
    47dc:	e762      	b.n	46a4 <__aeabi_ddiv+0x3d4>
    47de:	2101      	movs	r1, #1
    47e0:	4249      	negs	r1, r1
    47e2:	2001      	movs	r0, #1
    47e4:	1ac2      	subs	r2, r0, r3
    47e6:	2a38      	cmp	r2, #56	; 0x38
    47e8:	dd21      	ble.n	482e <__aeabi_ddiv+0x55e>
    47ea:	9b02      	ldr	r3, [sp, #8]
    47ec:	4003      	ands	r3, r0
    47ee:	469c      	mov	ip, r3
    47f0:	e638      	b.n	4464 <__aeabi_ddiv+0x194>
    47f2:	220f      	movs	r2, #15
    47f4:	400a      	ands	r2, r1
    47f6:	2a04      	cmp	r2, #4
    47f8:	d100      	bne.n	47fc <__aeabi_ddiv+0x52c>
    47fa:	e75b      	b.n	46b4 <__aeabi_ddiv+0x3e4>
    47fc:	000a      	movs	r2, r1
    47fe:	1d11      	adds	r1, r2, #4
    4800:	4291      	cmp	r1, r2
    4802:	4192      	sbcs	r2, r2
    4804:	4252      	negs	r2, r2
    4806:	4493      	add	fp, r2
    4808:	e754      	b.n	46b4 <__aeabi_ddiv+0x3e4>
    480a:	4b47      	ldr	r3, [pc, #284]	; (4928 <__aeabi_ddiv+0x658>)
    480c:	18e3      	adds	r3, r4, r3
    480e:	2b00      	cmp	r3, #0
    4810:	dde5      	ble.n	47de <__aeabi_ddiv+0x50e>
    4812:	2201      	movs	r2, #1
    4814:	4252      	negs	r2, r2
    4816:	e7f2      	b.n	47fe <__aeabi_ddiv+0x52e>
    4818:	001d      	movs	r5, r3
    481a:	e6fa      	b.n	4612 <__aeabi_ddiv+0x342>
    481c:	469a      	mov	sl, r3
    481e:	e71c      	b.n	465a <__aeabi_ddiv+0x38a>
    4820:	42b0      	cmp	r0, r6
    4822:	d839      	bhi.n	4898 <__aeabi_ddiv+0x5c8>
    4824:	d06e      	beq.n	4904 <__aeabi_ddiv+0x634>
    4826:	0011      	movs	r1, r2
    4828:	e73a      	b.n	46a0 <__aeabi_ddiv+0x3d0>
    482a:	9302      	str	r3, [sp, #8]
    482c:	e73a      	b.n	46a4 <__aeabi_ddiv+0x3d4>
    482e:	2a1f      	cmp	r2, #31
    4830:	dc3c      	bgt.n	48ac <__aeabi_ddiv+0x5dc>
    4832:	2320      	movs	r3, #32
    4834:	1a9b      	subs	r3, r3, r2
    4836:	000c      	movs	r4, r1
    4838:	4658      	mov	r0, fp
    483a:	4099      	lsls	r1, r3
    483c:	4098      	lsls	r0, r3
    483e:	1e4b      	subs	r3, r1, #1
    4840:	4199      	sbcs	r1, r3
    4842:	465b      	mov	r3, fp
    4844:	40d4      	lsrs	r4, r2
    4846:	40d3      	lsrs	r3, r2
    4848:	4320      	orrs	r0, r4
    484a:	4308      	orrs	r0, r1
    484c:	001a      	movs	r2, r3
    484e:	0743      	lsls	r3, r0, #29
    4850:	d009      	beq.n	4866 <__aeabi_ddiv+0x596>
    4852:	230f      	movs	r3, #15
    4854:	4003      	ands	r3, r0
    4856:	2b04      	cmp	r3, #4
    4858:	d005      	beq.n	4866 <__aeabi_ddiv+0x596>
    485a:	0001      	movs	r1, r0
    485c:	1d08      	adds	r0, r1, #4
    485e:	4288      	cmp	r0, r1
    4860:	419b      	sbcs	r3, r3
    4862:	425b      	negs	r3, r3
    4864:	18d2      	adds	r2, r2, r3
    4866:	0213      	lsls	r3, r2, #8
    4868:	d53a      	bpl.n	48e0 <__aeabi_ddiv+0x610>
    486a:	2301      	movs	r3, #1
    486c:	9a02      	ldr	r2, [sp, #8]
    486e:	2401      	movs	r4, #1
    4870:	401a      	ands	r2, r3
    4872:	2300      	movs	r3, #0
    4874:	4694      	mov	ip, r2
    4876:	4698      	mov	r8, r3
    4878:	2200      	movs	r2, #0
    487a:	e5f7      	b.n	446c <__aeabi_ddiv+0x19c>
    487c:	2102      	movs	r1, #2
    487e:	4249      	negs	r1, r1
    4880:	468c      	mov	ip, r1
    4882:	9d03      	ldr	r5, [sp, #12]
    4884:	44e3      	add	fp, ip
    4886:	46ac      	mov	ip, r5
    4888:	44e2      	add	sl, ip
    488a:	45aa      	cmp	sl, r5
    488c:	41ad      	sbcs	r5, r5
    488e:	426d      	negs	r5, r5
    4890:	4445      	add	r5, r8
    4892:	18ed      	adds	r5, r5, r3
    4894:	1a2d      	subs	r5, r5, r0
    4896:	e696      	b.n	45c6 <__aeabi_ddiv+0x2f6>
    4898:	1e8a      	subs	r2, r1, #2
    489a:	9903      	ldr	r1, [sp, #12]
    489c:	004d      	lsls	r5, r1, #1
    489e:	428d      	cmp	r5, r1
    48a0:	4189      	sbcs	r1, r1
    48a2:	4249      	negs	r1, r1
    48a4:	4441      	add	r1, r8
    48a6:	1876      	adds	r6, r6, r1
    48a8:	9503      	str	r5, [sp, #12]
    48aa:	e78f      	b.n	47cc <__aeabi_ddiv+0x4fc>
    48ac:	201f      	movs	r0, #31
    48ae:	4240      	negs	r0, r0
    48b0:	1ac3      	subs	r3, r0, r3
    48b2:	4658      	mov	r0, fp
    48b4:	40d8      	lsrs	r0, r3
    48b6:	0003      	movs	r3, r0
    48b8:	2a20      	cmp	r2, #32
    48ba:	d028      	beq.n	490e <__aeabi_ddiv+0x63e>
    48bc:	2040      	movs	r0, #64	; 0x40
    48be:	465d      	mov	r5, fp
    48c0:	1a82      	subs	r2, r0, r2
    48c2:	4095      	lsls	r5, r2
    48c4:	4329      	orrs	r1, r5
    48c6:	1e4a      	subs	r2, r1, #1
    48c8:	4191      	sbcs	r1, r2
    48ca:	4319      	orrs	r1, r3
    48cc:	2307      	movs	r3, #7
    48ce:	2200      	movs	r2, #0
    48d0:	400b      	ands	r3, r1
    48d2:	d009      	beq.n	48e8 <__aeabi_ddiv+0x618>
    48d4:	230f      	movs	r3, #15
    48d6:	2200      	movs	r2, #0
    48d8:	400b      	ands	r3, r1
    48da:	0008      	movs	r0, r1
    48dc:	2b04      	cmp	r3, #4
    48de:	d1bd      	bne.n	485c <__aeabi_ddiv+0x58c>
    48e0:	0001      	movs	r1, r0
    48e2:	0753      	lsls	r3, r2, #29
    48e4:	0252      	lsls	r2, r2, #9
    48e6:	0b12      	lsrs	r2, r2, #12
    48e8:	08c9      	lsrs	r1, r1, #3
    48ea:	4319      	orrs	r1, r3
    48ec:	2301      	movs	r3, #1
    48ee:	4688      	mov	r8, r1
    48f0:	9902      	ldr	r1, [sp, #8]
    48f2:	2400      	movs	r4, #0
    48f4:	4019      	ands	r1, r3
    48f6:	468c      	mov	ip, r1
    48f8:	e5b8      	b.n	446c <__aeabi_ddiv+0x19c>
    48fa:	4552      	cmp	r2, sl
    48fc:	d8be      	bhi.n	487c <__aeabi_ddiv+0x5ac>
    48fe:	468b      	mov	fp, r1
    4900:	2500      	movs	r5, #0
    4902:	e660      	b.n	45c6 <__aeabi_ddiv+0x2f6>
    4904:	9d03      	ldr	r5, [sp, #12]
    4906:	429d      	cmp	r5, r3
    4908:	d3c6      	bcc.n	4898 <__aeabi_ddiv+0x5c8>
    490a:	0011      	movs	r1, r2
    490c:	e762      	b.n	47d4 <__aeabi_ddiv+0x504>
    490e:	2500      	movs	r5, #0
    4910:	e7d8      	b.n	48c4 <__aeabi_ddiv+0x5f4>
    4912:	2280      	movs	r2, #128	; 0x80
    4914:	465b      	mov	r3, fp
    4916:	0312      	lsls	r2, r2, #12
    4918:	431a      	orrs	r2, r3
    491a:	9b01      	ldr	r3, [sp, #4]
    491c:	0312      	lsls	r2, r2, #12
    491e:	0b12      	lsrs	r2, r2, #12
    4920:	469c      	mov	ip, r3
    4922:	4688      	mov	r8, r1
    4924:	4c03      	ldr	r4, [pc, #12]	; (4934 <__aeabi_ddiv+0x664>)
    4926:	e5a1      	b.n	446c <__aeabi_ddiv+0x19c>
    4928:	000003ff 	.word	0x000003ff
    492c:	feffffff 	.word	0xfeffffff
    4930:	000007fe 	.word	0x000007fe
    4934:	000007ff 	.word	0x000007ff

00004938 <__aeabi_dmul>:
    4938:	b5f0      	push	{r4, r5, r6, r7, lr}
    493a:	4657      	mov	r7, sl
    493c:	4645      	mov	r5, r8
    493e:	46de      	mov	lr, fp
    4940:	464e      	mov	r6, r9
    4942:	b5e0      	push	{r5, r6, r7, lr}
    4944:	030c      	lsls	r4, r1, #12
    4946:	4698      	mov	r8, r3
    4948:	004e      	lsls	r6, r1, #1
    494a:	0b23      	lsrs	r3, r4, #12
    494c:	b087      	sub	sp, #28
    494e:	0007      	movs	r7, r0
    4950:	4692      	mov	sl, r2
    4952:	469b      	mov	fp, r3
    4954:	0d76      	lsrs	r6, r6, #21
    4956:	0fcd      	lsrs	r5, r1, #31
    4958:	2e00      	cmp	r6, #0
    495a:	d06b      	beq.n	4a34 <__aeabi_dmul+0xfc>
    495c:	4b6d      	ldr	r3, [pc, #436]	; (4b14 <__aeabi_dmul+0x1dc>)
    495e:	429e      	cmp	r6, r3
    4960:	d035      	beq.n	49ce <__aeabi_dmul+0x96>
    4962:	2480      	movs	r4, #128	; 0x80
    4964:	465b      	mov	r3, fp
    4966:	0f42      	lsrs	r2, r0, #29
    4968:	0424      	lsls	r4, r4, #16
    496a:	00db      	lsls	r3, r3, #3
    496c:	4314      	orrs	r4, r2
    496e:	431c      	orrs	r4, r3
    4970:	00c3      	lsls	r3, r0, #3
    4972:	4699      	mov	r9, r3
    4974:	4b68      	ldr	r3, [pc, #416]	; (4b18 <__aeabi_dmul+0x1e0>)
    4976:	46a3      	mov	fp, r4
    4978:	469c      	mov	ip, r3
    497a:	2300      	movs	r3, #0
    497c:	2700      	movs	r7, #0
    497e:	4466      	add	r6, ip
    4980:	9302      	str	r3, [sp, #8]
    4982:	4643      	mov	r3, r8
    4984:	031c      	lsls	r4, r3, #12
    4986:	005a      	lsls	r2, r3, #1
    4988:	0fdb      	lsrs	r3, r3, #31
    498a:	4650      	mov	r0, sl
    498c:	0b24      	lsrs	r4, r4, #12
    498e:	0d52      	lsrs	r2, r2, #21
    4990:	4698      	mov	r8, r3
    4992:	d100      	bne.n	4996 <__aeabi_dmul+0x5e>
    4994:	e076      	b.n	4a84 <__aeabi_dmul+0x14c>
    4996:	4b5f      	ldr	r3, [pc, #380]	; (4b14 <__aeabi_dmul+0x1dc>)
    4998:	429a      	cmp	r2, r3
    499a:	d06d      	beq.n	4a78 <__aeabi_dmul+0x140>
    499c:	2380      	movs	r3, #128	; 0x80
    499e:	0f41      	lsrs	r1, r0, #29
    49a0:	041b      	lsls	r3, r3, #16
    49a2:	430b      	orrs	r3, r1
    49a4:	495c      	ldr	r1, [pc, #368]	; (4b18 <__aeabi_dmul+0x1e0>)
    49a6:	00e4      	lsls	r4, r4, #3
    49a8:	468c      	mov	ip, r1
    49aa:	431c      	orrs	r4, r3
    49ac:	00c3      	lsls	r3, r0, #3
    49ae:	2000      	movs	r0, #0
    49b0:	4462      	add	r2, ip
    49b2:	4641      	mov	r1, r8
    49b4:	18b6      	adds	r6, r6, r2
    49b6:	4069      	eors	r1, r5
    49b8:	1c72      	adds	r2, r6, #1
    49ba:	9101      	str	r1, [sp, #4]
    49bc:	4694      	mov	ip, r2
    49be:	4307      	orrs	r7, r0
    49c0:	2f0f      	cmp	r7, #15
    49c2:	d900      	bls.n	49c6 <__aeabi_dmul+0x8e>
    49c4:	e0b0      	b.n	4b28 <__aeabi_dmul+0x1f0>
    49c6:	4a55      	ldr	r2, [pc, #340]	; (4b1c <__aeabi_dmul+0x1e4>)
    49c8:	00bf      	lsls	r7, r7, #2
    49ca:	59d2      	ldr	r2, [r2, r7]
    49cc:	4697      	mov	pc, r2
    49ce:	465b      	mov	r3, fp
    49d0:	4303      	orrs	r3, r0
    49d2:	4699      	mov	r9, r3
    49d4:	d000      	beq.n	49d8 <__aeabi_dmul+0xa0>
    49d6:	e087      	b.n	4ae8 <__aeabi_dmul+0x1b0>
    49d8:	2300      	movs	r3, #0
    49da:	469b      	mov	fp, r3
    49dc:	3302      	adds	r3, #2
    49de:	2708      	movs	r7, #8
    49e0:	9302      	str	r3, [sp, #8]
    49e2:	e7ce      	b.n	4982 <__aeabi_dmul+0x4a>
    49e4:	4642      	mov	r2, r8
    49e6:	9201      	str	r2, [sp, #4]
    49e8:	2802      	cmp	r0, #2
    49ea:	d067      	beq.n	4abc <__aeabi_dmul+0x184>
    49ec:	2803      	cmp	r0, #3
    49ee:	d100      	bne.n	49f2 <__aeabi_dmul+0xba>
    49f0:	e20e      	b.n	4e10 <__aeabi_dmul+0x4d8>
    49f2:	2801      	cmp	r0, #1
    49f4:	d000      	beq.n	49f8 <__aeabi_dmul+0xc0>
    49f6:	e162      	b.n	4cbe <__aeabi_dmul+0x386>
    49f8:	2300      	movs	r3, #0
    49fa:	2400      	movs	r4, #0
    49fc:	2200      	movs	r2, #0
    49fe:	4699      	mov	r9, r3
    4a00:	9901      	ldr	r1, [sp, #4]
    4a02:	4001      	ands	r1, r0
    4a04:	b2cd      	uxtb	r5, r1
    4a06:	2100      	movs	r1, #0
    4a08:	0312      	lsls	r2, r2, #12
    4a0a:	0d0b      	lsrs	r3, r1, #20
    4a0c:	0b12      	lsrs	r2, r2, #12
    4a0e:	051b      	lsls	r3, r3, #20
    4a10:	4313      	orrs	r3, r2
    4a12:	4a43      	ldr	r2, [pc, #268]	; (4b20 <__aeabi_dmul+0x1e8>)
    4a14:	0524      	lsls	r4, r4, #20
    4a16:	4013      	ands	r3, r2
    4a18:	431c      	orrs	r4, r3
    4a1a:	0064      	lsls	r4, r4, #1
    4a1c:	07ed      	lsls	r5, r5, #31
    4a1e:	0864      	lsrs	r4, r4, #1
    4a20:	432c      	orrs	r4, r5
    4a22:	4648      	mov	r0, r9
    4a24:	0021      	movs	r1, r4
    4a26:	b007      	add	sp, #28
    4a28:	bc3c      	pop	{r2, r3, r4, r5}
    4a2a:	4690      	mov	r8, r2
    4a2c:	4699      	mov	r9, r3
    4a2e:	46a2      	mov	sl, r4
    4a30:	46ab      	mov	fp, r5
    4a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a34:	4303      	orrs	r3, r0
    4a36:	4699      	mov	r9, r3
    4a38:	d04f      	beq.n	4ada <__aeabi_dmul+0x1a2>
    4a3a:	465b      	mov	r3, fp
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d100      	bne.n	4a42 <__aeabi_dmul+0x10a>
    4a40:	e189      	b.n	4d56 <__aeabi_dmul+0x41e>
    4a42:	4658      	mov	r0, fp
    4a44:	f000 fe9e 	bl	5784 <__clzsi2>
    4a48:	0003      	movs	r3, r0
    4a4a:	3b0b      	subs	r3, #11
    4a4c:	2b1c      	cmp	r3, #28
    4a4e:	dd00      	ble.n	4a52 <__aeabi_dmul+0x11a>
    4a50:	e17a      	b.n	4d48 <__aeabi_dmul+0x410>
    4a52:	221d      	movs	r2, #29
    4a54:	1ad3      	subs	r3, r2, r3
    4a56:	003a      	movs	r2, r7
    4a58:	0001      	movs	r1, r0
    4a5a:	465c      	mov	r4, fp
    4a5c:	40da      	lsrs	r2, r3
    4a5e:	3908      	subs	r1, #8
    4a60:	408c      	lsls	r4, r1
    4a62:	0013      	movs	r3, r2
    4a64:	408f      	lsls	r7, r1
    4a66:	4323      	orrs	r3, r4
    4a68:	469b      	mov	fp, r3
    4a6a:	46b9      	mov	r9, r7
    4a6c:	2300      	movs	r3, #0
    4a6e:	4e2d      	ldr	r6, [pc, #180]	; (4b24 <__aeabi_dmul+0x1ec>)
    4a70:	2700      	movs	r7, #0
    4a72:	1a36      	subs	r6, r6, r0
    4a74:	9302      	str	r3, [sp, #8]
    4a76:	e784      	b.n	4982 <__aeabi_dmul+0x4a>
    4a78:	4653      	mov	r3, sl
    4a7a:	4323      	orrs	r3, r4
    4a7c:	d12a      	bne.n	4ad4 <__aeabi_dmul+0x19c>
    4a7e:	2400      	movs	r4, #0
    4a80:	2002      	movs	r0, #2
    4a82:	e796      	b.n	49b2 <__aeabi_dmul+0x7a>
    4a84:	4653      	mov	r3, sl
    4a86:	4323      	orrs	r3, r4
    4a88:	d020      	beq.n	4acc <__aeabi_dmul+0x194>
    4a8a:	2c00      	cmp	r4, #0
    4a8c:	d100      	bne.n	4a90 <__aeabi_dmul+0x158>
    4a8e:	e157      	b.n	4d40 <__aeabi_dmul+0x408>
    4a90:	0020      	movs	r0, r4
    4a92:	f000 fe77 	bl	5784 <__clzsi2>
    4a96:	0003      	movs	r3, r0
    4a98:	3b0b      	subs	r3, #11
    4a9a:	2b1c      	cmp	r3, #28
    4a9c:	dd00      	ble.n	4aa0 <__aeabi_dmul+0x168>
    4a9e:	e149      	b.n	4d34 <__aeabi_dmul+0x3fc>
    4aa0:	211d      	movs	r1, #29
    4aa2:	1acb      	subs	r3, r1, r3
    4aa4:	4651      	mov	r1, sl
    4aa6:	0002      	movs	r2, r0
    4aa8:	40d9      	lsrs	r1, r3
    4aaa:	4653      	mov	r3, sl
    4aac:	3a08      	subs	r2, #8
    4aae:	4094      	lsls	r4, r2
    4ab0:	4093      	lsls	r3, r2
    4ab2:	430c      	orrs	r4, r1
    4ab4:	4a1b      	ldr	r2, [pc, #108]	; (4b24 <__aeabi_dmul+0x1ec>)
    4ab6:	1a12      	subs	r2, r2, r0
    4ab8:	2000      	movs	r0, #0
    4aba:	e77a      	b.n	49b2 <__aeabi_dmul+0x7a>
    4abc:	2501      	movs	r5, #1
    4abe:	9b01      	ldr	r3, [sp, #4]
    4ac0:	4c14      	ldr	r4, [pc, #80]	; (4b14 <__aeabi_dmul+0x1dc>)
    4ac2:	401d      	ands	r5, r3
    4ac4:	2300      	movs	r3, #0
    4ac6:	2200      	movs	r2, #0
    4ac8:	4699      	mov	r9, r3
    4aca:	e79c      	b.n	4a06 <__aeabi_dmul+0xce>
    4acc:	2400      	movs	r4, #0
    4ace:	2200      	movs	r2, #0
    4ad0:	2001      	movs	r0, #1
    4ad2:	e76e      	b.n	49b2 <__aeabi_dmul+0x7a>
    4ad4:	4653      	mov	r3, sl
    4ad6:	2003      	movs	r0, #3
    4ad8:	e76b      	b.n	49b2 <__aeabi_dmul+0x7a>
    4ada:	2300      	movs	r3, #0
    4adc:	469b      	mov	fp, r3
    4ade:	3301      	adds	r3, #1
    4ae0:	2704      	movs	r7, #4
    4ae2:	2600      	movs	r6, #0
    4ae4:	9302      	str	r3, [sp, #8]
    4ae6:	e74c      	b.n	4982 <__aeabi_dmul+0x4a>
    4ae8:	2303      	movs	r3, #3
    4aea:	4681      	mov	r9, r0
    4aec:	270c      	movs	r7, #12
    4aee:	9302      	str	r3, [sp, #8]
    4af0:	e747      	b.n	4982 <__aeabi_dmul+0x4a>
    4af2:	2280      	movs	r2, #128	; 0x80
    4af4:	2300      	movs	r3, #0
    4af6:	2500      	movs	r5, #0
    4af8:	0312      	lsls	r2, r2, #12
    4afa:	4699      	mov	r9, r3
    4afc:	4c05      	ldr	r4, [pc, #20]	; (4b14 <__aeabi_dmul+0x1dc>)
    4afe:	e782      	b.n	4a06 <__aeabi_dmul+0xce>
    4b00:	465c      	mov	r4, fp
    4b02:	464b      	mov	r3, r9
    4b04:	9802      	ldr	r0, [sp, #8]
    4b06:	e76f      	b.n	49e8 <__aeabi_dmul+0xb0>
    4b08:	465c      	mov	r4, fp
    4b0a:	464b      	mov	r3, r9
    4b0c:	9501      	str	r5, [sp, #4]
    4b0e:	9802      	ldr	r0, [sp, #8]
    4b10:	e76a      	b.n	49e8 <__aeabi_dmul+0xb0>
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	000007ff 	.word	0x000007ff
    4b18:	fffffc01 	.word	0xfffffc01
    4b1c:	00007e84 	.word	0x00007e84
    4b20:	800fffff 	.word	0x800fffff
    4b24:	fffffc0d 	.word	0xfffffc0d
    4b28:	464a      	mov	r2, r9
    4b2a:	4649      	mov	r1, r9
    4b2c:	0c17      	lsrs	r7, r2, #16
    4b2e:	0c1a      	lsrs	r2, r3, #16
    4b30:	041b      	lsls	r3, r3, #16
    4b32:	0c1b      	lsrs	r3, r3, #16
    4b34:	0408      	lsls	r0, r1, #16
    4b36:	0019      	movs	r1, r3
    4b38:	0c00      	lsrs	r0, r0, #16
    4b3a:	4341      	muls	r1, r0
    4b3c:	0015      	movs	r5, r2
    4b3e:	4688      	mov	r8, r1
    4b40:	0019      	movs	r1, r3
    4b42:	437d      	muls	r5, r7
    4b44:	4379      	muls	r1, r7
    4b46:	9503      	str	r5, [sp, #12]
    4b48:	4689      	mov	r9, r1
    4b4a:	0029      	movs	r1, r5
    4b4c:	0015      	movs	r5, r2
    4b4e:	4345      	muls	r5, r0
    4b50:	444d      	add	r5, r9
    4b52:	9502      	str	r5, [sp, #8]
    4b54:	4645      	mov	r5, r8
    4b56:	0c2d      	lsrs	r5, r5, #16
    4b58:	46aa      	mov	sl, r5
    4b5a:	9d02      	ldr	r5, [sp, #8]
    4b5c:	4455      	add	r5, sl
    4b5e:	45a9      	cmp	r9, r5
    4b60:	d906      	bls.n	4b70 <__aeabi_dmul+0x238>
    4b62:	468a      	mov	sl, r1
    4b64:	2180      	movs	r1, #128	; 0x80
    4b66:	0249      	lsls	r1, r1, #9
    4b68:	4689      	mov	r9, r1
    4b6a:	44ca      	add	sl, r9
    4b6c:	4651      	mov	r1, sl
    4b6e:	9103      	str	r1, [sp, #12]
    4b70:	0c29      	lsrs	r1, r5, #16
    4b72:	9104      	str	r1, [sp, #16]
    4b74:	4641      	mov	r1, r8
    4b76:	0409      	lsls	r1, r1, #16
    4b78:	042d      	lsls	r5, r5, #16
    4b7a:	0c09      	lsrs	r1, r1, #16
    4b7c:	4688      	mov	r8, r1
    4b7e:	0029      	movs	r1, r5
    4b80:	0c25      	lsrs	r5, r4, #16
    4b82:	0424      	lsls	r4, r4, #16
    4b84:	4441      	add	r1, r8
    4b86:	0c24      	lsrs	r4, r4, #16
    4b88:	9105      	str	r1, [sp, #20]
    4b8a:	0021      	movs	r1, r4
    4b8c:	4341      	muls	r1, r0
    4b8e:	4688      	mov	r8, r1
    4b90:	0021      	movs	r1, r4
    4b92:	4379      	muls	r1, r7
    4b94:	468a      	mov	sl, r1
    4b96:	4368      	muls	r0, r5
    4b98:	4641      	mov	r1, r8
    4b9a:	4450      	add	r0, sl
    4b9c:	4681      	mov	r9, r0
    4b9e:	0c08      	lsrs	r0, r1, #16
    4ba0:	4448      	add	r0, r9
    4ba2:	436f      	muls	r7, r5
    4ba4:	4582      	cmp	sl, r0
    4ba6:	d903      	bls.n	4bb0 <__aeabi_dmul+0x278>
    4ba8:	2180      	movs	r1, #128	; 0x80
    4baa:	0249      	lsls	r1, r1, #9
    4bac:	4689      	mov	r9, r1
    4bae:	444f      	add	r7, r9
    4bb0:	0c01      	lsrs	r1, r0, #16
    4bb2:	4689      	mov	r9, r1
    4bb4:	0039      	movs	r1, r7
    4bb6:	4449      	add	r1, r9
    4bb8:	9102      	str	r1, [sp, #8]
    4bba:	4641      	mov	r1, r8
    4bbc:	040f      	lsls	r7, r1, #16
    4bbe:	9904      	ldr	r1, [sp, #16]
    4bc0:	0c3f      	lsrs	r7, r7, #16
    4bc2:	4688      	mov	r8, r1
    4bc4:	0400      	lsls	r0, r0, #16
    4bc6:	19c0      	adds	r0, r0, r7
    4bc8:	4480      	add	r8, r0
    4bca:	4641      	mov	r1, r8
    4bcc:	9104      	str	r1, [sp, #16]
    4bce:	4659      	mov	r1, fp
    4bd0:	0c0f      	lsrs	r7, r1, #16
    4bd2:	0409      	lsls	r1, r1, #16
    4bd4:	0c09      	lsrs	r1, r1, #16
    4bd6:	4688      	mov	r8, r1
    4bd8:	4359      	muls	r1, r3
    4bda:	468a      	mov	sl, r1
    4bdc:	0039      	movs	r1, r7
    4bde:	4351      	muls	r1, r2
    4be0:	4689      	mov	r9, r1
    4be2:	4641      	mov	r1, r8
    4be4:	434a      	muls	r2, r1
    4be6:	4651      	mov	r1, sl
    4be8:	0c09      	lsrs	r1, r1, #16
    4bea:	468b      	mov	fp, r1
    4bec:	437b      	muls	r3, r7
    4bee:	18d2      	adds	r2, r2, r3
    4bf0:	445a      	add	r2, fp
    4bf2:	4293      	cmp	r3, r2
    4bf4:	d903      	bls.n	4bfe <__aeabi_dmul+0x2c6>
    4bf6:	2380      	movs	r3, #128	; 0x80
    4bf8:	025b      	lsls	r3, r3, #9
    4bfa:	469b      	mov	fp, r3
    4bfc:	44d9      	add	r9, fp
    4bfe:	4651      	mov	r1, sl
    4c00:	0409      	lsls	r1, r1, #16
    4c02:	0c09      	lsrs	r1, r1, #16
    4c04:	468a      	mov	sl, r1
    4c06:	4641      	mov	r1, r8
    4c08:	4361      	muls	r1, r4
    4c0a:	437c      	muls	r4, r7
    4c0c:	0c13      	lsrs	r3, r2, #16
    4c0e:	0412      	lsls	r2, r2, #16
    4c10:	444b      	add	r3, r9
    4c12:	4452      	add	r2, sl
    4c14:	46a1      	mov	r9, r4
    4c16:	468a      	mov	sl, r1
    4c18:	003c      	movs	r4, r7
    4c1a:	4641      	mov	r1, r8
    4c1c:	436c      	muls	r4, r5
    4c1e:	434d      	muls	r5, r1
    4c20:	4651      	mov	r1, sl
    4c22:	444d      	add	r5, r9
    4c24:	0c0f      	lsrs	r7, r1, #16
    4c26:	197d      	adds	r5, r7, r5
    4c28:	45a9      	cmp	r9, r5
    4c2a:	d903      	bls.n	4c34 <__aeabi_dmul+0x2fc>
    4c2c:	2180      	movs	r1, #128	; 0x80
    4c2e:	0249      	lsls	r1, r1, #9
    4c30:	4688      	mov	r8, r1
    4c32:	4444      	add	r4, r8
    4c34:	9f04      	ldr	r7, [sp, #16]
    4c36:	9903      	ldr	r1, [sp, #12]
    4c38:	46b8      	mov	r8, r7
    4c3a:	4441      	add	r1, r8
    4c3c:	468b      	mov	fp, r1
    4c3e:	4583      	cmp	fp, r0
    4c40:	4180      	sbcs	r0, r0
    4c42:	4241      	negs	r1, r0
    4c44:	4688      	mov	r8, r1
    4c46:	4651      	mov	r1, sl
    4c48:	0408      	lsls	r0, r1, #16
    4c4a:	042f      	lsls	r7, r5, #16
    4c4c:	0c00      	lsrs	r0, r0, #16
    4c4e:	183f      	adds	r7, r7, r0
    4c50:	4658      	mov	r0, fp
    4c52:	9902      	ldr	r1, [sp, #8]
    4c54:	1810      	adds	r0, r2, r0
    4c56:	4689      	mov	r9, r1
    4c58:	4290      	cmp	r0, r2
    4c5a:	4192      	sbcs	r2, r2
    4c5c:	444f      	add	r7, r9
    4c5e:	46ba      	mov	sl, r7
    4c60:	4252      	negs	r2, r2
    4c62:	4699      	mov	r9, r3
    4c64:	4693      	mov	fp, r2
    4c66:	44c2      	add	sl, r8
    4c68:	44d1      	add	r9, sl
    4c6a:	44cb      	add	fp, r9
    4c6c:	428f      	cmp	r7, r1
    4c6e:	41bf      	sbcs	r7, r7
    4c70:	45c2      	cmp	sl, r8
    4c72:	4189      	sbcs	r1, r1
    4c74:	4599      	cmp	r9, r3
    4c76:	419b      	sbcs	r3, r3
    4c78:	4593      	cmp	fp, r2
    4c7a:	4192      	sbcs	r2, r2
    4c7c:	427f      	negs	r7, r7
    4c7e:	4249      	negs	r1, r1
    4c80:	0c2d      	lsrs	r5, r5, #16
    4c82:	4252      	negs	r2, r2
    4c84:	430f      	orrs	r7, r1
    4c86:	425b      	negs	r3, r3
    4c88:	4313      	orrs	r3, r2
    4c8a:	197f      	adds	r7, r7, r5
    4c8c:	18ff      	adds	r7, r7, r3
    4c8e:	465b      	mov	r3, fp
    4c90:	193c      	adds	r4, r7, r4
    4c92:	0ddb      	lsrs	r3, r3, #23
    4c94:	9a05      	ldr	r2, [sp, #20]
    4c96:	0264      	lsls	r4, r4, #9
    4c98:	431c      	orrs	r4, r3
    4c9a:	0243      	lsls	r3, r0, #9
    4c9c:	4313      	orrs	r3, r2
    4c9e:	1e5d      	subs	r5, r3, #1
    4ca0:	41ab      	sbcs	r3, r5
    4ca2:	465a      	mov	r2, fp
    4ca4:	0dc0      	lsrs	r0, r0, #23
    4ca6:	4303      	orrs	r3, r0
    4ca8:	0252      	lsls	r2, r2, #9
    4caa:	4313      	orrs	r3, r2
    4cac:	01e2      	lsls	r2, r4, #7
    4cae:	d556      	bpl.n	4d5e <__aeabi_dmul+0x426>
    4cb0:	2001      	movs	r0, #1
    4cb2:	085a      	lsrs	r2, r3, #1
    4cb4:	4003      	ands	r3, r0
    4cb6:	4313      	orrs	r3, r2
    4cb8:	07e2      	lsls	r2, r4, #31
    4cba:	4313      	orrs	r3, r2
    4cbc:	0864      	lsrs	r4, r4, #1
    4cbe:	485a      	ldr	r0, [pc, #360]	; (4e28 <__aeabi_dmul+0x4f0>)
    4cc0:	4460      	add	r0, ip
    4cc2:	2800      	cmp	r0, #0
    4cc4:	dd4d      	ble.n	4d62 <__aeabi_dmul+0x42a>
    4cc6:	075a      	lsls	r2, r3, #29
    4cc8:	d009      	beq.n	4cde <__aeabi_dmul+0x3a6>
    4cca:	220f      	movs	r2, #15
    4ccc:	401a      	ands	r2, r3
    4cce:	2a04      	cmp	r2, #4
    4cd0:	d005      	beq.n	4cde <__aeabi_dmul+0x3a6>
    4cd2:	1d1a      	adds	r2, r3, #4
    4cd4:	429a      	cmp	r2, r3
    4cd6:	419b      	sbcs	r3, r3
    4cd8:	425b      	negs	r3, r3
    4cda:	18e4      	adds	r4, r4, r3
    4cdc:	0013      	movs	r3, r2
    4cde:	01e2      	lsls	r2, r4, #7
    4ce0:	d504      	bpl.n	4cec <__aeabi_dmul+0x3b4>
    4ce2:	2080      	movs	r0, #128	; 0x80
    4ce4:	4a51      	ldr	r2, [pc, #324]	; (4e2c <__aeabi_dmul+0x4f4>)
    4ce6:	00c0      	lsls	r0, r0, #3
    4ce8:	4014      	ands	r4, r2
    4cea:	4460      	add	r0, ip
    4cec:	4a50      	ldr	r2, [pc, #320]	; (4e30 <__aeabi_dmul+0x4f8>)
    4cee:	4290      	cmp	r0, r2
    4cf0:	dd00      	ble.n	4cf4 <__aeabi_dmul+0x3bc>
    4cf2:	e6e3      	b.n	4abc <__aeabi_dmul+0x184>
    4cf4:	2501      	movs	r5, #1
    4cf6:	08db      	lsrs	r3, r3, #3
    4cf8:	0762      	lsls	r2, r4, #29
    4cfa:	431a      	orrs	r2, r3
    4cfc:	0264      	lsls	r4, r4, #9
    4cfe:	9b01      	ldr	r3, [sp, #4]
    4d00:	4691      	mov	r9, r2
    4d02:	0b22      	lsrs	r2, r4, #12
    4d04:	0544      	lsls	r4, r0, #21
    4d06:	0d64      	lsrs	r4, r4, #21
    4d08:	401d      	ands	r5, r3
    4d0a:	e67c      	b.n	4a06 <__aeabi_dmul+0xce>
    4d0c:	2280      	movs	r2, #128	; 0x80
    4d0e:	4659      	mov	r1, fp
    4d10:	0312      	lsls	r2, r2, #12
    4d12:	4211      	tst	r1, r2
    4d14:	d008      	beq.n	4d28 <__aeabi_dmul+0x3f0>
    4d16:	4214      	tst	r4, r2
    4d18:	d106      	bne.n	4d28 <__aeabi_dmul+0x3f0>
    4d1a:	4322      	orrs	r2, r4
    4d1c:	0312      	lsls	r2, r2, #12
    4d1e:	0b12      	lsrs	r2, r2, #12
    4d20:	4645      	mov	r5, r8
    4d22:	4699      	mov	r9, r3
    4d24:	4c43      	ldr	r4, [pc, #268]	; (4e34 <__aeabi_dmul+0x4fc>)
    4d26:	e66e      	b.n	4a06 <__aeabi_dmul+0xce>
    4d28:	465b      	mov	r3, fp
    4d2a:	431a      	orrs	r2, r3
    4d2c:	0312      	lsls	r2, r2, #12
    4d2e:	0b12      	lsrs	r2, r2, #12
    4d30:	4c40      	ldr	r4, [pc, #256]	; (4e34 <__aeabi_dmul+0x4fc>)
    4d32:	e668      	b.n	4a06 <__aeabi_dmul+0xce>
    4d34:	0003      	movs	r3, r0
    4d36:	4654      	mov	r4, sl
    4d38:	3b28      	subs	r3, #40	; 0x28
    4d3a:	409c      	lsls	r4, r3
    4d3c:	2300      	movs	r3, #0
    4d3e:	e6b9      	b.n	4ab4 <__aeabi_dmul+0x17c>
    4d40:	f000 fd20 	bl	5784 <__clzsi2>
    4d44:	3020      	adds	r0, #32
    4d46:	e6a6      	b.n	4a96 <__aeabi_dmul+0x15e>
    4d48:	0003      	movs	r3, r0
    4d4a:	3b28      	subs	r3, #40	; 0x28
    4d4c:	409f      	lsls	r7, r3
    4d4e:	2300      	movs	r3, #0
    4d50:	46bb      	mov	fp, r7
    4d52:	4699      	mov	r9, r3
    4d54:	e68a      	b.n	4a6c <__aeabi_dmul+0x134>
    4d56:	f000 fd15 	bl	5784 <__clzsi2>
    4d5a:	3020      	adds	r0, #32
    4d5c:	e674      	b.n	4a48 <__aeabi_dmul+0x110>
    4d5e:	46b4      	mov	ip, r6
    4d60:	e7ad      	b.n	4cbe <__aeabi_dmul+0x386>
    4d62:	2501      	movs	r5, #1
    4d64:	1a2a      	subs	r2, r5, r0
    4d66:	2a38      	cmp	r2, #56	; 0x38
    4d68:	dd06      	ble.n	4d78 <__aeabi_dmul+0x440>
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	2400      	movs	r4, #0
    4d6e:	401d      	ands	r5, r3
    4d70:	2300      	movs	r3, #0
    4d72:	2200      	movs	r2, #0
    4d74:	4699      	mov	r9, r3
    4d76:	e646      	b.n	4a06 <__aeabi_dmul+0xce>
    4d78:	2a1f      	cmp	r2, #31
    4d7a:	dc21      	bgt.n	4dc0 <__aeabi_dmul+0x488>
    4d7c:	2520      	movs	r5, #32
    4d7e:	0020      	movs	r0, r4
    4d80:	1aad      	subs	r5, r5, r2
    4d82:	001e      	movs	r6, r3
    4d84:	40ab      	lsls	r3, r5
    4d86:	40a8      	lsls	r0, r5
    4d88:	40d6      	lsrs	r6, r2
    4d8a:	1e5d      	subs	r5, r3, #1
    4d8c:	41ab      	sbcs	r3, r5
    4d8e:	4330      	orrs	r0, r6
    4d90:	4318      	orrs	r0, r3
    4d92:	40d4      	lsrs	r4, r2
    4d94:	0743      	lsls	r3, r0, #29
    4d96:	d009      	beq.n	4dac <__aeabi_dmul+0x474>
    4d98:	230f      	movs	r3, #15
    4d9a:	4003      	ands	r3, r0
    4d9c:	2b04      	cmp	r3, #4
    4d9e:	d005      	beq.n	4dac <__aeabi_dmul+0x474>
    4da0:	0003      	movs	r3, r0
    4da2:	1d18      	adds	r0, r3, #4
    4da4:	4298      	cmp	r0, r3
    4da6:	419b      	sbcs	r3, r3
    4da8:	425b      	negs	r3, r3
    4daa:	18e4      	adds	r4, r4, r3
    4dac:	0223      	lsls	r3, r4, #8
    4dae:	d521      	bpl.n	4df4 <__aeabi_dmul+0x4bc>
    4db0:	2501      	movs	r5, #1
    4db2:	9b01      	ldr	r3, [sp, #4]
    4db4:	2401      	movs	r4, #1
    4db6:	401d      	ands	r5, r3
    4db8:	2300      	movs	r3, #0
    4dba:	2200      	movs	r2, #0
    4dbc:	4699      	mov	r9, r3
    4dbe:	e622      	b.n	4a06 <__aeabi_dmul+0xce>
    4dc0:	251f      	movs	r5, #31
    4dc2:	0021      	movs	r1, r4
    4dc4:	426d      	negs	r5, r5
    4dc6:	1a28      	subs	r0, r5, r0
    4dc8:	40c1      	lsrs	r1, r0
    4dca:	0008      	movs	r0, r1
    4dcc:	2a20      	cmp	r2, #32
    4dce:	d01d      	beq.n	4e0c <__aeabi_dmul+0x4d4>
    4dd0:	355f      	adds	r5, #95	; 0x5f
    4dd2:	1aaa      	subs	r2, r5, r2
    4dd4:	4094      	lsls	r4, r2
    4dd6:	4323      	orrs	r3, r4
    4dd8:	1e5c      	subs	r4, r3, #1
    4dda:	41a3      	sbcs	r3, r4
    4ddc:	2507      	movs	r5, #7
    4dde:	4303      	orrs	r3, r0
    4de0:	401d      	ands	r5, r3
    4de2:	2200      	movs	r2, #0
    4de4:	2d00      	cmp	r5, #0
    4de6:	d009      	beq.n	4dfc <__aeabi_dmul+0x4c4>
    4de8:	220f      	movs	r2, #15
    4dea:	2400      	movs	r4, #0
    4dec:	401a      	ands	r2, r3
    4dee:	0018      	movs	r0, r3
    4df0:	2a04      	cmp	r2, #4
    4df2:	d1d6      	bne.n	4da2 <__aeabi_dmul+0x46a>
    4df4:	0003      	movs	r3, r0
    4df6:	0765      	lsls	r5, r4, #29
    4df8:	0264      	lsls	r4, r4, #9
    4dfa:	0b22      	lsrs	r2, r4, #12
    4dfc:	08db      	lsrs	r3, r3, #3
    4dfe:	432b      	orrs	r3, r5
    4e00:	2501      	movs	r5, #1
    4e02:	4699      	mov	r9, r3
    4e04:	9b01      	ldr	r3, [sp, #4]
    4e06:	2400      	movs	r4, #0
    4e08:	401d      	ands	r5, r3
    4e0a:	e5fc      	b.n	4a06 <__aeabi_dmul+0xce>
    4e0c:	2400      	movs	r4, #0
    4e0e:	e7e2      	b.n	4dd6 <__aeabi_dmul+0x49e>
    4e10:	2280      	movs	r2, #128	; 0x80
    4e12:	2501      	movs	r5, #1
    4e14:	0312      	lsls	r2, r2, #12
    4e16:	4322      	orrs	r2, r4
    4e18:	9901      	ldr	r1, [sp, #4]
    4e1a:	0312      	lsls	r2, r2, #12
    4e1c:	0b12      	lsrs	r2, r2, #12
    4e1e:	400d      	ands	r5, r1
    4e20:	4699      	mov	r9, r3
    4e22:	4c04      	ldr	r4, [pc, #16]	; (4e34 <__aeabi_dmul+0x4fc>)
    4e24:	e5ef      	b.n	4a06 <__aeabi_dmul+0xce>
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	000003ff 	.word	0x000003ff
    4e2c:	feffffff 	.word	0xfeffffff
    4e30:	000007fe 	.word	0x000007fe
    4e34:	000007ff 	.word	0x000007ff

00004e38 <__aeabi_dsub>:
    4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3a:	4646      	mov	r6, r8
    4e3c:	46d6      	mov	lr, sl
    4e3e:	464f      	mov	r7, r9
    4e40:	030c      	lsls	r4, r1, #12
    4e42:	b5c0      	push	{r6, r7, lr}
    4e44:	0fcd      	lsrs	r5, r1, #31
    4e46:	004e      	lsls	r6, r1, #1
    4e48:	0a61      	lsrs	r1, r4, #9
    4e4a:	0f44      	lsrs	r4, r0, #29
    4e4c:	430c      	orrs	r4, r1
    4e4e:	00c1      	lsls	r1, r0, #3
    4e50:	0058      	lsls	r0, r3, #1
    4e52:	0d40      	lsrs	r0, r0, #21
    4e54:	4684      	mov	ip, r0
    4e56:	468a      	mov	sl, r1
    4e58:	000f      	movs	r7, r1
    4e5a:	0319      	lsls	r1, r3, #12
    4e5c:	0f50      	lsrs	r0, r2, #29
    4e5e:	0a49      	lsrs	r1, r1, #9
    4e60:	4301      	orrs	r1, r0
    4e62:	48c6      	ldr	r0, [pc, #792]	; (517c <__aeabi_dsub+0x344>)
    4e64:	0d76      	lsrs	r6, r6, #21
    4e66:	46a8      	mov	r8, r5
    4e68:	0fdb      	lsrs	r3, r3, #31
    4e6a:	00d2      	lsls	r2, r2, #3
    4e6c:	4584      	cmp	ip, r0
    4e6e:	d100      	bne.n	4e72 <__aeabi_dsub+0x3a>
    4e70:	e0d8      	b.n	5024 <__aeabi_dsub+0x1ec>
    4e72:	2001      	movs	r0, #1
    4e74:	4043      	eors	r3, r0
    4e76:	42ab      	cmp	r3, r5
    4e78:	d100      	bne.n	4e7c <__aeabi_dsub+0x44>
    4e7a:	e0a6      	b.n	4fca <__aeabi_dsub+0x192>
    4e7c:	4660      	mov	r0, ip
    4e7e:	1a35      	subs	r5, r6, r0
    4e80:	2d00      	cmp	r5, #0
    4e82:	dc00      	bgt.n	4e86 <__aeabi_dsub+0x4e>
    4e84:	e105      	b.n	5092 <__aeabi_dsub+0x25a>
    4e86:	2800      	cmp	r0, #0
    4e88:	d110      	bne.n	4eac <__aeabi_dsub+0x74>
    4e8a:	000b      	movs	r3, r1
    4e8c:	4313      	orrs	r3, r2
    4e8e:	d100      	bne.n	4e92 <__aeabi_dsub+0x5a>
    4e90:	e0d7      	b.n	5042 <__aeabi_dsub+0x20a>
    4e92:	1e6b      	subs	r3, r5, #1
    4e94:	2b00      	cmp	r3, #0
    4e96:	d000      	beq.n	4e9a <__aeabi_dsub+0x62>
    4e98:	e14b      	b.n	5132 <__aeabi_dsub+0x2fa>
    4e9a:	4653      	mov	r3, sl
    4e9c:	1a9f      	subs	r7, r3, r2
    4e9e:	45ba      	cmp	sl, r7
    4ea0:	4180      	sbcs	r0, r0
    4ea2:	1a64      	subs	r4, r4, r1
    4ea4:	4240      	negs	r0, r0
    4ea6:	1a24      	subs	r4, r4, r0
    4ea8:	2601      	movs	r6, #1
    4eaa:	e01e      	b.n	4eea <__aeabi_dsub+0xb2>
    4eac:	4bb3      	ldr	r3, [pc, #716]	; (517c <__aeabi_dsub+0x344>)
    4eae:	429e      	cmp	r6, r3
    4eb0:	d048      	beq.n	4f44 <__aeabi_dsub+0x10c>
    4eb2:	2380      	movs	r3, #128	; 0x80
    4eb4:	041b      	lsls	r3, r3, #16
    4eb6:	4319      	orrs	r1, r3
    4eb8:	2d38      	cmp	r5, #56	; 0x38
    4eba:	dd00      	ble.n	4ebe <__aeabi_dsub+0x86>
    4ebc:	e119      	b.n	50f2 <__aeabi_dsub+0x2ba>
    4ebe:	2d1f      	cmp	r5, #31
    4ec0:	dd00      	ble.n	4ec4 <__aeabi_dsub+0x8c>
    4ec2:	e14c      	b.n	515e <__aeabi_dsub+0x326>
    4ec4:	2320      	movs	r3, #32
    4ec6:	000f      	movs	r7, r1
    4ec8:	1b5b      	subs	r3, r3, r5
    4eca:	0010      	movs	r0, r2
    4ecc:	409a      	lsls	r2, r3
    4ece:	409f      	lsls	r7, r3
    4ed0:	40e8      	lsrs	r0, r5
    4ed2:	1e53      	subs	r3, r2, #1
    4ed4:	419a      	sbcs	r2, r3
    4ed6:	40e9      	lsrs	r1, r5
    4ed8:	4307      	orrs	r7, r0
    4eda:	4317      	orrs	r7, r2
    4edc:	4653      	mov	r3, sl
    4ede:	1bdf      	subs	r7, r3, r7
    4ee0:	1a61      	subs	r1, r4, r1
    4ee2:	45ba      	cmp	sl, r7
    4ee4:	41a4      	sbcs	r4, r4
    4ee6:	4264      	negs	r4, r4
    4ee8:	1b0c      	subs	r4, r1, r4
    4eea:	0223      	lsls	r3, r4, #8
    4eec:	d400      	bmi.n	4ef0 <__aeabi_dsub+0xb8>
    4eee:	e0c5      	b.n	507c <__aeabi_dsub+0x244>
    4ef0:	0264      	lsls	r4, r4, #9
    4ef2:	0a65      	lsrs	r5, r4, #9
    4ef4:	2d00      	cmp	r5, #0
    4ef6:	d100      	bne.n	4efa <__aeabi_dsub+0xc2>
    4ef8:	e0f6      	b.n	50e8 <__aeabi_dsub+0x2b0>
    4efa:	0028      	movs	r0, r5
    4efc:	f000 fc42 	bl	5784 <__clzsi2>
    4f00:	0003      	movs	r3, r0
    4f02:	3b08      	subs	r3, #8
    4f04:	2b1f      	cmp	r3, #31
    4f06:	dd00      	ble.n	4f0a <__aeabi_dsub+0xd2>
    4f08:	e0e9      	b.n	50de <__aeabi_dsub+0x2a6>
    4f0a:	2220      	movs	r2, #32
    4f0c:	003c      	movs	r4, r7
    4f0e:	1ad2      	subs	r2, r2, r3
    4f10:	409d      	lsls	r5, r3
    4f12:	40d4      	lsrs	r4, r2
    4f14:	409f      	lsls	r7, r3
    4f16:	4325      	orrs	r5, r4
    4f18:	429e      	cmp	r6, r3
    4f1a:	dd00      	ble.n	4f1e <__aeabi_dsub+0xe6>
    4f1c:	e0db      	b.n	50d6 <__aeabi_dsub+0x29e>
    4f1e:	1b9e      	subs	r6, r3, r6
    4f20:	1c73      	adds	r3, r6, #1
    4f22:	2b1f      	cmp	r3, #31
    4f24:	dd00      	ble.n	4f28 <__aeabi_dsub+0xf0>
    4f26:	e10a      	b.n	513e <__aeabi_dsub+0x306>
    4f28:	2220      	movs	r2, #32
    4f2a:	0038      	movs	r0, r7
    4f2c:	1ad2      	subs	r2, r2, r3
    4f2e:	0029      	movs	r1, r5
    4f30:	4097      	lsls	r7, r2
    4f32:	002c      	movs	r4, r5
    4f34:	4091      	lsls	r1, r2
    4f36:	40d8      	lsrs	r0, r3
    4f38:	1e7a      	subs	r2, r7, #1
    4f3a:	4197      	sbcs	r7, r2
    4f3c:	40dc      	lsrs	r4, r3
    4f3e:	2600      	movs	r6, #0
    4f40:	4301      	orrs	r1, r0
    4f42:	430f      	orrs	r7, r1
    4f44:	077b      	lsls	r3, r7, #29
    4f46:	d009      	beq.n	4f5c <__aeabi_dsub+0x124>
    4f48:	230f      	movs	r3, #15
    4f4a:	403b      	ands	r3, r7
    4f4c:	2b04      	cmp	r3, #4
    4f4e:	d005      	beq.n	4f5c <__aeabi_dsub+0x124>
    4f50:	1d3b      	adds	r3, r7, #4
    4f52:	42bb      	cmp	r3, r7
    4f54:	41bf      	sbcs	r7, r7
    4f56:	427f      	negs	r7, r7
    4f58:	19e4      	adds	r4, r4, r7
    4f5a:	001f      	movs	r7, r3
    4f5c:	0223      	lsls	r3, r4, #8
    4f5e:	d525      	bpl.n	4fac <__aeabi_dsub+0x174>
    4f60:	4b86      	ldr	r3, [pc, #536]	; (517c <__aeabi_dsub+0x344>)
    4f62:	3601      	adds	r6, #1
    4f64:	429e      	cmp	r6, r3
    4f66:	d100      	bne.n	4f6a <__aeabi_dsub+0x132>
    4f68:	e0af      	b.n	50ca <__aeabi_dsub+0x292>
    4f6a:	4b85      	ldr	r3, [pc, #532]	; (5180 <__aeabi_dsub+0x348>)
    4f6c:	2501      	movs	r5, #1
    4f6e:	401c      	ands	r4, r3
    4f70:	4643      	mov	r3, r8
    4f72:	0762      	lsls	r2, r4, #29
    4f74:	08ff      	lsrs	r7, r7, #3
    4f76:	0264      	lsls	r4, r4, #9
    4f78:	0576      	lsls	r6, r6, #21
    4f7a:	4317      	orrs	r7, r2
    4f7c:	0b24      	lsrs	r4, r4, #12
    4f7e:	0d76      	lsrs	r6, r6, #21
    4f80:	401d      	ands	r5, r3
    4f82:	2100      	movs	r1, #0
    4f84:	0324      	lsls	r4, r4, #12
    4f86:	0b23      	lsrs	r3, r4, #12
    4f88:	0d0c      	lsrs	r4, r1, #20
    4f8a:	4a7e      	ldr	r2, [pc, #504]	; (5184 <__aeabi_dsub+0x34c>)
    4f8c:	0524      	lsls	r4, r4, #20
    4f8e:	431c      	orrs	r4, r3
    4f90:	4014      	ands	r4, r2
    4f92:	0533      	lsls	r3, r6, #20
    4f94:	4323      	orrs	r3, r4
    4f96:	005b      	lsls	r3, r3, #1
    4f98:	07ed      	lsls	r5, r5, #31
    4f9a:	085b      	lsrs	r3, r3, #1
    4f9c:	432b      	orrs	r3, r5
    4f9e:	0038      	movs	r0, r7
    4fa0:	0019      	movs	r1, r3
    4fa2:	bc1c      	pop	{r2, r3, r4}
    4fa4:	4690      	mov	r8, r2
    4fa6:	4699      	mov	r9, r3
    4fa8:	46a2      	mov	sl, r4
    4faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fac:	2501      	movs	r5, #1
    4fae:	4643      	mov	r3, r8
    4fb0:	0762      	lsls	r2, r4, #29
    4fb2:	08ff      	lsrs	r7, r7, #3
    4fb4:	4317      	orrs	r7, r2
    4fb6:	08e4      	lsrs	r4, r4, #3
    4fb8:	401d      	ands	r5, r3
    4fba:	4b70      	ldr	r3, [pc, #448]	; (517c <__aeabi_dsub+0x344>)
    4fbc:	429e      	cmp	r6, r3
    4fbe:	d036      	beq.n	502e <__aeabi_dsub+0x1f6>
    4fc0:	0324      	lsls	r4, r4, #12
    4fc2:	0576      	lsls	r6, r6, #21
    4fc4:	0b24      	lsrs	r4, r4, #12
    4fc6:	0d76      	lsrs	r6, r6, #21
    4fc8:	e7db      	b.n	4f82 <__aeabi_dsub+0x14a>
    4fca:	4663      	mov	r3, ip
    4fcc:	1af3      	subs	r3, r6, r3
    4fce:	2b00      	cmp	r3, #0
    4fd0:	dc00      	bgt.n	4fd4 <__aeabi_dsub+0x19c>
    4fd2:	e094      	b.n	50fe <__aeabi_dsub+0x2c6>
    4fd4:	4660      	mov	r0, ip
    4fd6:	2800      	cmp	r0, #0
    4fd8:	d035      	beq.n	5046 <__aeabi_dsub+0x20e>
    4fda:	4868      	ldr	r0, [pc, #416]	; (517c <__aeabi_dsub+0x344>)
    4fdc:	4286      	cmp	r6, r0
    4fde:	d0b1      	beq.n	4f44 <__aeabi_dsub+0x10c>
    4fe0:	2780      	movs	r7, #128	; 0x80
    4fe2:	043f      	lsls	r7, r7, #16
    4fe4:	4339      	orrs	r1, r7
    4fe6:	2b38      	cmp	r3, #56	; 0x38
    4fe8:	dc00      	bgt.n	4fec <__aeabi_dsub+0x1b4>
    4fea:	e0fd      	b.n	51e8 <__aeabi_dsub+0x3b0>
    4fec:	430a      	orrs	r2, r1
    4fee:	0017      	movs	r7, r2
    4ff0:	2100      	movs	r1, #0
    4ff2:	1e7a      	subs	r2, r7, #1
    4ff4:	4197      	sbcs	r7, r2
    4ff6:	4457      	add	r7, sl
    4ff8:	4557      	cmp	r7, sl
    4ffa:	4180      	sbcs	r0, r0
    4ffc:	1909      	adds	r1, r1, r4
    4ffe:	4244      	negs	r4, r0
    5000:	190c      	adds	r4, r1, r4
    5002:	0223      	lsls	r3, r4, #8
    5004:	d53a      	bpl.n	507c <__aeabi_dsub+0x244>
    5006:	4b5d      	ldr	r3, [pc, #372]	; (517c <__aeabi_dsub+0x344>)
    5008:	3601      	adds	r6, #1
    500a:	429e      	cmp	r6, r3
    500c:	d100      	bne.n	5010 <__aeabi_dsub+0x1d8>
    500e:	e14b      	b.n	52a8 <__aeabi_dsub+0x470>
    5010:	2201      	movs	r2, #1
    5012:	4b5b      	ldr	r3, [pc, #364]	; (5180 <__aeabi_dsub+0x348>)
    5014:	401c      	ands	r4, r3
    5016:	087b      	lsrs	r3, r7, #1
    5018:	4017      	ands	r7, r2
    501a:	431f      	orrs	r7, r3
    501c:	07e2      	lsls	r2, r4, #31
    501e:	4317      	orrs	r7, r2
    5020:	0864      	lsrs	r4, r4, #1
    5022:	e78f      	b.n	4f44 <__aeabi_dsub+0x10c>
    5024:	0008      	movs	r0, r1
    5026:	4310      	orrs	r0, r2
    5028:	d000      	beq.n	502c <__aeabi_dsub+0x1f4>
    502a:	e724      	b.n	4e76 <__aeabi_dsub+0x3e>
    502c:	e721      	b.n	4e72 <__aeabi_dsub+0x3a>
    502e:	0023      	movs	r3, r4
    5030:	433b      	orrs	r3, r7
    5032:	d100      	bne.n	5036 <__aeabi_dsub+0x1fe>
    5034:	e1b9      	b.n	53aa <__aeabi_dsub+0x572>
    5036:	2280      	movs	r2, #128	; 0x80
    5038:	0312      	lsls	r2, r2, #12
    503a:	4314      	orrs	r4, r2
    503c:	0324      	lsls	r4, r4, #12
    503e:	0b24      	lsrs	r4, r4, #12
    5040:	e79f      	b.n	4f82 <__aeabi_dsub+0x14a>
    5042:	002e      	movs	r6, r5
    5044:	e77e      	b.n	4f44 <__aeabi_dsub+0x10c>
    5046:	0008      	movs	r0, r1
    5048:	4310      	orrs	r0, r2
    504a:	d100      	bne.n	504e <__aeabi_dsub+0x216>
    504c:	e0ca      	b.n	51e4 <__aeabi_dsub+0x3ac>
    504e:	1e58      	subs	r0, r3, #1
    5050:	4684      	mov	ip, r0
    5052:	2800      	cmp	r0, #0
    5054:	d000      	beq.n	5058 <__aeabi_dsub+0x220>
    5056:	e0e7      	b.n	5228 <__aeabi_dsub+0x3f0>
    5058:	4452      	add	r2, sl
    505a:	4552      	cmp	r2, sl
    505c:	4180      	sbcs	r0, r0
    505e:	1864      	adds	r4, r4, r1
    5060:	4240      	negs	r0, r0
    5062:	1824      	adds	r4, r4, r0
    5064:	0017      	movs	r7, r2
    5066:	2601      	movs	r6, #1
    5068:	0223      	lsls	r3, r4, #8
    506a:	d507      	bpl.n	507c <__aeabi_dsub+0x244>
    506c:	2602      	movs	r6, #2
    506e:	e7cf      	b.n	5010 <__aeabi_dsub+0x1d8>
    5070:	4664      	mov	r4, ip
    5072:	432c      	orrs	r4, r5
    5074:	d100      	bne.n	5078 <__aeabi_dsub+0x240>
    5076:	e1b3      	b.n	53e0 <__aeabi_dsub+0x5a8>
    5078:	002c      	movs	r4, r5
    507a:	4667      	mov	r7, ip
    507c:	077b      	lsls	r3, r7, #29
    507e:	d000      	beq.n	5082 <__aeabi_dsub+0x24a>
    5080:	e762      	b.n	4f48 <__aeabi_dsub+0x110>
    5082:	0763      	lsls	r3, r4, #29
    5084:	08ff      	lsrs	r7, r7, #3
    5086:	431f      	orrs	r7, r3
    5088:	2501      	movs	r5, #1
    508a:	4643      	mov	r3, r8
    508c:	08e4      	lsrs	r4, r4, #3
    508e:	401d      	ands	r5, r3
    5090:	e793      	b.n	4fba <__aeabi_dsub+0x182>
    5092:	2d00      	cmp	r5, #0
    5094:	d178      	bne.n	5188 <__aeabi_dsub+0x350>
    5096:	1c75      	adds	r5, r6, #1
    5098:	056d      	lsls	r5, r5, #21
    509a:	0d6d      	lsrs	r5, r5, #21
    509c:	2d01      	cmp	r5, #1
    509e:	dc00      	bgt.n	50a2 <__aeabi_dsub+0x26a>
    50a0:	e0f2      	b.n	5288 <__aeabi_dsub+0x450>
    50a2:	4650      	mov	r0, sl
    50a4:	1a80      	subs	r0, r0, r2
    50a6:	4582      	cmp	sl, r0
    50a8:	41bf      	sbcs	r7, r7
    50aa:	1a65      	subs	r5, r4, r1
    50ac:	427f      	negs	r7, r7
    50ae:	1bed      	subs	r5, r5, r7
    50b0:	4684      	mov	ip, r0
    50b2:	0228      	lsls	r0, r5, #8
    50b4:	d400      	bmi.n	50b8 <__aeabi_dsub+0x280>
    50b6:	e08c      	b.n	51d2 <__aeabi_dsub+0x39a>
    50b8:	4650      	mov	r0, sl
    50ba:	1a17      	subs	r7, r2, r0
    50bc:	42ba      	cmp	r2, r7
    50be:	4192      	sbcs	r2, r2
    50c0:	1b0c      	subs	r4, r1, r4
    50c2:	4255      	negs	r5, r2
    50c4:	1b65      	subs	r5, r4, r5
    50c6:	4698      	mov	r8, r3
    50c8:	e714      	b.n	4ef4 <__aeabi_dsub+0xbc>
    50ca:	2501      	movs	r5, #1
    50cc:	4643      	mov	r3, r8
    50ce:	2400      	movs	r4, #0
    50d0:	401d      	ands	r5, r3
    50d2:	2700      	movs	r7, #0
    50d4:	e755      	b.n	4f82 <__aeabi_dsub+0x14a>
    50d6:	4c2a      	ldr	r4, [pc, #168]	; (5180 <__aeabi_dsub+0x348>)
    50d8:	1af6      	subs	r6, r6, r3
    50da:	402c      	ands	r4, r5
    50dc:	e732      	b.n	4f44 <__aeabi_dsub+0x10c>
    50de:	003d      	movs	r5, r7
    50e0:	3828      	subs	r0, #40	; 0x28
    50e2:	4085      	lsls	r5, r0
    50e4:	2700      	movs	r7, #0
    50e6:	e717      	b.n	4f18 <__aeabi_dsub+0xe0>
    50e8:	0038      	movs	r0, r7
    50ea:	f000 fb4b 	bl	5784 <__clzsi2>
    50ee:	3020      	adds	r0, #32
    50f0:	e706      	b.n	4f00 <__aeabi_dsub+0xc8>
    50f2:	430a      	orrs	r2, r1
    50f4:	0017      	movs	r7, r2
    50f6:	2100      	movs	r1, #0
    50f8:	1e7a      	subs	r2, r7, #1
    50fa:	4197      	sbcs	r7, r2
    50fc:	e6ee      	b.n	4edc <__aeabi_dsub+0xa4>
    50fe:	2b00      	cmp	r3, #0
    5100:	d000      	beq.n	5104 <__aeabi_dsub+0x2cc>
    5102:	e0e5      	b.n	52d0 <__aeabi_dsub+0x498>
    5104:	1c73      	adds	r3, r6, #1
    5106:	469c      	mov	ip, r3
    5108:	055b      	lsls	r3, r3, #21
    510a:	0d5b      	lsrs	r3, r3, #21
    510c:	2b01      	cmp	r3, #1
    510e:	dc00      	bgt.n	5112 <__aeabi_dsub+0x2da>
    5110:	e09f      	b.n	5252 <__aeabi_dsub+0x41a>
    5112:	4b1a      	ldr	r3, [pc, #104]	; (517c <__aeabi_dsub+0x344>)
    5114:	459c      	cmp	ip, r3
    5116:	d100      	bne.n	511a <__aeabi_dsub+0x2e2>
    5118:	e0c5      	b.n	52a6 <__aeabi_dsub+0x46e>
    511a:	4452      	add	r2, sl
    511c:	4552      	cmp	r2, sl
    511e:	4180      	sbcs	r0, r0
    5120:	1864      	adds	r4, r4, r1
    5122:	4240      	negs	r0, r0
    5124:	1824      	adds	r4, r4, r0
    5126:	07e7      	lsls	r7, r4, #31
    5128:	0852      	lsrs	r2, r2, #1
    512a:	4317      	orrs	r7, r2
    512c:	0864      	lsrs	r4, r4, #1
    512e:	4666      	mov	r6, ip
    5130:	e708      	b.n	4f44 <__aeabi_dsub+0x10c>
    5132:	4812      	ldr	r0, [pc, #72]	; (517c <__aeabi_dsub+0x344>)
    5134:	4285      	cmp	r5, r0
    5136:	d100      	bne.n	513a <__aeabi_dsub+0x302>
    5138:	e085      	b.n	5246 <__aeabi_dsub+0x40e>
    513a:	001d      	movs	r5, r3
    513c:	e6bc      	b.n	4eb8 <__aeabi_dsub+0x80>
    513e:	0029      	movs	r1, r5
    5140:	3e1f      	subs	r6, #31
    5142:	40f1      	lsrs	r1, r6
    5144:	2b20      	cmp	r3, #32
    5146:	d100      	bne.n	514a <__aeabi_dsub+0x312>
    5148:	e07f      	b.n	524a <__aeabi_dsub+0x412>
    514a:	2240      	movs	r2, #64	; 0x40
    514c:	1ad3      	subs	r3, r2, r3
    514e:	409d      	lsls	r5, r3
    5150:	432f      	orrs	r7, r5
    5152:	1e7d      	subs	r5, r7, #1
    5154:	41af      	sbcs	r7, r5
    5156:	2400      	movs	r4, #0
    5158:	430f      	orrs	r7, r1
    515a:	2600      	movs	r6, #0
    515c:	e78e      	b.n	507c <__aeabi_dsub+0x244>
    515e:	002b      	movs	r3, r5
    5160:	000f      	movs	r7, r1
    5162:	3b20      	subs	r3, #32
    5164:	40df      	lsrs	r7, r3
    5166:	2d20      	cmp	r5, #32
    5168:	d071      	beq.n	524e <__aeabi_dsub+0x416>
    516a:	2340      	movs	r3, #64	; 0x40
    516c:	1b5d      	subs	r5, r3, r5
    516e:	40a9      	lsls	r1, r5
    5170:	430a      	orrs	r2, r1
    5172:	1e51      	subs	r1, r2, #1
    5174:	418a      	sbcs	r2, r1
    5176:	2100      	movs	r1, #0
    5178:	4317      	orrs	r7, r2
    517a:	e6af      	b.n	4edc <__aeabi_dsub+0xa4>
    517c:	000007ff 	.word	0x000007ff
    5180:	ff7fffff 	.word	0xff7fffff
    5184:	800fffff 	.word	0x800fffff
    5188:	2e00      	cmp	r6, #0
    518a:	d03e      	beq.n	520a <__aeabi_dsub+0x3d2>
    518c:	4eb3      	ldr	r6, [pc, #716]	; (545c <__aeabi_dsub+0x624>)
    518e:	45b4      	cmp	ip, r6
    5190:	d045      	beq.n	521e <__aeabi_dsub+0x3e6>
    5192:	2680      	movs	r6, #128	; 0x80
    5194:	0436      	lsls	r6, r6, #16
    5196:	426d      	negs	r5, r5
    5198:	4334      	orrs	r4, r6
    519a:	2d38      	cmp	r5, #56	; 0x38
    519c:	dd00      	ble.n	51a0 <__aeabi_dsub+0x368>
    519e:	e0a8      	b.n	52f2 <__aeabi_dsub+0x4ba>
    51a0:	2d1f      	cmp	r5, #31
    51a2:	dd00      	ble.n	51a6 <__aeabi_dsub+0x36e>
    51a4:	e11f      	b.n	53e6 <__aeabi_dsub+0x5ae>
    51a6:	2620      	movs	r6, #32
    51a8:	0027      	movs	r7, r4
    51aa:	4650      	mov	r0, sl
    51ac:	1b76      	subs	r6, r6, r5
    51ae:	40b7      	lsls	r7, r6
    51b0:	40e8      	lsrs	r0, r5
    51b2:	4307      	orrs	r7, r0
    51b4:	4650      	mov	r0, sl
    51b6:	40b0      	lsls	r0, r6
    51b8:	1e46      	subs	r6, r0, #1
    51ba:	41b0      	sbcs	r0, r6
    51bc:	40ec      	lsrs	r4, r5
    51be:	4338      	orrs	r0, r7
    51c0:	1a17      	subs	r7, r2, r0
    51c2:	42ba      	cmp	r2, r7
    51c4:	4192      	sbcs	r2, r2
    51c6:	1b0c      	subs	r4, r1, r4
    51c8:	4252      	negs	r2, r2
    51ca:	1aa4      	subs	r4, r4, r2
    51cc:	4666      	mov	r6, ip
    51ce:	4698      	mov	r8, r3
    51d0:	e68b      	b.n	4eea <__aeabi_dsub+0xb2>
    51d2:	4664      	mov	r4, ip
    51d4:	4667      	mov	r7, ip
    51d6:	432c      	orrs	r4, r5
    51d8:	d000      	beq.n	51dc <__aeabi_dsub+0x3a4>
    51da:	e68b      	b.n	4ef4 <__aeabi_dsub+0xbc>
    51dc:	2500      	movs	r5, #0
    51de:	2600      	movs	r6, #0
    51e0:	2700      	movs	r7, #0
    51e2:	e6ea      	b.n	4fba <__aeabi_dsub+0x182>
    51e4:	001e      	movs	r6, r3
    51e6:	e6ad      	b.n	4f44 <__aeabi_dsub+0x10c>
    51e8:	2b1f      	cmp	r3, #31
    51ea:	dc60      	bgt.n	52ae <__aeabi_dsub+0x476>
    51ec:	2720      	movs	r7, #32
    51ee:	1af8      	subs	r0, r7, r3
    51f0:	000f      	movs	r7, r1
    51f2:	4684      	mov	ip, r0
    51f4:	4087      	lsls	r7, r0
    51f6:	0010      	movs	r0, r2
    51f8:	40d8      	lsrs	r0, r3
    51fa:	4307      	orrs	r7, r0
    51fc:	4660      	mov	r0, ip
    51fe:	4082      	lsls	r2, r0
    5200:	1e50      	subs	r0, r2, #1
    5202:	4182      	sbcs	r2, r0
    5204:	40d9      	lsrs	r1, r3
    5206:	4317      	orrs	r7, r2
    5208:	e6f5      	b.n	4ff6 <__aeabi_dsub+0x1be>
    520a:	0026      	movs	r6, r4
    520c:	4650      	mov	r0, sl
    520e:	4306      	orrs	r6, r0
    5210:	d005      	beq.n	521e <__aeabi_dsub+0x3e6>
    5212:	43ed      	mvns	r5, r5
    5214:	2d00      	cmp	r5, #0
    5216:	d0d3      	beq.n	51c0 <__aeabi_dsub+0x388>
    5218:	4e90      	ldr	r6, [pc, #576]	; (545c <__aeabi_dsub+0x624>)
    521a:	45b4      	cmp	ip, r6
    521c:	d1bd      	bne.n	519a <__aeabi_dsub+0x362>
    521e:	000c      	movs	r4, r1
    5220:	0017      	movs	r7, r2
    5222:	4666      	mov	r6, ip
    5224:	4698      	mov	r8, r3
    5226:	e68d      	b.n	4f44 <__aeabi_dsub+0x10c>
    5228:	488c      	ldr	r0, [pc, #560]	; (545c <__aeabi_dsub+0x624>)
    522a:	4283      	cmp	r3, r0
    522c:	d00b      	beq.n	5246 <__aeabi_dsub+0x40e>
    522e:	4663      	mov	r3, ip
    5230:	e6d9      	b.n	4fe6 <__aeabi_dsub+0x1ae>
    5232:	2d00      	cmp	r5, #0
    5234:	d000      	beq.n	5238 <__aeabi_dsub+0x400>
    5236:	e096      	b.n	5366 <__aeabi_dsub+0x52e>
    5238:	0008      	movs	r0, r1
    523a:	4310      	orrs	r0, r2
    523c:	d100      	bne.n	5240 <__aeabi_dsub+0x408>
    523e:	e0e2      	b.n	5406 <__aeabi_dsub+0x5ce>
    5240:	000c      	movs	r4, r1
    5242:	0017      	movs	r7, r2
    5244:	4698      	mov	r8, r3
    5246:	4e85      	ldr	r6, [pc, #532]	; (545c <__aeabi_dsub+0x624>)
    5248:	e67c      	b.n	4f44 <__aeabi_dsub+0x10c>
    524a:	2500      	movs	r5, #0
    524c:	e780      	b.n	5150 <__aeabi_dsub+0x318>
    524e:	2100      	movs	r1, #0
    5250:	e78e      	b.n	5170 <__aeabi_dsub+0x338>
    5252:	0023      	movs	r3, r4
    5254:	4650      	mov	r0, sl
    5256:	4303      	orrs	r3, r0
    5258:	2e00      	cmp	r6, #0
    525a:	d000      	beq.n	525e <__aeabi_dsub+0x426>
    525c:	e0a8      	b.n	53b0 <__aeabi_dsub+0x578>
    525e:	2b00      	cmp	r3, #0
    5260:	d100      	bne.n	5264 <__aeabi_dsub+0x42c>
    5262:	e0de      	b.n	5422 <__aeabi_dsub+0x5ea>
    5264:	000b      	movs	r3, r1
    5266:	4313      	orrs	r3, r2
    5268:	d100      	bne.n	526c <__aeabi_dsub+0x434>
    526a:	e66b      	b.n	4f44 <__aeabi_dsub+0x10c>
    526c:	4452      	add	r2, sl
    526e:	4552      	cmp	r2, sl
    5270:	4180      	sbcs	r0, r0
    5272:	1864      	adds	r4, r4, r1
    5274:	4240      	negs	r0, r0
    5276:	1824      	adds	r4, r4, r0
    5278:	0017      	movs	r7, r2
    527a:	0223      	lsls	r3, r4, #8
    527c:	d400      	bmi.n	5280 <__aeabi_dsub+0x448>
    527e:	e6fd      	b.n	507c <__aeabi_dsub+0x244>
    5280:	4b77      	ldr	r3, [pc, #476]	; (5460 <__aeabi_dsub+0x628>)
    5282:	4666      	mov	r6, ip
    5284:	401c      	ands	r4, r3
    5286:	e65d      	b.n	4f44 <__aeabi_dsub+0x10c>
    5288:	0025      	movs	r5, r4
    528a:	4650      	mov	r0, sl
    528c:	4305      	orrs	r5, r0
    528e:	2e00      	cmp	r6, #0
    5290:	d1cf      	bne.n	5232 <__aeabi_dsub+0x3fa>
    5292:	2d00      	cmp	r5, #0
    5294:	d14f      	bne.n	5336 <__aeabi_dsub+0x4fe>
    5296:	000c      	movs	r4, r1
    5298:	4314      	orrs	r4, r2
    529a:	d100      	bne.n	529e <__aeabi_dsub+0x466>
    529c:	e0a0      	b.n	53e0 <__aeabi_dsub+0x5a8>
    529e:	000c      	movs	r4, r1
    52a0:	0017      	movs	r7, r2
    52a2:	4698      	mov	r8, r3
    52a4:	e64e      	b.n	4f44 <__aeabi_dsub+0x10c>
    52a6:	4666      	mov	r6, ip
    52a8:	2400      	movs	r4, #0
    52aa:	2700      	movs	r7, #0
    52ac:	e685      	b.n	4fba <__aeabi_dsub+0x182>
    52ae:	001f      	movs	r7, r3
    52b0:	0008      	movs	r0, r1
    52b2:	3f20      	subs	r7, #32
    52b4:	40f8      	lsrs	r0, r7
    52b6:	0007      	movs	r7, r0
    52b8:	2b20      	cmp	r3, #32
    52ba:	d100      	bne.n	52be <__aeabi_dsub+0x486>
    52bc:	e08e      	b.n	53dc <__aeabi_dsub+0x5a4>
    52be:	2040      	movs	r0, #64	; 0x40
    52c0:	1ac3      	subs	r3, r0, r3
    52c2:	4099      	lsls	r1, r3
    52c4:	430a      	orrs	r2, r1
    52c6:	1e51      	subs	r1, r2, #1
    52c8:	418a      	sbcs	r2, r1
    52ca:	2100      	movs	r1, #0
    52cc:	4317      	orrs	r7, r2
    52ce:	e692      	b.n	4ff6 <__aeabi_dsub+0x1be>
    52d0:	2e00      	cmp	r6, #0
    52d2:	d114      	bne.n	52fe <__aeabi_dsub+0x4c6>
    52d4:	0026      	movs	r6, r4
    52d6:	4650      	mov	r0, sl
    52d8:	4306      	orrs	r6, r0
    52da:	d062      	beq.n	53a2 <__aeabi_dsub+0x56a>
    52dc:	43db      	mvns	r3, r3
    52de:	2b00      	cmp	r3, #0
    52e0:	d15c      	bne.n	539c <__aeabi_dsub+0x564>
    52e2:	1887      	adds	r7, r0, r2
    52e4:	4297      	cmp	r7, r2
    52e6:	4192      	sbcs	r2, r2
    52e8:	1864      	adds	r4, r4, r1
    52ea:	4252      	negs	r2, r2
    52ec:	18a4      	adds	r4, r4, r2
    52ee:	4666      	mov	r6, ip
    52f0:	e687      	b.n	5002 <__aeabi_dsub+0x1ca>
    52f2:	4650      	mov	r0, sl
    52f4:	4320      	orrs	r0, r4
    52f6:	1e44      	subs	r4, r0, #1
    52f8:	41a0      	sbcs	r0, r4
    52fa:	2400      	movs	r4, #0
    52fc:	e760      	b.n	51c0 <__aeabi_dsub+0x388>
    52fe:	4e57      	ldr	r6, [pc, #348]	; (545c <__aeabi_dsub+0x624>)
    5300:	45b4      	cmp	ip, r6
    5302:	d04e      	beq.n	53a2 <__aeabi_dsub+0x56a>
    5304:	2680      	movs	r6, #128	; 0x80
    5306:	0436      	lsls	r6, r6, #16
    5308:	425b      	negs	r3, r3
    530a:	4334      	orrs	r4, r6
    530c:	2b38      	cmp	r3, #56	; 0x38
    530e:	dd00      	ble.n	5312 <__aeabi_dsub+0x4da>
    5310:	e07f      	b.n	5412 <__aeabi_dsub+0x5da>
    5312:	2b1f      	cmp	r3, #31
    5314:	dd00      	ble.n	5318 <__aeabi_dsub+0x4e0>
    5316:	e08b      	b.n	5430 <__aeabi_dsub+0x5f8>
    5318:	2620      	movs	r6, #32
    531a:	0027      	movs	r7, r4
    531c:	4650      	mov	r0, sl
    531e:	1af6      	subs	r6, r6, r3
    5320:	40b7      	lsls	r7, r6
    5322:	40d8      	lsrs	r0, r3
    5324:	4307      	orrs	r7, r0
    5326:	4650      	mov	r0, sl
    5328:	40b0      	lsls	r0, r6
    532a:	1e46      	subs	r6, r0, #1
    532c:	41b0      	sbcs	r0, r6
    532e:	4307      	orrs	r7, r0
    5330:	40dc      	lsrs	r4, r3
    5332:	18bf      	adds	r7, r7, r2
    5334:	e7d6      	b.n	52e4 <__aeabi_dsub+0x4ac>
    5336:	000d      	movs	r5, r1
    5338:	4315      	orrs	r5, r2
    533a:	d100      	bne.n	533e <__aeabi_dsub+0x506>
    533c:	e602      	b.n	4f44 <__aeabi_dsub+0x10c>
    533e:	4650      	mov	r0, sl
    5340:	1a80      	subs	r0, r0, r2
    5342:	4582      	cmp	sl, r0
    5344:	41bf      	sbcs	r7, r7
    5346:	1a65      	subs	r5, r4, r1
    5348:	427f      	negs	r7, r7
    534a:	1bed      	subs	r5, r5, r7
    534c:	4684      	mov	ip, r0
    534e:	0228      	lsls	r0, r5, #8
    5350:	d400      	bmi.n	5354 <__aeabi_dsub+0x51c>
    5352:	e68d      	b.n	5070 <__aeabi_dsub+0x238>
    5354:	4650      	mov	r0, sl
    5356:	1a17      	subs	r7, r2, r0
    5358:	42ba      	cmp	r2, r7
    535a:	4192      	sbcs	r2, r2
    535c:	1b0c      	subs	r4, r1, r4
    535e:	4252      	negs	r2, r2
    5360:	1aa4      	subs	r4, r4, r2
    5362:	4698      	mov	r8, r3
    5364:	e5ee      	b.n	4f44 <__aeabi_dsub+0x10c>
    5366:	000d      	movs	r5, r1
    5368:	4315      	orrs	r5, r2
    536a:	d100      	bne.n	536e <__aeabi_dsub+0x536>
    536c:	e76b      	b.n	5246 <__aeabi_dsub+0x40e>
    536e:	4650      	mov	r0, sl
    5370:	0767      	lsls	r7, r4, #29
    5372:	08c0      	lsrs	r0, r0, #3
    5374:	4307      	orrs	r7, r0
    5376:	2080      	movs	r0, #128	; 0x80
    5378:	08e4      	lsrs	r4, r4, #3
    537a:	0300      	lsls	r0, r0, #12
    537c:	4204      	tst	r4, r0
    537e:	d007      	beq.n	5390 <__aeabi_dsub+0x558>
    5380:	08cd      	lsrs	r5, r1, #3
    5382:	4205      	tst	r5, r0
    5384:	d104      	bne.n	5390 <__aeabi_dsub+0x558>
    5386:	002c      	movs	r4, r5
    5388:	4698      	mov	r8, r3
    538a:	08d7      	lsrs	r7, r2, #3
    538c:	0749      	lsls	r1, r1, #29
    538e:	430f      	orrs	r7, r1
    5390:	0f7b      	lsrs	r3, r7, #29
    5392:	00e4      	lsls	r4, r4, #3
    5394:	431c      	orrs	r4, r3
    5396:	00ff      	lsls	r7, r7, #3
    5398:	4e30      	ldr	r6, [pc, #192]	; (545c <__aeabi_dsub+0x624>)
    539a:	e5d3      	b.n	4f44 <__aeabi_dsub+0x10c>
    539c:	4e2f      	ldr	r6, [pc, #188]	; (545c <__aeabi_dsub+0x624>)
    539e:	45b4      	cmp	ip, r6
    53a0:	d1b4      	bne.n	530c <__aeabi_dsub+0x4d4>
    53a2:	000c      	movs	r4, r1
    53a4:	0017      	movs	r7, r2
    53a6:	4666      	mov	r6, ip
    53a8:	e5cc      	b.n	4f44 <__aeabi_dsub+0x10c>
    53aa:	2700      	movs	r7, #0
    53ac:	2400      	movs	r4, #0
    53ae:	e5e8      	b.n	4f82 <__aeabi_dsub+0x14a>
    53b0:	2b00      	cmp	r3, #0
    53b2:	d039      	beq.n	5428 <__aeabi_dsub+0x5f0>
    53b4:	000b      	movs	r3, r1
    53b6:	4313      	orrs	r3, r2
    53b8:	d100      	bne.n	53bc <__aeabi_dsub+0x584>
    53ba:	e744      	b.n	5246 <__aeabi_dsub+0x40e>
    53bc:	08c0      	lsrs	r0, r0, #3
    53be:	0767      	lsls	r7, r4, #29
    53c0:	4307      	orrs	r7, r0
    53c2:	2080      	movs	r0, #128	; 0x80
    53c4:	08e4      	lsrs	r4, r4, #3
    53c6:	0300      	lsls	r0, r0, #12
    53c8:	4204      	tst	r4, r0
    53ca:	d0e1      	beq.n	5390 <__aeabi_dsub+0x558>
    53cc:	08cb      	lsrs	r3, r1, #3
    53ce:	4203      	tst	r3, r0
    53d0:	d1de      	bne.n	5390 <__aeabi_dsub+0x558>
    53d2:	08d7      	lsrs	r7, r2, #3
    53d4:	0749      	lsls	r1, r1, #29
    53d6:	430f      	orrs	r7, r1
    53d8:	001c      	movs	r4, r3
    53da:	e7d9      	b.n	5390 <__aeabi_dsub+0x558>
    53dc:	2100      	movs	r1, #0
    53de:	e771      	b.n	52c4 <__aeabi_dsub+0x48c>
    53e0:	2500      	movs	r5, #0
    53e2:	2700      	movs	r7, #0
    53e4:	e5e9      	b.n	4fba <__aeabi_dsub+0x182>
    53e6:	002e      	movs	r6, r5
    53e8:	0027      	movs	r7, r4
    53ea:	3e20      	subs	r6, #32
    53ec:	40f7      	lsrs	r7, r6
    53ee:	2d20      	cmp	r5, #32
    53f0:	d02f      	beq.n	5452 <__aeabi_dsub+0x61a>
    53f2:	2640      	movs	r6, #64	; 0x40
    53f4:	1b75      	subs	r5, r6, r5
    53f6:	40ac      	lsls	r4, r5
    53f8:	4650      	mov	r0, sl
    53fa:	4320      	orrs	r0, r4
    53fc:	1e44      	subs	r4, r0, #1
    53fe:	41a0      	sbcs	r0, r4
    5400:	2400      	movs	r4, #0
    5402:	4338      	orrs	r0, r7
    5404:	e6dc      	b.n	51c0 <__aeabi_dsub+0x388>
    5406:	2480      	movs	r4, #128	; 0x80
    5408:	2500      	movs	r5, #0
    540a:	0324      	lsls	r4, r4, #12
    540c:	4e13      	ldr	r6, [pc, #76]	; (545c <__aeabi_dsub+0x624>)
    540e:	2700      	movs	r7, #0
    5410:	e5d3      	b.n	4fba <__aeabi_dsub+0x182>
    5412:	4650      	mov	r0, sl
    5414:	4320      	orrs	r0, r4
    5416:	0007      	movs	r7, r0
    5418:	1e78      	subs	r0, r7, #1
    541a:	4187      	sbcs	r7, r0
    541c:	2400      	movs	r4, #0
    541e:	18bf      	adds	r7, r7, r2
    5420:	e760      	b.n	52e4 <__aeabi_dsub+0x4ac>
    5422:	000c      	movs	r4, r1
    5424:	0017      	movs	r7, r2
    5426:	e58d      	b.n	4f44 <__aeabi_dsub+0x10c>
    5428:	000c      	movs	r4, r1
    542a:	0017      	movs	r7, r2
    542c:	4e0b      	ldr	r6, [pc, #44]	; (545c <__aeabi_dsub+0x624>)
    542e:	e589      	b.n	4f44 <__aeabi_dsub+0x10c>
    5430:	001e      	movs	r6, r3
    5432:	0027      	movs	r7, r4
    5434:	3e20      	subs	r6, #32
    5436:	40f7      	lsrs	r7, r6
    5438:	2b20      	cmp	r3, #32
    543a:	d00c      	beq.n	5456 <__aeabi_dsub+0x61e>
    543c:	2640      	movs	r6, #64	; 0x40
    543e:	1af3      	subs	r3, r6, r3
    5440:	409c      	lsls	r4, r3
    5442:	4650      	mov	r0, sl
    5444:	4320      	orrs	r0, r4
    5446:	1e44      	subs	r4, r0, #1
    5448:	41a0      	sbcs	r0, r4
    544a:	4307      	orrs	r7, r0
    544c:	2400      	movs	r4, #0
    544e:	18bf      	adds	r7, r7, r2
    5450:	e748      	b.n	52e4 <__aeabi_dsub+0x4ac>
    5452:	2400      	movs	r4, #0
    5454:	e7d0      	b.n	53f8 <__aeabi_dsub+0x5c0>
    5456:	2400      	movs	r4, #0
    5458:	e7f3      	b.n	5442 <__aeabi_dsub+0x60a>
    545a:	46c0      	nop			; (mov r8, r8)
    545c:	000007ff 	.word	0x000007ff
    5460:	ff7fffff 	.word	0xff7fffff

00005464 <__aeabi_d2iz>:
    5464:	b530      	push	{r4, r5, lr}
    5466:	4d13      	ldr	r5, [pc, #76]	; (54b4 <__aeabi_d2iz+0x50>)
    5468:	030a      	lsls	r2, r1, #12
    546a:	004b      	lsls	r3, r1, #1
    546c:	0b12      	lsrs	r2, r2, #12
    546e:	0d5b      	lsrs	r3, r3, #21
    5470:	0fc9      	lsrs	r1, r1, #31
    5472:	2400      	movs	r4, #0
    5474:	42ab      	cmp	r3, r5
    5476:	dd10      	ble.n	549a <__aeabi_d2iz+0x36>
    5478:	4c0f      	ldr	r4, [pc, #60]	; (54b8 <__aeabi_d2iz+0x54>)
    547a:	42a3      	cmp	r3, r4
    547c:	dc0f      	bgt.n	549e <__aeabi_d2iz+0x3a>
    547e:	2480      	movs	r4, #128	; 0x80
    5480:	4d0e      	ldr	r5, [pc, #56]	; (54bc <__aeabi_d2iz+0x58>)
    5482:	0364      	lsls	r4, r4, #13
    5484:	4322      	orrs	r2, r4
    5486:	1aed      	subs	r5, r5, r3
    5488:	2d1f      	cmp	r5, #31
    548a:	dd0b      	ble.n	54a4 <__aeabi_d2iz+0x40>
    548c:	480c      	ldr	r0, [pc, #48]	; (54c0 <__aeabi_d2iz+0x5c>)
    548e:	1ac3      	subs	r3, r0, r3
    5490:	40da      	lsrs	r2, r3
    5492:	4254      	negs	r4, r2
    5494:	2900      	cmp	r1, #0
    5496:	d100      	bne.n	549a <__aeabi_d2iz+0x36>
    5498:	0014      	movs	r4, r2
    549a:	0020      	movs	r0, r4
    549c:	bd30      	pop	{r4, r5, pc}
    549e:	4b09      	ldr	r3, [pc, #36]	; (54c4 <__aeabi_d2iz+0x60>)
    54a0:	18cc      	adds	r4, r1, r3
    54a2:	e7fa      	b.n	549a <__aeabi_d2iz+0x36>
    54a4:	4c08      	ldr	r4, [pc, #32]	; (54c8 <__aeabi_d2iz+0x64>)
    54a6:	40e8      	lsrs	r0, r5
    54a8:	46a4      	mov	ip, r4
    54aa:	4463      	add	r3, ip
    54ac:	409a      	lsls	r2, r3
    54ae:	4302      	orrs	r2, r0
    54b0:	e7ef      	b.n	5492 <__aeabi_d2iz+0x2e>
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	000003fe 	.word	0x000003fe
    54b8:	0000041d 	.word	0x0000041d
    54bc:	00000433 	.word	0x00000433
    54c0:	00000413 	.word	0x00000413
    54c4:	7fffffff 	.word	0x7fffffff
    54c8:	fffffbed 	.word	0xfffffbed

000054cc <__aeabi_i2d>:
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	2800      	cmp	r0, #0
    54d0:	d030      	beq.n	5534 <__aeabi_i2d+0x68>
    54d2:	17c3      	asrs	r3, r0, #31
    54d4:	18c4      	adds	r4, r0, r3
    54d6:	405c      	eors	r4, r3
    54d8:	0fc5      	lsrs	r5, r0, #31
    54da:	0020      	movs	r0, r4
    54dc:	f000 f952 	bl	5784 <__clzsi2>
    54e0:	4b17      	ldr	r3, [pc, #92]	; (5540 <__aeabi_i2d+0x74>)
    54e2:	4a18      	ldr	r2, [pc, #96]	; (5544 <__aeabi_i2d+0x78>)
    54e4:	1a1b      	subs	r3, r3, r0
    54e6:	1ad2      	subs	r2, r2, r3
    54e8:	2a1f      	cmp	r2, #31
    54ea:	dd18      	ble.n	551e <__aeabi_i2d+0x52>
    54ec:	4a16      	ldr	r2, [pc, #88]	; (5548 <__aeabi_i2d+0x7c>)
    54ee:	1ad2      	subs	r2, r2, r3
    54f0:	4094      	lsls	r4, r2
    54f2:	2200      	movs	r2, #0
    54f4:	0324      	lsls	r4, r4, #12
    54f6:	055b      	lsls	r3, r3, #21
    54f8:	0b24      	lsrs	r4, r4, #12
    54fa:	0d5b      	lsrs	r3, r3, #21
    54fc:	2100      	movs	r1, #0
    54fe:	0010      	movs	r0, r2
    5500:	0324      	lsls	r4, r4, #12
    5502:	0d0a      	lsrs	r2, r1, #20
    5504:	0b24      	lsrs	r4, r4, #12
    5506:	0512      	lsls	r2, r2, #20
    5508:	4322      	orrs	r2, r4
    550a:	4c10      	ldr	r4, [pc, #64]	; (554c <__aeabi_i2d+0x80>)
    550c:	051b      	lsls	r3, r3, #20
    550e:	4022      	ands	r2, r4
    5510:	4313      	orrs	r3, r2
    5512:	005b      	lsls	r3, r3, #1
    5514:	07ed      	lsls	r5, r5, #31
    5516:	085b      	lsrs	r3, r3, #1
    5518:	432b      	orrs	r3, r5
    551a:	0019      	movs	r1, r3
    551c:	bd70      	pop	{r4, r5, r6, pc}
    551e:	0021      	movs	r1, r4
    5520:	4091      	lsls	r1, r2
    5522:	000a      	movs	r2, r1
    5524:	210b      	movs	r1, #11
    5526:	1a08      	subs	r0, r1, r0
    5528:	40c4      	lsrs	r4, r0
    552a:	055b      	lsls	r3, r3, #21
    552c:	0324      	lsls	r4, r4, #12
    552e:	0b24      	lsrs	r4, r4, #12
    5530:	0d5b      	lsrs	r3, r3, #21
    5532:	e7e3      	b.n	54fc <__aeabi_i2d+0x30>
    5534:	2500      	movs	r5, #0
    5536:	2300      	movs	r3, #0
    5538:	2400      	movs	r4, #0
    553a:	2200      	movs	r2, #0
    553c:	e7de      	b.n	54fc <__aeabi_i2d+0x30>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	0000041e 	.word	0x0000041e
    5544:	00000433 	.word	0x00000433
    5548:	00000413 	.word	0x00000413
    554c:	800fffff 	.word	0x800fffff

00005550 <__aeabi_f2d>:
    5550:	0041      	lsls	r1, r0, #1
    5552:	0e09      	lsrs	r1, r1, #24
    5554:	1c4b      	adds	r3, r1, #1
    5556:	b570      	push	{r4, r5, r6, lr}
    5558:	b2db      	uxtb	r3, r3
    555a:	0246      	lsls	r6, r0, #9
    555c:	0a75      	lsrs	r5, r6, #9
    555e:	0fc4      	lsrs	r4, r0, #31
    5560:	2b01      	cmp	r3, #1
    5562:	dd14      	ble.n	558e <__aeabi_f2d+0x3e>
    5564:	23e0      	movs	r3, #224	; 0xe0
    5566:	009b      	lsls	r3, r3, #2
    5568:	076d      	lsls	r5, r5, #29
    556a:	0b36      	lsrs	r6, r6, #12
    556c:	18cb      	adds	r3, r1, r3
    556e:	2100      	movs	r1, #0
    5570:	0d0a      	lsrs	r2, r1, #20
    5572:	0028      	movs	r0, r5
    5574:	0512      	lsls	r2, r2, #20
    5576:	4d1c      	ldr	r5, [pc, #112]	; (55e8 <__aeabi_f2d+0x98>)
    5578:	4332      	orrs	r2, r6
    557a:	055b      	lsls	r3, r3, #21
    557c:	402a      	ands	r2, r5
    557e:	085b      	lsrs	r3, r3, #1
    5580:	4313      	orrs	r3, r2
    5582:	005b      	lsls	r3, r3, #1
    5584:	07e4      	lsls	r4, r4, #31
    5586:	085b      	lsrs	r3, r3, #1
    5588:	4323      	orrs	r3, r4
    558a:	0019      	movs	r1, r3
    558c:	bd70      	pop	{r4, r5, r6, pc}
    558e:	2900      	cmp	r1, #0
    5590:	d114      	bne.n	55bc <__aeabi_f2d+0x6c>
    5592:	2d00      	cmp	r5, #0
    5594:	d01e      	beq.n	55d4 <__aeabi_f2d+0x84>
    5596:	0028      	movs	r0, r5
    5598:	f000 f8f4 	bl	5784 <__clzsi2>
    559c:	280a      	cmp	r0, #10
    559e:	dc1c      	bgt.n	55da <__aeabi_f2d+0x8a>
    55a0:	230b      	movs	r3, #11
    55a2:	002a      	movs	r2, r5
    55a4:	1a1b      	subs	r3, r3, r0
    55a6:	40da      	lsrs	r2, r3
    55a8:	0003      	movs	r3, r0
    55aa:	3315      	adds	r3, #21
    55ac:	409d      	lsls	r5, r3
    55ae:	4b0f      	ldr	r3, [pc, #60]	; (55ec <__aeabi_f2d+0x9c>)
    55b0:	0312      	lsls	r2, r2, #12
    55b2:	1a1b      	subs	r3, r3, r0
    55b4:	055b      	lsls	r3, r3, #21
    55b6:	0b16      	lsrs	r6, r2, #12
    55b8:	0d5b      	lsrs	r3, r3, #21
    55ba:	e7d8      	b.n	556e <__aeabi_f2d+0x1e>
    55bc:	2d00      	cmp	r5, #0
    55be:	d006      	beq.n	55ce <__aeabi_f2d+0x7e>
    55c0:	0b32      	lsrs	r2, r6, #12
    55c2:	2680      	movs	r6, #128	; 0x80
    55c4:	0336      	lsls	r6, r6, #12
    55c6:	076d      	lsls	r5, r5, #29
    55c8:	4316      	orrs	r6, r2
    55ca:	4b09      	ldr	r3, [pc, #36]	; (55f0 <__aeabi_f2d+0xa0>)
    55cc:	e7cf      	b.n	556e <__aeabi_f2d+0x1e>
    55ce:	4b08      	ldr	r3, [pc, #32]	; (55f0 <__aeabi_f2d+0xa0>)
    55d0:	2600      	movs	r6, #0
    55d2:	e7cc      	b.n	556e <__aeabi_f2d+0x1e>
    55d4:	2300      	movs	r3, #0
    55d6:	2600      	movs	r6, #0
    55d8:	e7c9      	b.n	556e <__aeabi_f2d+0x1e>
    55da:	0003      	movs	r3, r0
    55dc:	002a      	movs	r2, r5
    55de:	3b0b      	subs	r3, #11
    55e0:	409a      	lsls	r2, r3
    55e2:	2500      	movs	r5, #0
    55e4:	e7e3      	b.n	55ae <__aeabi_f2d+0x5e>
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	800fffff 	.word	0x800fffff
    55ec:	00000389 	.word	0x00000389
    55f0:	000007ff 	.word	0x000007ff

000055f4 <__aeabi_d2f>:
    55f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55f6:	004c      	lsls	r4, r1, #1
    55f8:	0d64      	lsrs	r4, r4, #21
    55fa:	030b      	lsls	r3, r1, #12
    55fc:	1c62      	adds	r2, r4, #1
    55fe:	0f45      	lsrs	r5, r0, #29
    5600:	0a5b      	lsrs	r3, r3, #9
    5602:	0552      	lsls	r2, r2, #21
    5604:	432b      	orrs	r3, r5
    5606:	0fc9      	lsrs	r1, r1, #31
    5608:	00c5      	lsls	r5, r0, #3
    560a:	0d52      	lsrs	r2, r2, #21
    560c:	2a01      	cmp	r2, #1
    560e:	dd28      	ble.n	5662 <__aeabi_d2f+0x6e>
    5610:	4a3a      	ldr	r2, [pc, #232]	; (56fc <__aeabi_d2f+0x108>)
    5612:	18a6      	adds	r6, r4, r2
    5614:	2efe      	cmp	r6, #254	; 0xfe
    5616:	dc1b      	bgt.n	5650 <__aeabi_d2f+0x5c>
    5618:	2e00      	cmp	r6, #0
    561a:	dd3e      	ble.n	569a <__aeabi_d2f+0xa6>
    561c:	0180      	lsls	r0, r0, #6
    561e:	0002      	movs	r2, r0
    5620:	1e50      	subs	r0, r2, #1
    5622:	4182      	sbcs	r2, r0
    5624:	0f6d      	lsrs	r5, r5, #29
    5626:	432a      	orrs	r2, r5
    5628:	00db      	lsls	r3, r3, #3
    562a:	4313      	orrs	r3, r2
    562c:	075a      	lsls	r2, r3, #29
    562e:	d004      	beq.n	563a <__aeabi_d2f+0x46>
    5630:	220f      	movs	r2, #15
    5632:	401a      	ands	r2, r3
    5634:	2a04      	cmp	r2, #4
    5636:	d000      	beq.n	563a <__aeabi_d2f+0x46>
    5638:	3304      	adds	r3, #4
    563a:	2280      	movs	r2, #128	; 0x80
    563c:	04d2      	lsls	r2, r2, #19
    563e:	401a      	ands	r2, r3
    5640:	d05a      	beq.n	56f8 <__aeabi_d2f+0x104>
    5642:	3601      	adds	r6, #1
    5644:	2eff      	cmp	r6, #255	; 0xff
    5646:	d003      	beq.n	5650 <__aeabi_d2f+0x5c>
    5648:	019b      	lsls	r3, r3, #6
    564a:	0a5b      	lsrs	r3, r3, #9
    564c:	b2f4      	uxtb	r4, r6
    564e:	e001      	b.n	5654 <__aeabi_d2f+0x60>
    5650:	24ff      	movs	r4, #255	; 0xff
    5652:	2300      	movs	r3, #0
    5654:	0258      	lsls	r0, r3, #9
    5656:	05e4      	lsls	r4, r4, #23
    5658:	0a40      	lsrs	r0, r0, #9
    565a:	07c9      	lsls	r1, r1, #31
    565c:	4320      	orrs	r0, r4
    565e:	4308      	orrs	r0, r1
    5660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5662:	2c00      	cmp	r4, #0
    5664:	d007      	beq.n	5676 <__aeabi_d2f+0x82>
    5666:	431d      	orrs	r5, r3
    5668:	d0f2      	beq.n	5650 <__aeabi_d2f+0x5c>
    566a:	2080      	movs	r0, #128	; 0x80
    566c:	00db      	lsls	r3, r3, #3
    566e:	0480      	lsls	r0, r0, #18
    5670:	4303      	orrs	r3, r0
    5672:	26ff      	movs	r6, #255	; 0xff
    5674:	e7da      	b.n	562c <__aeabi_d2f+0x38>
    5676:	432b      	orrs	r3, r5
    5678:	d003      	beq.n	5682 <__aeabi_d2f+0x8e>
    567a:	2305      	movs	r3, #5
    567c:	08db      	lsrs	r3, r3, #3
    567e:	2cff      	cmp	r4, #255	; 0xff
    5680:	d003      	beq.n	568a <__aeabi_d2f+0x96>
    5682:	025b      	lsls	r3, r3, #9
    5684:	0a5b      	lsrs	r3, r3, #9
    5686:	b2e4      	uxtb	r4, r4
    5688:	e7e4      	b.n	5654 <__aeabi_d2f+0x60>
    568a:	2b00      	cmp	r3, #0
    568c:	d032      	beq.n	56f4 <__aeabi_d2f+0x100>
    568e:	2080      	movs	r0, #128	; 0x80
    5690:	03c0      	lsls	r0, r0, #15
    5692:	4303      	orrs	r3, r0
    5694:	025b      	lsls	r3, r3, #9
    5696:	0a5b      	lsrs	r3, r3, #9
    5698:	e7dc      	b.n	5654 <__aeabi_d2f+0x60>
    569a:	0032      	movs	r2, r6
    569c:	3217      	adds	r2, #23
    569e:	db14      	blt.n	56ca <__aeabi_d2f+0xd6>
    56a0:	2280      	movs	r2, #128	; 0x80
    56a2:	271e      	movs	r7, #30
    56a4:	0412      	lsls	r2, r2, #16
    56a6:	4313      	orrs	r3, r2
    56a8:	1bbf      	subs	r7, r7, r6
    56aa:	2f1f      	cmp	r7, #31
    56ac:	dc0f      	bgt.n	56ce <__aeabi_d2f+0xda>
    56ae:	4a14      	ldr	r2, [pc, #80]	; (5700 <__aeabi_d2f+0x10c>)
    56b0:	4694      	mov	ip, r2
    56b2:	4464      	add	r4, ip
    56b4:	002a      	movs	r2, r5
    56b6:	40a5      	lsls	r5, r4
    56b8:	002e      	movs	r6, r5
    56ba:	40a3      	lsls	r3, r4
    56bc:	1e75      	subs	r5, r6, #1
    56be:	41ae      	sbcs	r6, r5
    56c0:	40fa      	lsrs	r2, r7
    56c2:	4333      	orrs	r3, r6
    56c4:	4313      	orrs	r3, r2
    56c6:	2600      	movs	r6, #0
    56c8:	e7b0      	b.n	562c <__aeabi_d2f+0x38>
    56ca:	2400      	movs	r4, #0
    56cc:	e7d5      	b.n	567a <__aeabi_d2f+0x86>
    56ce:	2202      	movs	r2, #2
    56d0:	4252      	negs	r2, r2
    56d2:	1b96      	subs	r6, r2, r6
    56d4:	001a      	movs	r2, r3
    56d6:	40f2      	lsrs	r2, r6
    56d8:	2f20      	cmp	r7, #32
    56da:	d009      	beq.n	56f0 <__aeabi_d2f+0xfc>
    56dc:	4809      	ldr	r0, [pc, #36]	; (5704 <__aeabi_d2f+0x110>)
    56de:	4684      	mov	ip, r0
    56e0:	4464      	add	r4, ip
    56e2:	40a3      	lsls	r3, r4
    56e4:	432b      	orrs	r3, r5
    56e6:	1e5d      	subs	r5, r3, #1
    56e8:	41ab      	sbcs	r3, r5
    56ea:	2600      	movs	r6, #0
    56ec:	4313      	orrs	r3, r2
    56ee:	e79d      	b.n	562c <__aeabi_d2f+0x38>
    56f0:	2300      	movs	r3, #0
    56f2:	e7f7      	b.n	56e4 <__aeabi_d2f+0xf0>
    56f4:	2300      	movs	r3, #0
    56f6:	e7ad      	b.n	5654 <__aeabi_d2f+0x60>
    56f8:	0034      	movs	r4, r6
    56fa:	e7bf      	b.n	567c <__aeabi_d2f+0x88>
    56fc:	fffffc80 	.word	0xfffffc80
    5700:	fffffc82 	.word	0xfffffc82
    5704:	fffffca2 	.word	0xfffffca2

00005708 <__aeabi_cdrcmple>:
    5708:	4684      	mov	ip, r0
    570a:	1c10      	adds	r0, r2, #0
    570c:	4662      	mov	r2, ip
    570e:	468c      	mov	ip, r1
    5710:	1c19      	adds	r1, r3, #0
    5712:	4663      	mov	r3, ip
    5714:	e000      	b.n	5718 <__aeabi_cdcmpeq>
    5716:	46c0      	nop			; (mov r8, r8)

00005718 <__aeabi_cdcmpeq>:
    5718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    571a:	f000 f8ef 	bl	58fc <__ledf2>
    571e:	2800      	cmp	r0, #0
    5720:	d401      	bmi.n	5726 <__aeabi_cdcmpeq+0xe>
    5722:	2100      	movs	r1, #0
    5724:	42c8      	cmn	r0, r1
    5726:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005728 <__aeabi_dcmpeq>:
    5728:	b510      	push	{r4, lr}
    572a:	f000 f849 	bl	57c0 <__eqdf2>
    572e:	4240      	negs	r0, r0
    5730:	3001      	adds	r0, #1
    5732:	bd10      	pop	{r4, pc}

00005734 <__aeabi_dcmplt>:
    5734:	b510      	push	{r4, lr}
    5736:	f000 f8e1 	bl	58fc <__ledf2>
    573a:	2800      	cmp	r0, #0
    573c:	db01      	blt.n	5742 <__aeabi_dcmplt+0xe>
    573e:	2000      	movs	r0, #0
    5740:	bd10      	pop	{r4, pc}
    5742:	2001      	movs	r0, #1
    5744:	bd10      	pop	{r4, pc}
    5746:	46c0      	nop			; (mov r8, r8)

00005748 <__aeabi_dcmple>:
    5748:	b510      	push	{r4, lr}
    574a:	f000 f8d7 	bl	58fc <__ledf2>
    574e:	2800      	cmp	r0, #0
    5750:	dd01      	ble.n	5756 <__aeabi_dcmple+0xe>
    5752:	2000      	movs	r0, #0
    5754:	bd10      	pop	{r4, pc}
    5756:	2001      	movs	r0, #1
    5758:	bd10      	pop	{r4, pc}
    575a:	46c0      	nop			; (mov r8, r8)

0000575c <__aeabi_dcmpgt>:
    575c:	b510      	push	{r4, lr}
    575e:	f000 f869 	bl	5834 <__gedf2>
    5762:	2800      	cmp	r0, #0
    5764:	dc01      	bgt.n	576a <__aeabi_dcmpgt+0xe>
    5766:	2000      	movs	r0, #0
    5768:	bd10      	pop	{r4, pc}
    576a:	2001      	movs	r0, #1
    576c:	bd10      	pop	{r4, pc}
    576e:	46c0      	nop			; (mov r8, r8)

00005770 <__aeabi_dcmpge>:
    5770:	b510      	push	{r4, lr}
    5772:	f000 f85f 	bl	5834 <__gedf2>
    5776:	2800      	cmp	r0, #0
    5778:	da01      	bge.n	577e <__aeabi_dcmpge+0xe>
    577a:	2000      	movs	r0, #0
    577c:	bd10      	pop	{r4, pc}
    577e:	2001      	movs	r0, #1
    5780:	bd10      	pop	{r4, pc}
    5782:	46c0      	nop			; (mov r8, r8)

00005784 <__clzsi2>:
    5784:	211c      	movs	r1, #28
    5786:	2301      	movs	r3, #1
    5788:	041b      	lsls	r3, r3, #16
    578a:	4298      	cmp	r0, r3
    578c:	d301      	bcc.n	5792 <__clzsi2+0xe>
    578e:	0c00      	lsrs	r0, r0, #16
    5790:	3910      	subs	r1, #16
    5792:	0a1b      	lsrs	r3, r3, #8
    5794:	4298      	cmp	r0, r3
    5796:	d301      	bcc.n	579c <__clzsi2+0x18>
    5798:	0a00      	lsrs	r0, r0, #8
    579a:	3908      	subs	r1, #8
    579c:	091b      	lsrs	r3, r3, #4
    579e:	4298      	cmp	r0, r3
    57a0:	d301      	bcc.n	57a6 <__clzsi2+0x22>
    57a2:	0900      	lsrs	r0, r0, #4
    57a4:	3904      	subs	r1, #4
    57a6:	a202      	add	r2, pc, #8	; (adr r2, 57b0 <__clzsi2+0x2c>)
    57a8:	5c10      	ldrb	r0, [r2, r0]
    57aa:	1840      	adds	r0, r0, r1
    57ac:	4770      	bx	lr
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	02020304 	.word	0x02020304
    57b4:	01010101 	.word	0x01010101
	...

000057c0 <__eqdf2>:
    57c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c2:	464f      	mov	r7, r9
    57c4:	4646      	mov	r6, r8
    57c6:	46d6      	mov	lr, sl
    57c8:	005c      	lsls	r4, r3, #1
    57ca:	b5c0      	push	{r6, r7, lr}
    57cc:	031f      	lsls	r7, r3, #12
    57ce:	0fdb      	lsrs	r3, r3, #31
    57d0:	469a      	mov	sl, r3
    57d2:	4b17      	ldr	r3, [pc, #92]	; (5830 <__eqdf2+0x70>)
    57d4:	030e      	lsls	r6, r1, #12
    57d6:	004d      	lsls	r5, r1, #1
    57d8:	4684      	mov	ip, r0
    57da:	4680      	mov	r8, r0
    57dc:	0b36      	lsrs	r6, r6, #12
    57de:	0d6d      	lsrs	r5, r5, #21
    57e0:	0fc9      	lsrs	r1, r1, #31
    57e2:	4691      	mov	r9, r2
    57e4:	0b3f      	lsrs	r7, r7, #12
    57e6:	0d64      	lsrs	r4, r4, #21
    57e8:	2001      	movs	r0, #1
    57ea:	429d      	cmp	r5, r3
    57ec:	d008      	beq.n	5800 <__eqdf2+0x40>
    57ee:	429c      	cmp	r4, r3
    57f0:	d001      	beq.n	57f6 <__eqdf2+0x36>
    57f2:	42a5      	cmp	r5, r4
    57f4:	d00b      	beq.n	580e <__eqdf2+0x4e>
    57f6:	bc1c      	pop	{r2, r3, r4}
    57f8:	4690      	mov	r8, r2
    57fa:	4699      	mov	r9, r3
    57fc:	46a2      	mov	sl, r4
    57fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5800:	4663      	mov	r3, ip
    5802:	4333      	orrs	r3, r6
    5804:	d1f7      	bne.n	57f6 <__eqdf2+0x36>
    5806:	42ac      	cmp	r4, r5
    5808:	d1f5      	bne.n	57f6 <__eqdf2+0x36>
    580a:	433a      	orrs	r2, r7
    580c:	d1f3      	bne.n	57f6 <__eqdf2+0x36>
    580e:	2001      	movs	r0, #1
    5810:	42be      	cmp	r6, r7
    5812:	d1f0      	bne.n	57f6 <__eqdf2+0x36>
    5814:	45c8      	cmp	r8, r9
    5816:	d1ee      	bne.n	57f6 <__eqdf2+0x36>
    5818:	4551      	cmp	r1, sl
    581a:	d007      	beq.n	582c <__eqdf2+0x6c>
    581c:	2d00      	cmp	r5, #0
    581e:	d1ea      	bne.n	57f6 <__eqdf2+0x36>
    5820:	4663      	mov	r3, ip
    5822:	431e      	orrs	r6, r3
    5824:	0030      	movs	r0, r6
    5826:	1e46      	subs	r6, r0, #1
    5828:	41b0      	sbcs	r0, r6
    582a:	e7e4      	b.n	57f6 <__eqdf2+0x36>
    582c:	2000      	movs	r0, #0
    582e:	e7e2      	b.n	57f6 <__eqdf2+0x36>
    5830:	000007ff 	.word	0x000007ff

00005834 <__gedf2>:
    5834:	b5f0      	push	{r4, r5, r6, r7, lr}
    5836:	4645      	mov	r5, r8
    5838:	46de      	mov	lr, fp
    583a:	4657      	mov	r7, sl
    583c:	464e      	mov	r6, r9
    583e:	b5e0      	push	{r5, r6, r7, lr}
    5840:	031f      	lsls	r7, r3, #12
    5842:	0b3d      	lsrs	r5, r7, #12
    5844:	4f2c      	ldr	r7, [pc, #176]	; (58f8 <__gedf2+0xc4>)
    5846:	030e      	lsls	r6, r1, #12
    5848:	004c      	lsls	r4, r1, #1
    584a:	46ab      	mov	fp, r5
    584c:	005d      	lsls	r5, r3, #1
    584e:	4684      	mov	ip, r0
    5850:	0b36      	lsrs	r6, r6, #12
    5852:	0d64      	lsrs	r4, r4, #21
    5854:	0fc9      	lsrs	r1, r1, #31
    5856:	4690      	mov	r8, r2
    5858:	0d6d      	lsrs	r5, r5, #21
    585a:	0fdb      	lsrs	r3, r3, #31
    585c:	42bc      	cmp	r4, r7
    585e:	d02a      	beq.n	58b6 <__gedf2+0x82>
    5860:	4f25      	ldr	r7, [pc, #148]	; (58f8 <__gedf2+0xc4>)
    5862:	42bd      	cmp	r5, r7
    5864:	d02d      	beq.n	58c2 <__gedf2+0x8e>
    5866:	2c00      	cmp	r4, #0
    5868:	d10f      	bne.n	588a <__gedf2+0x56>
    586a:	4330      	orrs	r0, r6
    586c:	0007      	movs	r7, r0
    586e:	4681      	mov	r9, r0
    5870:	4278      	negs	r0, r7
    5872:	4178      	adcs	r0, r7
    5874:	b2c0      	uxtb	r0, r0
    5876:	2d00      	cmp	r5, #0
    5878:	d117      	bne.n	58aa <__gedf2+0x76>
    587a:	465f      	mov	r7, fp
    587c:	433a      	orrs	r2, r7
    587e:	d114      	bne.n	58aa <__gedf2+0x76>
    5880:	464b      	mov	r3, r9
    5882:	2000      	movs	r0, #0
    5884:	2b00      	cmp	r3, #0
    5886:	d00a      	beq.n	589e <__gedf2+0x6a>
    5888:	e006      	b.n	5898 <__gedf2+0x64>
    588a:	2d00      	cmp	r5, #0
    588c:	d102      	bne.n	5894 <__gedf2+0x60>
    588e:	4658      	mov	r0, fp
    5890:	4302      	orrs	r2, r0
    5892:	d001      	beq.n	5898 <__gedf2+0x64>
    5894:	4299      	cmp	r1, r3
    5896:	d018      	beq.n	58ca <__gedf2+0x96>
    5898:	4248      	negs	r0, r1
    589a:	2101      	movs	r1, #1
    589c:	4308      	orrs	r0, r1
    589e:	bc3c      	pop	{r2, r3, r4, r5}
    58a0:	4690      	mov	r8, r2
    58a2:	4699      	mov	r9, r3
    58a4:	46a2      	mov	sl, r4
    58a6:	46ab      	mov	fp, r5
    58a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58aa:	2800      	cmp	r0, #0
    58ac:	d0f2      	beq.n	5894 <__gedf2+0x60>
    58ae:	2001      	movs	r0, #1
    58b0:	3b01      	subs	r3, #1
    58b2:	4318      	orrs	r0, r3
    58b4:	e7f3      	b.n	589e <__gedf2+0x6a>
    58b6:	0037      	movs	r7, r6
    58b8:	4307      	orrs	r7, r0
    58ba:	d0d1      	beq.n	5860 <__gedf2+0x2c>
    58bc:	2002      	movs	r0, #2
    58be:	4240      	negs	r0, r0
    58c0:	e7ed      	b.n	589e <__gedf2+0x6a>
    58c2:	465f      	mov	r7, fp
    58c4:	4317      	orrs	r7, r2
    58c6:	d0ce      	beq.n	5866 <__gedf2+0x32>
    58c8:	e7f8      	b.n	58bc <__gedf2+0x88>
    58ca:	42ac      	cmp	r4, r5
    58cc:	dce4      	bgt.n	5898 <__gedf2+0x64>
    58ce:	da03      	bge.n	58d8 <__gedf2+0xa4>
    58d0:	1e48      	subs	r0, r1, #1
    58d2:	2101      	movs	r1, #1
    58d4:	4308      	orrs	r0, r1
    58d6:	e7e2      	b.n	589e <__gedf2+0x6a>
    58d8:	455e      	cmp	r6, fp
    58da:	d8dd      	bhi.n	5898 <__gedf2+0x64>
    58dc:	d006      	beq.n	58ec <__gedf2+0xb8>
    58de:	2000      	movs	r0, #0
    58e0:	455e      	cmp	r6, fp
    58e2:	d2dc      	bcs.n	589e <__gedf2+0x6a>
    58e4:	2301      	movs	r3, #1
    58e6:	1e48      	subs	r0, r1, #1
    58e8:	4318      	orrs	r0, r3
    58ea:	e7d8      	b.n	589e <__gedf2+0x6a>
    58ec:	45c4      	cmp	ip, r8
    58ee:	d8d3      	bhi.n	5898 <__gedf2+0x64>
    58f0:	2000      	movs	r0, #0
    58f2:	45c4      	cmp	ip, r8
    58f4:	d3f6      	bcc.n	58e4 <__gedf2+0xb0>
    58f6:	e7d2      	b.n	589e <__gedf2+0x6a>
    58f8:	000007ff 	.word	0x000007ff

000058fc <__ledf2>:
    58fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58fe:	464e      	mov	r6, r9
    5900:	4645      	mov	r5, r8
    5902:	46de      	mov	lr, fp
    5904:	4657      	mov	r7, sl
    5906:	005c      	lsls	r4, r3, #1
    5908:	b5e0      	push	{r5, r6, r7, lr}
    590a:	031f      	lsls	r7, r3, #12
    590c:	0fdb      	lsrs	r3, r3, #31
    590e:	4699      	mov	r9, r3
    5910:	4b2a      	ldr	r3, [pc, #168]	; (59bc <__ledf2+0xc0>)
    5912:	030e      	lsls	r6, r1, #12
    5914:	004d      	lsls	r5, r1, #1
    5916:	0fc9      	lsrs	r1, r1, #31
    5918:	4684      	mov	ip, r0
    591a:	0b36      	lsrs	r6, r6, #12
    591c:	0d6d      	lsrs	r5, r5, #21
    591e:	468b      	mov	fp, r1
    5920:	4690      	mov	r8, r2
    5922:	0b3f      	lsrs	r7, r7, #12
    5924:	0d64      	lsrs	r4, r4, #21
    5926:	429d      	cmp	r5, r3
    5928:	d020      	beq.n	596c <__ledf2+0x70>
    592a:	4b24      	ldr	r3, [pc, #144]	; (59bc <__ledf2+0xc0>)
    592c:	429c      	cmp	r4, r3
    592e:	d022      	beq.n	5976 <__ledf2+0x7a>
    5930:	2d00      	cmp	r5, #0
    5932:	d112      	bne.n	595a <__ledf2+0x5e>
    5934:	4330      	orrs	r0, r6
    5936:	4243      	negs	r3, r0
    5938:	4143      	adcs	r3, r0
    593a:	b2db      	uxtb	r3, r3
    593c:	2c00      	cmp	r4, #0
    593e:	d01f      	beq.n	5980 <__ledf2+0x84>
    5940:	2b00      	cmp	r3, #0
    5942:	d00c      	beq.n	595e <__ledf2+0x62>
    5944:	464b      	mov	r3, r9
    5946:	2001      	movs	r0, #1
    5948:	3b01      	subs	r3, #1
    594a:	4303      	orrs	r3, r0
    594c:	0018      	movs	r0, r3
    594e:	bc3c      	pop	{r2, r3, r4, r5}
    5950:	4690      	mov	r8, r2
    5952:	4699      	mov	r9, r3
    5954:	46a2      	mov	sl, r4
    5956:	46ab      	mov	fp, r5
    5958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    595a:	2c00      	cmp	r4, #0
    595c:	d016      	beq.n	598c <__ledf2+0x90>
    595e:	45cb      	cmp	fp, r9
    5960:	d017      	beq.n	5992 <__ledf2+0x96>
    5962:	465b      	mov	r3, fp
    5964:	4259      	negs	r1, r3
    5966:	2301      	movs	r3, #1
    5968:	430b      	orrs	r3, r1
    596a:	e7ef      	b.n	594c <__ledf2+0x50>
    596c:	0031      	movs	r1, r6
    596e:	2302      	movs	r3, #2
    5970:	4301      	orrs	r1, r0
    5972:	d1eb      	bne.n	594c <__ledf2+0x50>
    5974:	e7d9      	b.n	592a <__ledf2+0x2e>
    5976:	0039      	movs	r1, r7
    5978:	2302      	movs	r3, #2
    597a:	4311      	orrs	r1, r2
    597c:	d1e6      	bne.n	594c <__ledf2+0x50>
    597e:	e7d7      	b.n	5930 <__ledf2+0x34>
    5980:	433a      	orrs	r2, r7
    5982:	d1dd      	bne.n	5940 <__ledf2+0x44>
    5984:	2300      	movs	r3, #0
    5986:	2800      	cmp	r0, #0
    5988:	d0e0      	beq.n	594c <__ledf2+0x50>
    598a:	e7ea      	b.n	5962 <__ledf2+0x66>
    598c:	433a      	orrs	r2, r7
    598e:	d1e6      	bne.n	595e <__ledf2+0x62>
    5990:	e7e7      	b.n	5962 <__ledf2+0x66>
    5992:	42a5      	cmp	r5, r4
    5994:	dce5      	bgt.n	5962 <__ledf2+0x66>
    5996:	db05      	blt.n	59a4 <__ledf2+0xa8>
    5998:	42be      	cmp	r6, r7
    599a:	d8e2      	bhi.n	5962 <__ledf2+0x66>
    599c:	d007      	beq.n	59ae <__ledf2+0xb2>
    599e:	2300      	movs	r3, #0
    59a0:	42be      	cmp	r6, r7
    59a2:	d2d3      	bcs.n	594c <__ledf2+0x50>
    59a4:	4659      	mov	r1, fp
    59a6:	2301      	movs	r3, #1
    59a8:	3901      	subs	r1, #1
    59aa:	430b      	orrs	r3, r1
    59ac:	e7ce      	b.n	594c <__ledf2+0x50>
    59ae:	45c4      	cmp	ip, r8
    59b0:	d8d7      	bhi.n	5962 <__ledf2+0x66>
    59b2:	2300      	movs	r3, #0
    59b4:	45c4      	cmp	ip, r8
    59b6:	d3f5      	bcc.n	59a4 <__ledf2+0xa8>
    59b8:	e7c8      	b.n	594c <__ledf2+0x50>
    59ba:	46c0      	nop			; (mov r8, r8)
    59bc:	000007ff 	.word	0x000007ff

000059c0 <atoi>:
    59c0:	b510      	push	{r4, lr}
    59c2:	220a      	movs	r2, #10
    59c4:	2100      	movs	r1, #0
    59c6:	f001 f80d 	bl	69e4 <strtol>
    59ca:	bd10      	pop	{r4, pc}

000059cc <__libc_init_array>:
    59cc:	b570      	push	{r4, r5, r6, lr}
    59ce:	2600      	movs	r6, #0
    59d0:	4d0c      	ldr	r5, [pc, #48]	; (5a04 <__libc_init_array+0x38>)
    59d2:	4c0d      	ldr	r4, [pc, #52]	; (5a08 <__libc_init_array+0x3c>)
    59d4:	1b64      	subs	r4, r4, r5
    59d6:	10a4      	asrs	r4, r4, #2
    59d8:	42a6      	cmp	r6, r4
    59da:	d109      	bne.n	59f0 <__libc_init_array+0x24>
    59dc:	2600      	movs	r6, #0
    59de:	f002 fbeb 	bl	81b8 <_init>
    59e2:	4d0a      	ldr	r5, [pc, #40]	; (5a0c <__libc_init_array+0x40>)
    59e4:	4c0a      	ldr	r4, [pc, #40]	; (5a10 <__libc_init_array+0x44>)
    59e6:	1b64      	subs	r4, r4, r5
    59e8:	10a4      	asrs	r4, r4, #2
    59ea:	42a6      	cmp	r6, r4
    59ec:	d105      	bne.n	59fa <__libc_init_array+0x2e>
    59ee:	bd70      	pop	{r4, r5, r6, pc}
    59f0:	00b3      	lsls	r3, r6, #2
    59f2:	58eb      	ldr	r3, [r5, r3]
    59f4:	4798      	blx	r3
    59f6:	3601      	adds	r6, #1
    59f8:	e7ee      	b.n	59d8 <__libc_init_array+0xc>
    59fa:	00b3      	lsls	r3, r6, #2
    59fc:	58eb      	ldr	r3, [r5, r3]
    59fe:	4798      	blx	r3
    5a00:	3601      	adds	r6, #1
    5a02:	e7f2      	b.n	59ea <__libc_init_array+0x1e>
    5a04:	000081c4 	.word	0x000081c4
    5a08:	000081c4 	.word	0x000081c4
    5a0c:	000081c4 	.word	0x000081c4
    5a10:	000081c8 	.word	0x000081c8

00005a14 <__itoa>:
    5a14:	1e93      	subs	r3, r2, #2
    5a16:	b510      	push	{r4, lr}
    5a18:	000c      	movs	r4, r1
    5a1a:	2b22      	cmp	r3, #34	; 0x22
    5a1c:	d904      	bls.n	5a28 <__itoa+0x14>
    5a1e:	2300      	movs	r3, #0
    5a20:	001c      	movs	r4, r3
    5a22:	700b      	strb	r3, [r1, #0]
    5a24:	0020      	movs	r0, r4
    5a26:	bd10      	pop	{r4, pc}
    5a28:	2a0a      	cmp	r2, #10
    5a2a:	d109      	bne.n	5a40 <__itoa+0x2c>
    5a2c:	2800      	cmp	r0, #0
    5a2e:	da07      	bge.n	5a40 <__itoa+0x2c>
    5a30:	232d      	movs	r3, #45	; 0x2d
    5a32:	700b      	strb	r3, [r1, #0]
    5a34:	2101      	movs	r1, #1
    5a36:	4240      	negs	r0, r0
    5a38:	1861      	adds	r1, r4, r1
    5a3a:	f000 ffe7 	bl	6a0c <__utoa>
    5a3e:	e7f1      	b.n	5a24 <__itoa+0x10>
    5a40:	2100      	movs	r1, #0
    5a42:	e7f9      	b.n	5a38 <__itoa+0x24>

00005a44 <itoa>:
    5a44:	b510      	push	{r4, lr}
    5a46:	f7ff ffe5 	bl	5a14 <__itoa>
    5a4a:	bd10      	pop	{r4, pc}

00005a4c <malloc>:
    5a4c:	b510      	push	{r4, lr}
    5a4e:	4b03      	ldr	r3, [pc, #12]	; (5a5c <malloc+0x10>)
    5a50:	0001      	movs	r1, r0
    5a52:	6818      	ldr	r0, [r3, #0]
    5a54:	f000 f816 	bl	5a84 <_malloc_r>
    5a58:	bd10      	pop	{r4, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	200000e0 	.word	0x200000e0

00005a60 <memcpy>:
    5a60:	2300      	movs	r3, #0
    5a62:	b510      	push	{r4, lr}
    5a64:	429a      	cmp	r2, r3
    5a66:	d100      	bne.n	5a6a <memcpy+0xa>
    5a68:	bd10      	pop	{r4, pc}
    5a6a:	5ccc      	ldrb	r4, [r1, r3]
    5a6c:	54c4      	strb	r4, [r0, r3]
    5a6e:	3301      	adds	r3, #1
    5a70:	e7f8      	b.n	5a64 <memcpy+0x4>

00005a72 <memset>:
    5a72:	0003      	movs	r3, r0
    5a74:	1882      	adds	r2, r0, r2
    5a76:	4293      	cmp	r3, r2
    5a78:	d100      	bne.n	5a7c <memset+0xa>
    5a7a:	4770      	bx	lr
    5a7c:	7019      	strb	r1, [r3, #0]
    5a7e:	3301      	adds	r3, #1
    5a80:	e7f9      	b.n	5a76 <memset+0x4>
	...

00005a84 <_malloc_r>:
    5a84:	2303      	movs	r3, #3
    5a86:	b570      	push	{r4, r5, r6, lr}
    5a88:	1ccd      	adds	r5, r1, #3
    5a8a:	439d      	bics	r5, r3
    5a8c:	3508      	adds	r5, #8
    5a8e:	0006      	movs	r6, r0
    5a90:	2d0c      	cmp	r5, #12
    5a92:	d21e      	bcs.n	5ad2 <_malloc_r+0x4e>
    5a94:	250c      	movs	r5, #12
    5a96:	42a9      	cmp	r1, r5
    5a98:	d81d      	bhi.n	5ad6 <_malloc_r+0x52>
    5a9a:	0030      	movs	r0, r6
    5a9c:	f001 fb40 	bl	7120 <__malloc_lock>
    5aa0:	4a25      	ldr	r2, [pc, #148]	; (5b38 <_malloc_r+0xb4>)
    5aa2:	6814      	ldr	r4, [r2, #0]
    5aa4:	0021      	movs	r1, r4
    5aa6:	2900      	cmp	r1, #0
    5aa8:	d119      	bne.n	5ade <_malloc_r+0x5a>
    5aaa:	4c24      	ldr	r4, [pc, #144]	; (5b3c <_malloc_r+0xb8>)
    5aac:	6823      	ldr	r3, [r4, #0]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d103      	bne.n	5aba <_malloc_r+0x36>
    5ab2:	0030      	movs	r0, r6
    5ab4:	f000 f844 	bl	5b40 <_sbrk_r>
    5ab8:	6020      	str	r0, [r4, #0]
    5aba:	0029      	movs	r1, r5
    5abc:	0030      	movs	r0, r6
    5abe:	f000 f83f 	bl	5b40 <_sbrk_r>
    5ac2:	1c43      	adds	r3, r0, #1
    5ac4:	d12c      	bne.n	5b20 <_malloc_r+0x9c>
    5ac6:	230c      	movs	r3, #12
    5ac8:	0030      	movs	r0, r6
    5aca:	6033      	str	r3, [r6, #0]
    5acc:	f001 fb29 	bl	7122 <__malloc_unlock>
    5ad0:	e003      	b.n	5ada <_malloc_r+0x56>
    5ad2:	2d00      	cmp	r5, #0
    5ad4:	dadf      	bge.n	5a96 <_malloc_r+0x12>
    5ad6:	230c      	movs	r3, #12
    5ad8:	6033      	str	r3, [r6, #0]
    5ada:	2000      	movs	r0, #0
    5adc:	bd70      	pop	{r4, r5, r6, pc}
    5ade:	680b      	ldr	r3, [r1, #0]
    5ae0:	1b5b      	subs	r3, r3, r5
    5ae2:	d41a      	bmi.n	5b1a <_malloc_r+0x96>
    5ae4:	2b0b      	cmp	r3, #11
    5ae6:	d903      	bls.n	5af0 <_malloc_r+0x6c>
    5ae8:	600b      	str	r3, [r1, #0]
    5aea:	18cc      	adds	r4, r1, r3
    5aec:	6025      	str	r5, [r4, #0]
    5aee:	e003      	b.n	5af8 <_malloc_r+0x74>
    5af0:	428c      	cmp	r4, r1
    5af2:	d10e      	bne.n	5b12 <_malloc_r+0x8e>
    5af4:	6863      	ldr	r3, [r4, #4]
    5af6:	6013      	str	r3, [r2, #0]
    5af8:	0030      	movs	r0, r6
    5afa:	f001 fb12 	bl	7122 <__malloc_unlock>
    5afe:	0020      	movs	r0, r4
    5b00:	2207      	movs	r2, #7
    5b02:	300b      	adds	r0, #11
    5b04:	1d23      	adds	r3, r4, #4
    5b06:	4390      	bics	r0, r2
    5b08:	1ac3      	subs	r3, r0, r3
    5b0a:	d0e7      	beq.n	5adc <_malloc_r+0x58>
    5b0c:	425a      	negs	r2, r3
    5b0e:	50e2      	str	r2, [r4, r3]
    5b10:	e7e4      	b.n	5adc <_malloc_r+0x58>
    5b12:	684b      	ldr	r3, [r1, #4]
    5b14:	6063      	str	r3, [r4, #4]
    5b16:	000c      	movs	r4, r1
    5b18:	e7ee      	b.n	5af8 <_malloc_r+0x74>
    5b1a:	000c      	movs	r4, r1
    5b1c:	6849      	ldr	r1, [r1, #4]
    5b1e:	e7c2      	b.n	5aa6 <_malloc_r+0x22>
    5b20:	2303      	movs	r3, #3
    5b22:	1cc4      	adds	r4, r0, #3
    5b24:	439c      	bics	r4, r3
    5b26:	42a0      	cmp	r0, r4
    5b28:	d0e0      	beq.n	5aec <_malloc_r+0x68>
    5b2a:	1a21      	subs	r1, r4, r0
    5b2c:	0030      	movs	r0, r6
    5b2e:	f000 f807 	bl	5b40 <_sbrk_r>
    5b32:	1c43      	adds	r3, r0, #1
    5b34:	d1da      	bne.n	5aec <_malloc_r+0x68>
    5b36:	e7c6      	b.n	5ac6 <_malloc_r+0x42>
    5b38:	200005d0 	.word	0x200005d0
    5b3c:	200005d4 	.word	0x200005d4

00005b40 <_sbrk_r>:
    5b40:	2300      	movs	r3, #0
    5b42:	b570      	push	{r4, r5, r6, lr}
    5b44:	4c06      	ldr	r4, [pc, #24]	; (5b60 <_sbrk_r+0x20>)
    5b46:	0005      	movs	r5, r0
    5b48:	0008      	movs	r0, r1
    5b4a:	6023      	str	r3, [r4, #0]
    5b4c:	f7fa fb46 	bl	1dc <_sbrk>
    5b50:	1c43      	adds	r3, r0, #1
    5b52:	d103      	bne.n	5b5c <_sbrk_r+0x1c>
    5b54:	6823      	ldr	r3, [r4, #0]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d000      	beq.n	5b5c <_sbrk_r+0x1c>
    5b5a:	602b      	str	r3, [r5, #0]
    5b5c:	bd70      	pop	{r4, r5, r6, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	200006c0 	.word	0x200006c0

00005b64 <strcat>:
    5b64:	0002      	movs	r2, r0
    5b66:	b510      	push	{r4, lr}
    5b68:	7813      	ldrb	r3, [r2, #0]
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d105      	bne.n	5b7a <strcat+0x16>
    5b6e:	5ccc      	ldrb	r4, [r1, r3]
    5b70:	54d4      	strb	r4, [r2, r3]
    5b72:	3301      	adds	r3, #1
    5b74:	2c00      	cmp	r4, #0
    5b76:	d1fa      	bne.n	5b6e <strcat+0xa>
    5b78:	bd10      	pop	{r4, pc}
    5b7a:	3201      	adds	r2, #1
    5b7c:	e7f4      	b.n	5b68 <strcat+0x4>

00005b7e <strlen>:
    5b7e:	2300      	movs	r3, #0
    5b80:	5cc2      	ldrb	r2, [r0, r3]
    5b82:	3301      	adds	r3, #1
    5b84:	2a00      	cmp	r2, #0
    5b86:	d1fb      	bne.n	5b80 <strlen+0x2>
    5b88:	1e58      	subs	r0, r3, #1
    5b8a:	4770      	bx	lr

00005b8c <strncasecmp>:
    5b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b8e:	0005      	movs	r5, r0
    5b90:	000f      	movs	r7, r1
    5b92:	1883      	adds	r3, r0, r2
    5b94:	9301      	str	r3, [sp, #4]
    5b96:	9b01      	ldr	r3, [sp, #4]
    5b98:	429d      	cmp	r5, r3
    5b9a:	d019      	beq.n	5bd0 <strncasecmp+0x44>
    5b9c:	782c      	ldrb	r4, [r5, #0]
    5b9e:	f001 fa9d 	bl	70dc <__locale_ctype_ptr>
    5ba2:	2203      	movs	r2, #3
    5ba4:	1900      	adds	r0, r0, r4
    5ba6:	7843      	ldrb	r3, [r0, #1]
    5ba8:	4013      	ands	r3, r2
    5baa:	2b01      	cmp	r3, #1
    5bac:	d100      	bne.n	5bb0 <strncasecmp+0x24>
    5bae:	3420      	adds	r4, #32
    5bb0:	783e      	ldrb	r6, [r7, #0]
    5bb2:	f001 fa93 	bl	70dc <__locale_ctype_ptr>
    5bb6:	2203      	movs	r2, #3
    5bb8:	1980      	adds	r0, r0, r6
    5bba:	7843      	ldrb	r3, [r0, #1]
    5bbc:	4013      	ands	r3, r2
    5bbe:	2b01      	cmp	r3, #1
    5bc0:	d100      	bne.n	5bc4 <strncasecmp+0x38>
    5bc2:	3620      	adds	r6, #32
    5bc4:	1ba0      	subs	r0, r4, r6
    5bc6:	d104      	bne.n	5bd2 <strncasecmp+0x46>
    5bc8:	3501      	adds	r5, #1
    5bca:	3701      	adds	r7, #1
    5bcc:	2e00      	cmp	r6, #0
    5bce:	d1e2      	bne.n	5b96 <strncasecmp+0xa>
    5bd0:	2000      	movs	r0, #0
    5bd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005bd4 <strrchr>:
    5bd4:	b570      	push	{r4, r5, r6, lr}
    5bd6:	000d      	movs	r5, r1
    5bd8:	2400      	movs	r4, #0
    5bda:	2900      	cmp	r1, #0
    5bdc:	d105      	bne.n	5bea <strrchr+0x16>
    5bde:	f001 fea7 	bl	7930 <strchr>
    5be2:	0004      	movs	r4, r0
    5be4:	e006      	b.n	5bf4 <strrchr+0x20>
    5be6:	001c      	movs	r4, r3
    5be8:	1c58      	adds	r0, r3, #1
    5bea:	0029      	movs	r1, r5
    5bec:	f001 fea0 	bl	7930 <strchr>
    5bf0:	1e03      	subs	r3, r0, #0
    5bf2:	d1f8      	bne.n	5be6 <strrchr+0x12>
    5bf4:	0020      	movs	r0, r4
    5bf6:	bd70      	pop	{r4, r5, r6, pc}

00005bf8 <sulp>:
    5bf8:	b570      	push	{r4, r5, r6, lr}
    5bfa:	0016      	movs	r6, r2
    5bfc:	000d      	movs	r5, r1
    5bfe:	f001 fd5f 	bl	76c0 <__ulp>
    5c02:	2e00      	cmp	r6, #0
    5c04:	d00d      	beq.n	5c22 <sulp+0x2a>
    5c06:	236b      	movs	r3, #107	; 0x6b
    5c08:	006a      	lsls	r2, r5, #1
    5c0a:	0d52      	lsrs	r2, r2, #21
    5c0c:	1a9b      	subs	r3, r3, r2
    5c0e:	2b00      	cmp	r3, #0
    5c10:	dd07      	ble.n	5c22 <sulp+0x2a>
    5c12:	2400      	movs	r4, #0
    5c14:	4a03      	ldr	r2, [pc, #12]	; (5c24 <sulp+0x2c>)
    5c16:	051b      	lsls	r3, r3, #20
    5c18:	189d      	adds	r5, r3, r2
    5c1a:	002b      	movs	r3, r5
    5c1c:	0022      	movs	r2, r4
    5c1e:	f7fe fe8b 	bl	4938 <__aeabi_dmul>
    5c22:	bd70      	pop	{r4, r5, r6, pc}
    5c24:	3ff00000 	.word	0x3ff00000

00005c28 <_strtod_l>:
    5c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2a:	b0a5      	sub	sp, #148	; 0x94
    5c2c:	9307      	str	r3, [sp, #28]
    5c2e:	2300      	movs	r3, #0
    5c30:	9004      	str	r0, [sp, #16]
    5c32:	9807      	ldr	r0, [sp, #28]
    5c34:	9320      	str	r3, [sp, #128]	; 0x80
    5c36:	9106      	str	r1, [sp, #24]
    5c38:	921a      	str	r2, [sp, #104]	; 0x68
    5c3a:	f001 fa5d 	bl	70f8 <__localeconv_l>
    5c3e:	0005      	movs	r5, r0
    5c40:	6800      	ldr	r0, [r0, #0]
    5c42:	f7ff ff9c 	bl	5b7e <strlen>
    5c46:	2600      	movs	r6, #0
    5c48:	2700      	movs	r7, #0
    5c4a:	9b06      	ldr	r3, [sp, #24]
    5c4c:	9005      	str	r0, [sp, #20]
    5c4e:	931f      	str	r3, [sp, #124]	; 0x7c
    5c50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5c52:	781a      	ldrb	r2, [r3, #0]
    5c54:	2a0d      	cmp	r2, #13
    5c56:	d839      	bhi.n	5ccc <_strtod_l+0xa4>
    5c58:	2a09      	cmp	r2, #9
    5c5a:	d23d      	bcs.n	5cd8 <_strtod_l+0xb0>
    5c5c:	2a00      	cmp	r2, #0
    5c5e:	d044      	beq.n	5cea <_strtod_l+0xc2>
    5c60:	2300      	movs	r3, #0
    5c62:	9312      	str	r3, [sp, #72]	; 0x48
    5c64:	2200      	movs	r2, #0
    5c66:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    5c68:	920c      	str	r2, [sp, #48]	; 0x30
    5c6a:	7823      	ldrb	r3, [r4, #0]
    5c6c:	2b30      	cmp	r3, #48	; 0x30
    5c6e:	d000      	beq.n	5c72 <_strtod_l+0x4a>
    5c70:	e07e      	b.n	5d70 <_strtod_l+0x148>
    5c72:	7863      	ldrb	r3, [r4, #1]
    5c74:	2b58      	cmp	r3, #88	; 0x58
    5c76:	d002      	beq.n	5c7e <_strtod_l+0x56>
    5c78:	2b78      	cmp	r3, #120	; 0x78
    5c7a:	d000      	beq.n	5c7e <_strtod_l+0x56>
    5c7c:	e06e      	b.n	5d5c <_strtod_l+0x134>
    5c7e:	9b07      	ldr	r3, [sp, #28]
    5c80:	4ab7      	ldr	r2, [pc, #732]	; (5f60 <_strtod_l+0x338>)
    5c82:	9302      	str	r3, [sp, #8]
    5c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5c86:	a91f      	add	r1, sp, #124	; 0x7c
    5c88:	9301      	str	r3, [sp, #4]
    5c8a:	ab20      	add	r3, sp, #128	; 0x80
    5c8c:	9300      	str	r3, [sp, #0]
    5c8e:	9804      	ldr	r0, [sp, #16]
    5c90:	ab21      	add	r3, sp, #132	; 0x84
    5c92:	f000 ff3c 	bl	6b0e <__gethex>
    5c96:	2507      	movs	r5, #7
    5c98:	9005      	str	r0, [sp, #20]
    5c9a:	4005      	ands	r5, r0
    5c9c:	d005      	beq.n	5caa <_strtod_l+0x82>
    5c9e:	2d06      	cmp	r5, #6
    5ca0:	d12f      	bne.n	5d02 <_strtod_l+0xda>
    5ca2:	2300      	movs	r3, #0
    5ca4:	3401      	adds	r4, #1
    5ca6:	941f      	str	r4, [sp, #124]	; 0x7c
    5ca8:	9312      	str	r3, [sp, #72]	; 0x48
    5caa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5cac:	2b00      	cmp	r3, #0
    5cae:	d002      	beq.n	5cb6 <_strtod_l+0x8e>
    5cb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5cb2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5cb4:	601a      	str	r2, [r3, #0]
    5cb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d01d      	beq.n	5cf8 <_strtod_l+0xd0>
    5cbc:	2380      	movs	r3, #128	; 0x80
    5cbe:	0032      	movs	r2, r6
    5cc0:	061b      	lsls	r3, r3, #24
    5cc2:	18fb      	adds	r3, r7, r3
    5cc4:	0010      	movs	r0, r2
    5cc6:	0019      	movs	r1, r3
    5cc8:	b025      	add	sp, #148	; 0x94
    5cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ccc:	2a2b      	cmp	r2, #43	; 0x2b
    5cce:	d005      	beq.n	5cdc <_strtod_l+0xb4>
    5cd0:	2a2d      	cmp	r2, #45	; 0x2d
    5cd2:	d014      	beq.n	5cfe <_strtod_l+0xd6>
    5cd4:	2a20      	cmp	r2, #32
    5cd6:	d1c3      	bne.n	5c60 <_strtod_l+0x38>
    5cd8:	3301      	adds	r3, #1
    5cda:	e7b8      	b.n	5c4e <_strtod_l+0x26>
    5cdc:	2200      	movs	r2, #0
    5cde:	9212      	str	r2, [sp, #72]	; 0x48
    5ce0:	1c5a      	adds	r2, r3, #1
    5ce2:	921f      	str	r2, [sp, #124]	; 0x7c
    5ce4:	785b      	ldrb	r3, [r3, #1]
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d1bc      	bne.n	5c64 <_strtod_l+0x3c>
    5cea:	9b06      	ldr	r3, [sp, #24]
    5cec:	931f      	str	r3, [sp, #124]	; 0x7c
    5cee:	2300      	movs	r3, #0
    5cf0:	9312      	str	r3, [sp, #72]	; 0x48
    5cf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d1db      	bne.n	5cb0 <_strtod_l+0x88>
    5cf8:	0032      	movs	r2, r6
    5cfa:	003b      	movs	r3, r7
    5cfc:	e7e2      	b.n	5cc4 <_strtod_l+0x9c>
    5cfe:	2201      	movs	r2, #1
    5d00:	e7ed      	b.n	5cde <_strtod_l+0xb6>
    5d02:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5d04:	2a00      	cmp	r2, #0
    5d06:	d007      	beq.n	5d18 <_strtod_l+0xf0>
    5d08:	2135      	movs	r1, #53	; 0x35
    5d0a:	a822      	add	r0, sp, #136	; 0x88
    5d0c:	f001 fdc5 	bl	789a <__copybits>
    5d10:	9920      	ldr	r1, [sp, #128]	; 0x80
    5d12:	9804      	ldr	r0, [sp, #16]
    5d14:	f001 fa3e 	bl	7194 <_Bfree>
    5d18:	1e68      	subs	r0, r5, #1
    5d1a:	2804      	cmp	r0, #4
    5d1c:	d806      	bhi.n	5d2c <_strtod_l+0x104>
    5d1e:	f001 fe33 	bl	7988 <__gnu_thumb1_case_uqi>
    5d22:	030c      	.short	0x030c
    5d24:	1917      	.short	0x1917
    5d26:	0c          	.byte	0x0c
    5d27:	00          	.byte	0x00
    5d28:	9e22      	ldr	r6, [sp, #136]	; 0x88
    5d2a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    5d2c:	9b05      	ldr	r3, [sp, #20]
    5d2e:	071b      	lsls	r3, r3, #28
    5d30:	d5bb      	bpl.n	5caa <_strtod_l+0x82>
    5d32:	2380      	movs	r3, #128	; 0x80
    5d34:	061b      	lsls	r3, r3, #24
    5d36:	431f      	orrs	r7, r3
    5d38:	e7b7      	b.n	5caa <_strtod_l+0x82>
    5d3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5d3c:	4a89      	ldr	r2, [pc, #548]	; (5f64 <_strtod_l+0x33c>)
    5d3e:	498a      	ldr	r1, [pc, #552]	; (5f68 <_strtod_l+0x340>)
    5d40:	401a      	ands	r2, r3
    5d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5d44:	9e22      	ldr	r6, [sp, #136]	; 0x88
    5d46:	185b      	adds	r3, r3, r1
    5d48:	051b      	lsls	r3, r3, #20
    5d4a:	431a      	orrs	r2, r3
    5d4c:	0017      	movs	r7, r2
    5d4e:	e7ed      	b.n	5d2c <_strtod_l+0x104>
    5d50:	4f86      	ldr	r7, [pc, #536]	; (5f6c <_strtod_l+0x344>)
    5d52:	e7eb      	b.n	5d2c <_strtod_l+0x104>
    5d54:	2601      	movs	r6, #1
    5d56:	4f86      	ldr	r7, [pc, #536]	; (5f70 <_strtod_l+0x348>)
    5d58:	4276      	negs	r6, r6
    5d5a:	e7e7      	b.n	5d2c <_strtod_l+0x104>
    5d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5d5e:	1c5a      	adds	r2, r3, #1
    5d60:	921f      	str	r2, [sp, #124]	; 0x7c
    5d62:	785b      	ldrb	r3, [r3, #1]
    5d64:	2b30      	cmp	r3, #48	; 0x30
    5d66:	d0f9      	beq.n	5d5c <_strtod_l+0x134>
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d09e      	beq.n	5caa <_strtod_l+0x82>
    5d6c:	2301      	movs	r3, #1
    5d6e:	930c      	str	r3, [sp, #48]	; 0x30
    5d70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5d72:	220a      	movs	r2, #10
    5d74:	9313      	str	r3, [sp, #76]	; 0x4c
    5d76:	2300      	movs	r3, #0
    5d78:	930b      	str	r3, [sp, #44]	; 0x2c
    5d7a:	930a      	str	r3, [sp, #40]	; 0x28
    5d7c:	9308      	str	r3, [sp, #32]
    5d7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    5d80:	7804      	ldrb	r4, [r0, #0]
    5d82:	0023      	movs	r3, r4
    5d84:	3b30      	subs	r3, #48	; 0x30
    5d86:	b2d9      	uxtb	r1, r3
    5d88:	2909      	cmp	r1, #9
    5d8a:	d926      	bls.n	5dda <_strtod_l+0x1b2>
    5d8c:	9a05      	ldr	r2, [sp, #20]
    5d8e:	6829      	ldr	r1, [r5, #0]
    5d90:	f001 fddc 	bl	794c <strncmp>
    5d94:	2800      	cmp	r0, #0
    5d96:	d032      	beq.n	5dfe <_strtod_l+0x1d6>
    5d98:	2000      	movs	r0, #0
    5d9a:	0023      	movs	r3, r4
    5d9c:	4684      	mov	ip, r0
    5d9e:	9a08      	ldr	r2, [sp, #32]
    5da0:	9007      	str	r0, [sp, #28]
    5da2:	9205      	str	r2, [sp, #20]
    5da4:	2220      	movs	r2, #32
    5da6:	0019      	movs	r1, r3
    5da8:	4391      	bics	r1, r2
    5daa:	000a      	movs	r2, r1
    5dac:	2100      	movs	r1, #0
    5dae:	2a45      	cmp	r2, #69	; 0x45
    5db0:	d000      	beq.n	5db4 <_strtod_l+0x18c>
    5db2:	e0a8      	b.n	5f06 <_strtod_l+0x2de>
    5db4:	9b05      	ldr	r3, [sp, #20]
    5db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5db8:	4303      	orrs	r3, r0
    5dba:	4313      	orrs	r3, r2
    5dbc:	428b      	cmp	r3, r1
    5dbe:	d094      	beq.n	5cea <_strtod_l+0xc2>
    5dc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5dc2:	9306      	str	r3, [sp, #24]
    5dc4:	3301      	adds	r3, #1
    5dc6:	931f      	str	r3, [sp, #124]	; 0x7c
    5dc8:	9b06      	ldr	r3, [sp, #24]
    5dca:	785b      	ldrb	r3, [r3, #1]
    5dcc:	2b2b      	cmp	r3, #43	; 0x2b
    5dce:	d072      	beq.n	5eb6 <_strtod_l+0x28e>
    5dd0:	000c      	movs	r4, r1
    5dd2:	2b2d      	cmp	r3, #45	; 0x2d
    5dd4:	d175      	bne.n	5ec2 <_strtod_l+0x29a>
    5dd6:	2401      	movs	r4, #1
    5dd8:	e06e      	b.n	5eb8 <_strtod_l+0x290>
    5dda:	9908      	ldr	r1, [sp, #32]
    5ddc:	2908      	cmp	r1, #8
    5dde:	dc09      	bgt.n	5df4 <_strtod_l+0x1cc>
    5de0:	990a      	ldr	r1, [sp, #40]	; 0x28
    5de2:	4351      	muls	r1, r2
    5de4:	185b      	adds	r3, r3, r1
    5de6:	930a      	str	r3, [sp, #40]	; 0x28
    5de8:	9b08      	ldr	r3, [sp, #32]
    5dea:	3001      	adds	r0, #1
    5dec:	3301      	adds	r3, #1
    5dee:	9308      	str	r3, [sp, #32]
    5df0:	901f      	str	r0, [sp, #124]	; 0x7c
    5df2:	e7c4      	b.n	5d7e <_strtod_l+0x156>
    5df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5df6:	4351      	muls	r1, r2
    5df8:	185b      	adds	r3, r3, r1
    5dfa:	930b      	str	r3, [sp, #44]	; 0x2c
    5dfc:	e7f4      	b.n	5de8 <_strtod_l+0x1c0>
    5dfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5e00:	9b05      	ldr	r3, [sp, #20]
    5e02:	4694      	mov	ip, r2
    5e04:	9a08      	ldr	r2, [sp, #32]
    5e06:	4463      	add	r3, ip
    5e08:	931f      	str	r3, [sp, #124]	; 0x7c
    5e0a:	781b      	ldrb	r3, [r3, #0]
    5e0c:	2a00      	cmp	r2, #0
    5e0e:	d149      	bne.n	5ea4 <_strtod_l+0x27c>
    5e10:	0010      	movs	r0, r2
    5e12:	2b30      	cmp	r3, #48	; 0x30
    5e14:	d028      	beq.n	5e68 <_strtod_l+0x240>
    5e16:	001a      	movs	r2, r3
    5e18:	3a31      	subs	r2, #49	; 0x31
    5e1a:	2a08      	cmp	r2, #8
    5e1c:	d846      	bhi.n	5eac <_strtod_l+0x284>
    5e1e:	4684      	mov	ip, r0
    5e20:	2000      	movs	r0, #0
    5e22:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5e24:	9005      	str	r0, [sp, #20]
    5e26:	9213      	str	r2, [sp, #76]	; 0x4c
    5e28:	3b30      	subs	r3, #48	; 0x30
    5e2a:	1c42      	adds	r2, r0, #1
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d00f      	beq.n	5e50 <_strtod_l+0x228>
    5e30:	210a      	movs	r1, #10
    5e32:	4494      	add	ip, r2
    5e34:	9a05      	ldr	r2, [sp, #20]
    5e36:	1810      	adds	r0, r2, r0
    5e38:	4282      	cmp	r2, r0
    5e3a:	d11b      	bne.n	5e74 <_strtod_l+0x24c>
    5e3c:	1c51      	adds	r1, r2, #1
    5e3e:	9105      	str	r1, [sp, #20]
    5e40:	2a08      	cmp	r2, #8
    5e42:	dc25      	bgt.n	5e90 <_strtod_l+0x268>
    5e44:	220a      	movs	r2, #10
    5e46:	990a      	ldr	r1, [sp, #40]	; 0x28
    5e48:	434a      	muls	r2, r1
    5e4a:	189b      	adds	r3, r3, r2
    5e4c:	2200      	movs	r2, #0
    5e4e:	930a      	str	r3, [sp, #40]	; 0x28
    5e50:	0010      	movs	r0, r2
    5e52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5e54:	1c59      	adds	r1, r3, #1
    5e56:	911f      	str	r1, [sp, #124]	; 0x7c
    5e58:	785b      	ldrb	r3, [r3, #1]
    5e5a:	001a      	movs	r2, r3
    5e5c:	3a30      	subs	r2, #48	; 0x30
    5e5e:	2a09      	cmp	r2, #9
    5e60:	d9e2      	bls.n	5e28 <_strtod_l+0x200>
    5e62:	2201      	movs	r2, #1
    5e64:	9207      	str	r2, [sp, #28]
    5e66:	e79d      	b.n	5da4 <_strtod_l+0x17c>
    5e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5e6a:	3001      	adds	r0, #1
    5e6c:	1c5a      	adds	r2, r3, #1
    5e6e:	921f      	str	r2, [sp, #124]	; 0x7c
    5e70:	785b      	ldrb	r3, [r3, #1]
    5e72:	e7ce      	b.n	5e12 <_strtod_l+0x1ea>
    5e74:	3201      	adds	r2, #1
    5e76:	1e54      	subs	r4, r2, #1
    5e78:	2c08      	cmp	r4, #8
    5e7a:	dc03      	bgt.n	5e84 <_strtod_l+0x25c>
    5e7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5e7e:	434c      	muls	r4, r1
    5e80:	940a      	str	r4, [sp, #40]	; 0x28
    5e82:	e7d9      	b.n	5e38 <_strtod_l+0x210>
    5e84:	2a10      	cmp	r2, #16
    5e86:	dcd7      	bgt.n	5e38 <_strtod_l+0x210>
    5e88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5e8a:	434c      	muls	r4, r1
    5e8c:	940b      	str	r4, [sp, #44]	; 0x2c
    5e8e:	e7d3      	b.n	5e38 <_strtod_l+0x210>
    5e90:	9905      	ldr	r1, [sp, #20]
    5e92:	2200      	movs	r2, #0
    5e94:	2910      	cmp	r1, #16
    5e96:	dcdb      	bgt.n	5e50 <_strtod_l+0x228>
    5e98:	210a      	movs	r1, #10
    5e9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5e9c:	4341      	muls	r1, r0
    5e9e:	185b      	adds	r3, r3, r1
    5ea0:	930b      	str	r3, [sp, #44]	; 0x2c
    5ea2:	e7d5      	b.n	5e50 <_strtod_l+0x228>
    5ea4:	9a08      	ldr	r2, [sp, #32]
    5ea6:	4684      	mov	ip, r0
    5ea8:	9205      	str	r2, [sp, #20]
    5eaa:	e7d6      	b.n	5e5a <_strtod_l+0x232>
    5eac:	2200      	movs	r2, #0
    5eae:	4694      	mov	ip, r2
    5eb0:	9205      	str	r2, [sp, #20]
    5eb2:	3201      	adds	r2, #1
    5eb4:	e7d6      	b.n	5e64 <_strtod_l+0x23c>
    5eb6:	000c      	movs	r4, r1
    5eb8:	9b06      	ldr	r3, [sp, #24]
    5eba:	3302      	adds	r3, #2
    5ebc:	931f      	str	r3, [sp, #124]	; 0x7c
    5ebe:	9b06      	ldr	r3, [sp, #24]
    5ec0:	789b      	ldrb	r3, [r3, #2]
    5ec2:	001a      	movs	r2, r3
    5ec4:	3a30      	subs	r2, #48	; 0x30
    5ec6:	2a09      	cmp	r2, #9
    5ec8:	d861      	bhi.n	5f8e <_strtod_l+0x366>
    5eca:	2b30      	cmp	r3, #48	; 0x30
    5ecc:	d042      	beq.n	5f54 <_strtod_l+0x32c>
    5ece:	001a      	movs	r2, r3
    5ed0:	3a31      	subs	r2, #49	; 0x31
    5ed2:	2100      	movs	r1, #0
    5ed4:	2a08      	cmp	r2, #8
    5ed6:	d816      	bhi.n	5f06 <_strtod_l+0x2de>
    5ed8:	3b30      	subs	r3, #48	; 0x30
    5eda:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    5edc:	930e      	str	r3, [sp, #56]	; 0x38
    5ede:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5ee0:	1c59      	adds	r1, r3, #1
    5ee2:	911f      	str	r1, [sp, #124]	; 0x7c
    5ee4:	785b      	ldrb	r3, [r3, #1]
    5ee6:	001a      	movs	r2, r3
    5ee8:	3a30      	subs	r2, #48	; 0x30
    5eea:	2a09      	cmp	r2, #9
    5eec:	d948      	bls.n	5f80 <_strtod_l+0x358>
    5eee:	1b4a      	subs	r2, r1, r5
    5ef0:	4d20      	ldr	r5, [pc, #128]	; (5f74 <_strtod_l+0x34c>)
    5ef2:	0029      	movs	r1, r5
    5ef4:	2a08      	cmp	r2, #8
    5ef6:	dc03      	bgt.n	5f00 <_strtod_l+0x2d8>
    5ef8:	990e      	ldr	r1, [sp, #56]	; 0x38
    5efa:	42a9      	cmp	r1, r5
    5efc:	dd00      	ble.n	5f00 <_strtod_l+0x2d8>
    5efe:	0029      	movs	r1, r5
    5f00:	2c00      	cmp	r4, #0
    5f02:	d000      	beq.n	5f06 <_strtod_l+0x2de>
    5f04:	4249      	negs	r1, r1
    5f06:	9a05      	ldr	r2, [sp, #20]
    5f08:	2a00      	cmp	r2, #0
    5f0a:	d163      	bne.n	5fd4 <_strtod_l+0x3ac>
    5f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5f0e:	4310      	orrs	r0, r2
    5f10:	d000      	beq.n	5f14 <_strtod_l+0x2ec>
    5f12:	e6ca      	b.n	5caa <_strtod_l+0x82>
    5f14:	9a07      	ldr	r2, [sp, #28]
    5f16:	2a00      	cmp	r2, #0
    5f18:	d000      	beq.n	5f1c <_strtod_l+0x2f4>
    5f1a:	e6e6      	b.n	5cea <_strtod_l+0xc2>
    5f1c:	2b4e      	cmp	r3, #78	; 0x4e
    5f1e:	d03f      	beq.n	5fa0 <_strtod_l+0x378>
    5f20:	dc39      	bgt.n	5f96 <_strtod_l+0x36e>
    5f22:	2b49      	cmp	r3, #73	; 0x49
    5f24:	d000      	beq.n	5f28 <_strtod_l+0x300>
    5f26:	e6e0      	b.n	5cea <_strtod_l+0xc2>
    5f28:	4913      	ldr	r1, [pc, #76]	; (5f78 <_strtod_l+0x350>)
    5f2a:	a81f      	add	r0, sp, #124	; 0x7c
    5f2c:	f001 f828 	bl	6f80 <__match>
    5f30:	2800      	cmp	r0, #0
    5f32:	d100      	bne.n	5f36 <_strtod_l+0x30e>
    5f34:	e6d9      	b.n	5cea <_strtod_l+0xc2>
    5f36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5f38:	4910      	ldr	r1, [pc, #64]	; (5f7c <_strtod_l+0x354>)
    5f3a:	3b01      	subs	r3, #1
    5f3c:	a81f      	add	r0, sp, #124	; 0x7c
    5f3e:	931f      	str	r3, [sp, #124]	; 0x7c
    5f40:	f001 f81e 	bl	6f80 <__match>
    5f44:	2800      	cmp	r0, #0
    5f46:	d102      	bne.n	5f4e <_strtod_l+0x326>
    5f48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5f4a:	3301      	adds	r3, #1
    5f4c:	931f      	str	r3, [sp, #124]	; 0x7c
    5f4e:	4f07      	ldr	r7, [pc, #28]	; (5f6c <_strtod_l+0x344>)
    5f50:	2600      	movs	r6, #0
    5f52:	e6aa      	b.n	5caa <_strtod_l+0x82>
    5f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5f56:	1c5a      	adds	r2, r3, #1
    5f58:	921f      	str	r2, [sp, #124]	; 0x7c
    5f5a:	785b      	ldrb	r3, [r3, #1]
    5f5c:	e7b5      	b.n	5eca <_strtod_l+0x2a2>
    5f5e:	46c0      	nop			; (mov r8, r8)
    5f60:	00007ed0 	.word	0x00007ed0
    5f64:	ffefffff 	.word	0xffefffff
    5f68:	00000433 	.word	0x00000433
    5f6c:	7ff00000 	.word	0x7ff00000
    5f70:	7fffffff 	.word	0x7fffffff
    5f74:	00004e1f 	.word	0x00004e1f
    5f78:	00007ec4 	.word	0x00007ec4
    5f7c:	00007ec7 	.word	0x00007ec7
    5f80:	220a      	movs	r2, #10
    5f82:	990e      	ldr	r1, [sp, #56]	; 0x38
    5f84:	434a      	muls	r2, r1
    5f86:	18d2      	adds	r2, r2, r3
    5f88:	3a30      	subs	r2, #48	; 0x30
    5f8a:	920e      	str	r2, [sp, #56]	; 0x38
    5f8c:	e7a7      	b.n	5ede <_strtod_l+0x2b6>
    5f8e:	9a06      	ldr	r2, [sp, #24]
    5f90:	2100      	movs	r1, #0
    5f92:	921f      	str	r2, [sp, #124]	; 0x7c
    5f94:	e7b7      	b.n	5f06 <_strtod_l+0x2de>
    5f96:	2b69      	cmp	r3, #105	; 0x69
    5f98:	d0c6      	beq.n	5f28 <_strtod_l+0x300>
    5f9a:	2b6e      	cmp	r3, #110	; 0x6e
    5f9c:	d000      	beq.n	5fa0 <_strtod_l+0x378>
    5f9e:	e6a4      	b.n	5cea <_strtod_l+0xc2>
    5fa0:	498b      	ldr	r1, [pc, #556]	; (61d0 <_strtod_l+0x5a8>)
    5fa2:	a81f      	add	r0, sp, #124	; 0x7c
    5fa4:	f000 ffec 	bl	6f80 <__match>
    5fa8:	2800      	cmp	r0, #0
    5faa:	d100      	bne.n	5fae <_strtod_l+0x386>
    5fac:	e69d      	b.n	5cea <_strtod_l+0xc2>
    5fae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	2b28      	cmp	r3, #40	; 0x28
    5fb4:	d10c      	bne.n	5fd0 <_strtod_l+0x3a8>
    5fb6:	aa22      	add	r2, sp, #136	; 0x88
    5fb8:	4986      	ldr	r1, [pc, #536]	; (61d4 <_strtod_l+0x5ac>)
    5fba:	a81f      	add	r0, sp, #124	; 0x7c
    5fbc:	f000 fff4 	bl	6fa8 <__hexnan>
    5fc0:	2805      	cmp	r0, #5
    5fc2:	d105      	bne.n	5fd0 <_strtod_l+0x3a8>
    5fc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5fc6:	4a84      	ldr	r2, [pc, #528]	; (61d8 <_strtod_l+0x5b0>)
    5fc8:	9e22      	ldr	r6, [sp, #136]	; 0x88
    5fca:	431a      	orrs	r2, r3
    5fcc:	0017      	movs	r7, r2
    5fce:	e66c      	b.n	5caa <_strtod_l+0x82>
    5fd0:	4f82      	ldr	r7, [pc, #520]	; (61dc <_strtod_l+0x5b4>)
    5fd2:	e7bd      	b.n	5f50 <_strtod_l+0x328>
    5fd4:	4663      	mov	r3, ip
    5fd6:	1acb      	subs	r3, r1, r3
    5fd8:	9307      	str	r3, [sp, #28]
    5fda:	9b08      	ldr	r3, [sp, #32]
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d101      	bne.n	5fe4 <_strtod_l+0x3bc>
    5fe0:	9b05      	ldr	r3, [sp, #20]
    5fe2:	9308      	str	r3, [sp, #32]
    5fe4:	9c05      	ldr	r4, [sp, #20]
    5fe6:	2c10      	cmp	r4, #16
    5fe8:	dd00      	ble.n	5fec <_strtod_l+0x3c4>
    5fea:	2410      	movs	r4, #16
    5fec:	980a      	ldr	r0, [sp, #40]	; 0x28
    5fee:	f001 fdef 	bl	7bd0 <__aeabi_ui2d>
    5ff2:	0006      	movs	r6, r0
    5ff4:	000f      	movs	r7, r1
    5ff6:	2c09      	cmp	r4, #9
    5ff8:	dd15      	ble.n	6026 <_strtod_l+0x3fe>
    5ffa:	0022      	movs	r2, r4
    5ffc:	4b78      	ldr	r3, [pc, #480]	; (61e0 <_strtod_l+0x5b8>)
    5ffe:	3a09      	subs	r2, #9
    6000:	00d2      	lsls	r2, r2, #3
    6002:	189b      	adds	r3, r3, r2
    6004:	681a      	ldr	r2, [r3, #0]
    6006:	685b      	ldr	r3, [r3, #4]
    6008:	f7fe fc96 	bl	4938 <__aeabi_dmul>
    600c:	0006      	movs	r6, r0
    600e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6010:	000f      	movs	r7, r1
    6012:	f001 fddd 	bl	7bd0 <__aeabi_ui2d>
    6016:	0002      	movs	r2, r0
    6018:	000b      	movs	r3, r1
    601a:	0030      	movs	r0, r6
    601c:	0039      	movs	r1, r7
    601e:	f7fd fe47 	bl	3cb0 <__aeabi_dadd>
    6022:	0006      	movs	r6, r0
    6024:	000f      	movs	r7, r1
    6026:	9b05      	ldr	r3, [sp, #20]
    6028:	2b0f      	cmp	r3, #15
    602a:	dc39      	bgt.n	60a0 <_strtod_l+0x478>
    602c:	9b07      	ldr	r3, [sp, #28]
    602e:	2b00      	cmp	r3, #0
    6030:	d100      	bne.n	6034 <_strtod_l+0x40c>
    6032:	e63a      	b.n	5caa <_strtod_l+0x82>
    6034:	dd26      	ble.n	6084 <_strtod_l+0x45c>
    6036:	2b16      	cmp	r3, #22
    6038:	dc0b      	bgt.n	6052 <_strtod_l+0x42a>
    603a:	4969      	ldr	r1, [pc, #420]	; (61e0 <_strtod_l+0x5b8>)
    603c:	00db      	lsls	r3, r3, #3
    603e:	18c9      	adds	r1, r1, r3
    6040:	0032      	movs	r2, r6
    6042:	6808      	ldr	r0, [r1, #0]
    6044:	6849      	ldr	r1, [r1, #4]
    6046:	003b      	movs	r3, r7
    6048:	f7fe fc76 	bl	4938 <__aeabi_dmul>
    604c:	0006      	movs	r6, r0
    604e:	000f      	movs	r7, r1
    6050:	e62b      	b.n	5caa <_strtod_l+0x82>
    6052:	2325      	movs	r3, #37	; 0x25
    6054:	9a05      	ldr	r2, [sp, #20]
    6056:	1a9b      	subs	r3, r3, r2
    6058:	9a07      	ldr	r2, [sp, #28]
    605a:	429a      	cmp	r2, r3
    605c:	dc20      	bgt.n	60a0 <_strtod_l+0x478>
    605e:	240f      	movs	r4, #15
    6060:	9b05      	ldr	r3, [sp, #20]
    6062:	4d5f      	ldr	r5, [pc, #380]	; (61e0 <_strtod_l+0x5b8>)
    6064:	1ae4      	subs	r4, r4, r3
    6066:	00e1      	lsls	r1, r4, #3
    6068:	1869      	adds	r1, r5, r1
    606a:	0032      	movs	r2, r6
    606c:	6808      	ldr	r0, [r1, #0]
    606e:	6849      	ldr	r1, [r1, #4]
    6070:	003b      	movs	r3, r7
    6072:	f7fe fc61 	bl	4938 <__aeabi_dmul>
    6076:	9b07      	ldr	r3, [sp, #28]
    6078:	1b1c      	subs	r4, r3, r4
    607a:	00e4      	lsls	r4, r4, #3
    607c:	192c      	adds	r4, r5, r4
    607e:	6822      	ldr	r2, [r4, #0]
    6080:	6863      	ldr	r3, [r4, #4]
    6082:	e7e1      	b.n	6048 <_strtod_l+0x420>
    6084:	9b07      	ldr	r3, [sp, #28]
    6086:	3316      	adds	r3, #22
    6088:	db0a      	blt.n	60a0 <_strtod_l+0x478>
    608a:	9b07      	ldr	r3, [sp, #28]
    608c:	0030      	movs	r0, r6
    608e:	00da      	lsls	r2, r3, #3
    6090:	4b53      	ldr	r3, [pc, #332]	; (61e0 <_strtod_l+0x5b8>)
    6092:	0039      	movs	r1, r7
    6094:	1a9b      	subs	r3, r3, r2
    6096:	681a      	ldr	r2, [r3, #0]
    6098:	685b      	ldr	r3, [r3, #4]
    609a:	f7fe f919 	bl	42d0 <__aeabi_ddiv>
    609e:	e7d5      	b.n	604c <_strtod_l+0x424>
    60a0:	9b05      	ldr	r3, [sp, #20]
    60a2:	1b1c      	subs	r4, r3, r4
    60a4:	9b07      	ldr	r3, [sp, #28]
    60a6:	18e4      	adds	r4, r4, r3
    60a8:	2c00      	cmp	r4, #0
    60aa:	dd6e      	ble.n	618a <_strtod_l+0x562>
    60ac:	230f      	movs	r3, #15
    60ae:	4023      	ands	r3, r4
    60b0:	d00a      	beq.n	60c8 <_strtod_l+0x4a0>
    60b2:	494b      	ldr	r1, [pc, #300]	; (61e0 <_strtod_l+0x5b8>)
    60b4:	00db      	lsls	r3, r3, #3
    60b6:	18c9      	adds	r1, r1, r3
    60b8:	0032      	movs	r2, r6
    60ba:	6808      	ldr	r0, [r1, #0]
    60bc:	6849      	ldr	r1, [r1, #4]
    60be:	003b      	movs	r3, r7
    60c0:	f7fe fc3a 	bl	4938 <__aeabi_dmul>
    60c4:	0006      	movs	r6, r0
    60c6:	000f      	movs	r7, r1
    60c8:	230f      	movs	r3, #15
    60ca:	439c      	bics	r4, r3
    60cc:	d048      	beq.n	6160 <_strtod_l+0x538>
    60ce:	3326      	adds	r3, #38	; 0x26
    60d0:	33ff      	adds	r3, #255	; 0xff
    60d2:	429c      	cmp	r4, r3
    60d4:	dd21      	ble.n	611a <_strtod_l+0x4f2>
    60d6:	2400      	movs	r4, #0
    60d8:	9405      	str	r4, [sp, #20]
    60da:	940a      	str	r4, [sp, #40]	; 0x28
    60dc:	9407      	str	r4, [sp, #28]
    60de:	2322      	movs	r3, #34	; 0x22
    60e0:	2600      	movs	r6, #0
    60e2:	9a04      	ldr	r2, [sp, #16]
    60e4:	4f3c      	ldr	r7, [pc, #240]	; (61d8 <_strtod_l+0x5b0>)
    60e6:	6013      	str	r3, [r2, #0]
    60e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    60ea:	42b3      	cmp	r3, r6
    60ec:	d100      	bne.n	60f0 <_strtod_l+0x4c8>
    60ee:	e5dc      	b.n	5caa <_strtod_l+0x82>
    60f0:	9920      	ldr	r1, [sp, #128]	; 0x80
    60f2:	9804      	ldr	r0, [sp, #16]
    60f4:	f001 f84e 	bl	7194 <_Bfree>
    60f8:	9907      	ldr	r1, [sp, #28]
    60fa:	9804      	ldr	r0, [sp, #16]
    60fc:	f001 f84a 	bl	7194 <_Bfree>
    6100:	9905      	ldr	r1, [sp, #20]
    6102:	9804      	ldr	r0, [sp, #16]
    6104:	f001 f846 	bl	7194 <_Bfree>
    6108:	990a      	ldr	r1, [sp, #40]	; 0x28
    610a:	9804      	ldr	r0, [sp, #16]
    610c:	f001 f842 	bl	7194 <_Bfree>
    6110:	0021      	movs	r1, r4
    6112:	9804      	ldr	r0, [sp, #16]
    6114:	f001 f83e 	bl	7194 <_Bfree>
    6118:	e5c7      	b.n	5caa <_strtod_l+0x82>
    611a:	2300      	movs	r3, #0
    611c:	0030      	movs	r0, r6
    611e:	0039      	movs	r1, r7
    6120:	001d      	movs	r5, r3
    6122:	1124      	asrs	r4, r4, #4
    6124:	2c01      	cmp	r4, #1
    6126:	dc1e      	bgt.n	6166 <_strtod_l+0x53e>
    6128:	2b00      	cmp	r3, #0
    612a:	d001      	beq.n	6130 <_strtod_l+0x508>
    612c:	0006      	movs	r6, r0
    612e:	000f      	movs	r7, r1
    6130:	4b2c      	ldr	r3, [pc, #176]	; (61e4 <_strtod_l+0x5bc>)
    6132:	00ed      	lsls	r5, r5, #3
    6134:	18ff      	adds	r7, r7, r3
    6136:	4b2c      	ldr	r3, [pc, #176]	; (61e8 <_strtod_l+0x5c0>)
    6138:	0032      	movs	r2, r6
    613a:	195d      	adds	r5, r3, r5
    613c:	6828      	ldr	r0, [r5, #0]
    613e:	6869      	ldr	r1, [r5, #4]
    6140:	003b      	movs	r3, r7
    6142:	f7fe fbf9 	bl	4938 <__aeabi_dmul>
    6146:	4b24      	ldr	r3, [pc, #144]	; (61d8 <_strtod_l+0x5b0>)
    6148:	000f      	movs	r7, r1
    614a:	400b      	ands	r3, r1
    614c:	4927      	ldr	r1, [pc, #156]	; (61ec <_strtod_l+0x5c4>)
    614e:	0006      	movs	r6, r0
    6150:	428b      	cmp	r3, r1
    6152:	d8c0      	bhi.n	60d6 <_strtod_l+0x4ae>
    6154:	4926      	ldr	r1, [pc, #152]	; (61f0 <_strtod_l+0x5c8>)
    6156:	428b      	cmp	r3, r1
    6158:	d913      	bls.n	6182 <_strtod_l+0x55a>
    615a:	2601      	movs	r6, #1
    615c:	4f25      	ldr	r7, [pc, #148]	; (61f4 <_strtod_l+0x5cc>)
    615e:	4276      	negs	r6, r6
    6160:	2300      	movs	r3, #0
    6162:	9306      	str	r3, [sp, #24]
    6164:	e074      	b.n	6250 <_strtod_l+0x628>
    6166:	2201      	movs	r2, #1
    6168:	4214      	tst	r4, r2
    616a:	d007      	beq.n	617c <_strtod_l+0x554>
    616c:	4a1e      	ldr	r2, [pc, #120]	; (61e8 <_strtod_l+0x5c0>)
    616e:	00eb      	lsls	r3, r5, #3
    6170:	189b      	adds	r3, r3, r2
    6172:	681a      	ldr	r2, [r3, #0]
    6174:	685b      	ldr	r3, [r3, #4]
    6176:	f7fe fbdf 	bl	4938 <__aeabi_dmul>
    617a:	2301      	movs	r3, #1
    617c:	3501      	adds	r5, #1
    617e:	1064      	asrs	r4, r4, #1
    6180:	e7d0      	b.n	6124 <_strtod_l+0x4fc>
    6182:	23d4      	movs	r3, #212	; 0xd4
    6184:	049b      	lsls	r3, r3, #18
    6186:	18ff      	adds	r7, r7, r3
    6188:	e7ea      	b.n	6160 <_strtod_l+0x538>
    618a:	2c00      	cmp	r4, #0
    618c:	d0e8      	beq.n	6160 <_strtod_l+0x538>
    618e:	230f      	movs	r3, #15
    6190:	4264      	negs	r4, r4
    6192:	4023      	ands	r3, r4
    6194:	d00a      	beq.n	61ac <_strtod_l+0x584>
    6196:	4a12      	ldr	r2, [pc, #72]	; (61e0 <_strtod_l+0x5b8>)
    6198:	00db      	lsls	r3, r3, #3
    619a:	18d3      	adds	r3, r2, r3
    619c:	0030      	movs	r0, r6
    619e:	681a      	ldr	r2, [r3, #0]
    61a0:	685b      	ldr	r3, [r3, #4]
    61a2:	0039      	movs	r1, r7
    61a4:	f7fe f894 	bl	42d0 <__aeabi_ddiv>
    61a8:	0006      	movs	r6, r0
    61aa:	000f      	movs	r7, r1
    61ac:	1124      	asrs	r4, r4, #4
    61ae:	d0d7      	beq.n	6160 <_strtod_l+0x538>
    61b0:	2c1f      	cmp	r4, #31
    61b2:	dd21      	ble.n	61f8 <_strtod_l+0x5d0>
    61b4:	2400      	movs	r4, #0
    61b6:	9405      	str	r4, [sp, #20]
    61b8:	940a      	str	r4, [sp, #40]	; 0x28
    61ba:	9407      	str	r4, [sp, #28]
    61bc:	2322      	movs	r3, #34	; 0x22
    61be:	9a04      	ldr	r2, [sp, #16]
    61c0:	2600      	movs	r6, #0
    61c2:	6013      	str	r3, [r2, #0]
    61c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    61c6:	2700      	movs	r7, #0
    61c8:	2b00      	cmp	r3, #0
    61ca:	d191      	bne.n	60f0 <_strtod_l+0x4c8>
    61cc:	e56d      	b.n	5caa <_strtod_l+0x82>
    61ce:	46c0      	nop			; (mov r8, r8)
    61d0:	00007ecd 	.word	0x00007ecd
    61d4:	00007ee4 	.word	0x00007ee4
    61d8:	7ff00000 	.word	0x7ff00000
    61dc:	fff80000 	.word	0xfff80000
    61e0:	00007fe0 	.word	0x00007fe0
    61e4:	fcb00000 	.word	0xfcb00000
    61e8:	00007fb8 	.word	0x00007fb8
    61ec:	7ca00000 	.word	0x7ca00000
    61f0:	7c900000 	.word	0x7c900000
    61f4:	7fefffff 	.word	0x7fefffff
    61f8:	2310      	movs	r3, #16
    61fa:	4023      	ands	r3, r4
    61fc:	9306      	str	r3, [sp, #24]
    61fe:	d001      	beq.n	6204 <_strtod_l+0x5dc>
    6200:	236a      	movs	r3, #106	; 0x6a
    6202:	9306      	str	r3, [sp, #24]
    6204:	0030      	movs	r0, r6
    6206:	0039      	movs	r1, r7
    6208:	2300      	movs	r3, #0
    620a:	4dca      	ldr	r5, [pc, #808]	; (6534 <_strtod_l+0x90c>)
    620c:	2c00      	cmp	r4, #0
    620e:	dd00      	ble.n	6212 <_strtod_l+0x5ea>
    6210:	e103      	b.n	641a <_strtod_l+0x7f2>
    6212:	2b00      	cmp	r3, #0
    6214:	d001      	beq.n	621a <_strtod_l+0x5f2>
    6216:	0006      	movs	r6, r0
    6218:	000f      	movs	r7, r1
    621a:	9b06      	ldr	r3, [sp, #24]
    621c:	2b00      	cmp	r3, #0
    621e:	d00f      	beq.n	6240 <_strtod_l+0x618>
    6220:	236b      	movs	r3, #107	; 0x6b
    6222:	0079      	lsls	r1, r7, #1
    6224:	0d49      	lsrs	r1, r1, #21
    6226:	003a      	movs	r2, r7
    6228:	1a5b      	subs	r3, r3, r1
    622a:	2b00      	cmp	r3, #0
    622c:	dd08      	ble.n	6240 <_strtod_l+0x618>
    622e:	2b1f      	cmp	r3, #31
    6230:	dc00      	bgt.n	6234 <_strtod_l+0x60c>
    6232:	e104      	b.n	643e <_strtod_l+0x816>
    6234:	2600      	movs	r6, #0
    6236:	2b34      	cmp	r3, #52	; 0x34
    6238:	dc00      	bgt.n	623c <_strtod_l+0x614>
    623a:	e0f9      	b.n	6430 <_strtod_l+0x808>
    623c:	27dc      	movs	r7, #220	; 0xdc
    623e:	04bf      	lsls	r7, r7, #18
    6240:	2200      	movs	r2, #0
    6242:	2300      	movs	r3, #0
    6244:	0030      	movs	r0, r6
    6246:	0039      	movs	r1, r7
    6248:	f7ff fa6e 	bl	5728 <__aeabi_dcmpeq>
    624c:	2800      	cmp	r0, #0
    624e:	d1b1      	bne.n	61b4 <_strtod_l+0x58c>
    6250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6252:	9a08      	ldr	r2, [sp, #32]
    6254:	9300      	str	r3, [sp, #0]
    6256:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6258:	9b05      	ldr	r3, [sp, #20]
    625a:	9804      	ldr	r0, [sp, #16]
    625c:	f000 ffef 	bl	723e <__s2b>
    6260:	900a      	str	r0, [sp, #40]	; 0x28
    6262:	2800      	cmp	r0, #0
    6264:	d100      	bne.n	6268 <_strtod_l+0x640>
    6266:	e736      	b.n	60d6 <_strtod_l+0x4ae>
    6268:	9b07      	ldr	r3, [sp, #28]
    626a:	2400      	movs	r4, #0
    626c:	17da      	asrs	r2, r3, #31
    626e:	425b      	negs	r3, r3
    6270:	401a      	ands	r2, r3
    6272:	9b07      	ldr	r3, [sp, #28]
    6274:	9215      	str	r2, [sp, #84]	; 0x54
    6276:	43db      	mvns	r3, r3
    6278:	9a07      	ldr	r2, [sp, #28]
    627a:	17db      	asrs	r3, r3, #31
    627c:	401a      	ands	r2, r3
    627e:	9213      	str	r2, [sp, #76]	; 0x4c
    6280:	9405      	str	r4, [sp, #20]
    6282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6284:	9804      	ldr	r0, [sp, #16]
    6286:	6859      	ldr	r1, [r3, #4]
    6288:	f000 ff4c 	bl	7124 <_Balloc>
    628c:	9007      	str	r0, [sp, #28]
    628e:	2800      	cmp	r0, #0
    6290:	d100      	bne.n	6294 <_strtod_l+0x66c>
    6292:	e724      	b.n	60de <_strtod_l+0x4b6>
    6294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6296:	990a      	ldr	r1, [sp, #40]	; 0x28
    6298:	691b      	ldr	r3, [r3, #16]
    629a:	310c      	adds	r1, #12
    629c:	1c9a      	adds	r2, r3, #2
    629e:	0092      	lsls	r2, r2, #2
    62a0:	300c      	adds	r0, #12
    62a2:	9308      	str	r3, [sp, #32]
    62a4:	f7ff fbdc 	bl	5a60 <memcpy>
    62a8:	ab22      	add	r3, sp, #136	; 0x88
    62aa:	9301      	str	r3, [sp, #4]
    62ac:	ab21      	add	r3, sp, #132	; 0x84
    62ae:	9300      	str	r3, [sp, #0]
    62b0:	0032      	movs	r2, r6
    62b2:	003b      	movs	r3, r7
    62b4:	9804      	ldr	r0, [sp, #16]
    62b6:	960e      	str	r6, [sp, #56]	; 0x38
    62b8:	970f      	str	r7, [sp, #60]	; 0x3c
    62ba:	f001 fa73 	bl	77a4 <__d2b>
    62be:	9020      	str	r0, [sp, #128]	; 0x80
    62c0:	2800      	cmp	r0, #0
    62c2:	d100      	bne.n	62c6 <_strtod_l+0x69e>
    62c4:	e70b      	b.n	60de <_strtod_l+0x4b6>
    62c6:	2101      	movs	r1, #1
    62c8:	9804      	ldr	r0, [sp, #16]
    62ca:	f001 f840 	bl	734e <__i2b>
    62ce:	9005      	str	r0, [sp, #20]
    62d0:	2800      	cmp	r0, #0
    62d2:	d100      	bne.n	62d6 <_strtod_l+0x6ae>
    62d4:	e703      	b.n	60de <_strtod_l+0x4b6>
    62d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    62d8:	2b00      	cmp	r3, #0
    62da:	da00      	bge.n	62de <_strtod_l+0x6b6>
    62dc:	e0b4      	b.n	6448 <_strtod_l+0x820>
    62de:	9a15      	ldr	r2, [sp, #84]	; 0x54
    62e0:	18d5      	adds	r5, r2, r3
    62e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    62e4:	4694      	mov	ip, r2
    62e6:	9906      	ldr	r1, [sp, #24]
    62e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    62ea:	1a5b      	subs	r3, r3, r1
    62ec:	2136      	movs	r1, #54	; 0x36
    62ee:	189b      	adds	r3, r3, r2
    62f0:	1a8a      	subs	r2, r1, r2
    62f2:	4991      	ldr	r1, [pc, #580]	; (6538 <_strtod_l+0x910>)
    62f4:	3b01      	subs	r3, #1
    62f6:	2001      	movs	r0, #1
    62f8:	428b      	cmp	r3, r1
    62fa:	db00      	blt.n	62fe <_strtod_l+0x6d6>
    62fc:	e0b0      	b.n	6460 <_strtod_l+0x838>
    62fe:	1ac9      	subs	r1, r1, r3
    6300:	1a52      	subs	r2, r2, r1
    6302:	291f      	cmp	r1, #31
    6304:	dd00      	ble.n	6308 <_strtod_l+0x6e0>
    6306:	e0a4      	b.n	6452 <_strtod_l+0x82a>
    6308:	4088      	lsls	r0, r1
    630a:	2300      	movs	r3, #0
    630c:	9014      	str	r0, [sp, #80]	; 0x50
    630e:	930c      	str	r3, [sp, #48]	; 0x30
    6310:	18ab      	adds	r3, r5, r2
    6312:	9308      	str	r3, [sp, #32]
    6314:	0013      	movs	r3, r2
    6316:	9a06      	ldr	r2, [sp, #24]
    6318:	4463      	add	r3, ip
    631a:	18d3      	adds	r3, r2, r3
    631c:	9a08      	ldr	r2, [sp, #32]
    631e:	930b      	str	r3, [sp, #44]	; 0x2c
    6320:	002b      	movs	r3, r5
    6322:	4295      	cmp	r5, r2
    6324:	dd00      	ble.n	6328 <_strtod_l+0x700>
    6326:	0013      	movs	r3, r2
    6328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    632a:	4293      	cmp	r3, r2
    632c:	dd00      	ble.n	6330 <_strtod_l+0x708>
    632e:	0013      	movs	r3, r2
    6330:	2b00      	cmp	r3, #0
    6332:	dd06      	ble.n	6342 <_strtod_l+0x71a>
    6334:	9a08      	ldr	r2, [sp, #32]
    6336:	1aed      	subs	r5, r5, r3
    6338:	1ad2      	subs	r2, r2, r3
    633a:	9208      	str	r2, [sp, #32]
    633c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    633e:	1ad2      	subs	r2, r2, r3
    6340:	920b      	str	r2, [sp, #44]	; 0x2c
    6342:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6344:	2b00      	cmp	r3, #0
    6346:	d017      	beq.n	6378 <_strtod_l+0x750>
    6348:	001a      	movs	r2, r3
    634a:	9905      	ldr	r1, [sp, #20]
    634c:	9804      	ldr	r0, [sp, #16]
    634e:	f001 f897 	bl	7480 <__pow5mult>
    6352:	9005      	str	r0, [sp, #20]
    6354:	2800      	cmp	r0, #0
    6356:	d100      	bne.n	635a <_strtod_l+0x732>
    6358:	e6c1      	b.n	60de <_strtod_l+0x4b6>
    635a:	0001      	movs	r1, r0
    635c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    635e:	9804      	ldr	r0, [sp, #16]
    6360:	f000 fffe 	bl	7360 <__multiply>
    6364:	901b      	str	r0, [sp, #108]	; 0x6c
    6366:	2800      	cmp	r0, #0
    6368:	d100      	bne.n	636c <_strtod_l+0x744>
    636a:	e6b8      	b.n	60de <_strtod_l+0x4b6>
    636c:	9920      	ldr	r1, [sp, #128]	; 0x80
    636e:	9804      	ldr	r0, [sp, #16]
    6370:	f000 ff10 	bl	7194 <_Bfree>
    6374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6376:	9320      	str	r3, [sp, #128]	; 0x80
    6378:	9b08      	ldr	r3, [sp, #32]
    637a:	2b00      	cmp	r3, #0
    637c:	dc73      	bgt.n	6466 <_strtod_l+0x83e>
    637e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6380:	2b00      	cmp	r3, #0
    6382:	d179      	bne.n	6478 <_strtod_l+0x850>
    6384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6386:	2b00      	cmp	r3, #0
    6388:	dd08      	ble.n	639c <_strtod_l+0x774>
    638a:	001a      	movs	r2, r3
    638c:	9907      	ldr	r1, [sp, #28]
    638e:	9804      	ldr	r0, [sp, #16]
    6390:	f001 f8c8 	bl	7524 <__lshift>
    6394:	9007      	str	r0, [sp, #28]
    6396:	2800      	cmp	r0, #0
    6398:	d100      	bne.n	639c <_strtod_l+0x774>
    639a:	e6a0      	b.n	60de <_strtod_l+0x4b6>
    639c:	2d00      	cmp	r5, #0
    639e:	dd08      	ble.n	63b2 <_strtod_l+0x78a>
    63a0:	002a      	movs	r2, r5
    63a2:	9905      	ldr	r1, [sp, #20]
    63a4:	9804      	ldr	r0, [sp, #16]
    63a6:	f001 f8bd 	bl	7524 <__lshift>
    63aa:	9005      	str	r0, [sp, #20]
    63ac:	2800      	cmp	r0, #0
    63ae:	d100      	bne.n	63b2 <_strtod_l+0x78a>
    63b0:	e695      	b.n	60de <_strtod_l+0x4b6>
    63b2:	9a07      	ldr	r2, [sp, #28]
    63b4:	9920      	ldr	r1, [sp, #128]	; 0x80
    63b6:	9804      	ldr	r0, [sp, #16]
    63b8:	f001 f91e 	bl	75f8 <__mdiff>
    63bc:	1e04      	subs	r4, r0, #0
    63be:	d100      	bne.n	63c2 <_strtod_l+0x79a>
    63c0:	e68d      	b.n	60de <_strtod_l+0x4b6>
    63c2:	2500      	movs	r5, #0
    63c4:	68c3      	ldr	r3, [r0, #12]
    63c6:	9905      	ldr	r1, [sp, #20]
    63c8:	60c5      	str	r5, [r0, #12]
    63ca:	930b      	str	r3, [sp, #44]	; 0x2c
    63cc:	f001 f8fb 	bl	75c6 <__mcmp>
    63d0:	42a8      	cmp	r0, r5
    63d2:	da5b      	bge.n	648c <_strtod_l+0x864>
    63d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    63d6:	42ab      	cmp	r3, r5
    63d8:	d11b      	bne.n	6412 <_strtod_l+0x7ea>
    63da:	42ae      	cmp	r6, r5
    63dc:	d119      	bne.n	6412 <_strtod_l+0x7ea>
    63de:	033b      	lsls	r3, r7, #12
    63e0:	42ab      	cmp	r3, r5
    63e2:	d116      	bne.n	6412 <_strtod_l+0x7ea>
    63e4:	22d6      	movs	r2, #214	; 0xd6
    63e6:	4b55      	ldr	r3, [pc, #340]	; (653c <_strtod_l+0x914>)
    63e8:	04d2      	lsls	r2, r2, #19
    63ea:	403b      	ands	r3, r7
    63ec:	4293      	cmp	r3, r2
    63ee:	d910      	bls.n	6412 <_strtod_l+0x7ea>
    63f0:	6963      	ldr	r3, [r4, #20]
    63f2:	42ab      	cmp	r3, r5
    63f4:	d102      	bne.n	63fc <_strtod_l+0x7d4>
    63f6:	6923      	ldr	r3, [r4, #16]
    63f8:	2b01      	cmp	r3, #1
    63fa:	dd0a      	ble.n	6412 <_strtod_l+0x7ea>
    63fc:	0021      	movs	r1, r4
    63fe:	2201      	movs	r2, #1
    6400:	9804      	ldr	r0, [sp, #16]
    6402:	f001 f88f 	bl	7524 <__lshift>
    6406:	9905      	ldr	r1, [sp, #20]
    6408:	0004      	movs	r4, r0
    640a:	f001 f8dc 	bl	75c6 <__mcmp>
    640e:	2800      	cmp	r0, #0
    6410:	dc6c      	bgt.n	64ec <_strtod_l+0x8c4>
    6412:	9b06      	ldr	r3, [sp, #24]
    6414:	2b00      	cmp	r3, #0
    6416:	d178      	bne.n	650a <_strtod_l+0x8e2>
    6418:	e66a      	b.n	60f0 <_strtod_l+0x4c8>
    641a:	2201      	movs	r2, #1
    641c:	4214      	tst	r4, r2
    641e:	d004      	beq.n	642a <_strtod_l+0x802>
    6420:	682a      	ldr	r2, [r5, #0]
    6422:	686b      	ldr	r3, [r5, #4]
    6424:	f7fe fa88 	bl	4938 <__aeabi_dmul>
    6428:	2301      	movs	r3, #1
    642a:	1064      	asrs	r4, r4, #1
    642c:	3508      	adds	r5, #8
    642e:	e6ed      	b.n	620c <_strtod_l+0x5e4>
    6430:	2101      	movs	r1, #1
    6432:	3b20      	subs	r3, #32
    6434:	4249      	negs	r1, r1
    6436:	4099      	lsls	r1, r3
    6438:	400a      	ands	r2, r1
    643a:	0017      	movs	r7, r2
    643c:	e700      	b.n	6240 <_strtod_l+0x618>
    643e:	2201      	movs	r2, #1
    6440:	4252      	negs	r2, r2
    6442:	409a      	lsls	r2, r3
    6444:	4016      	ands	r6, r2
    6446:	e6fb      	b.n	6240 <_strtod_l+0x618>
    6448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    644a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    644c:	1ad2      	subs	r2, r2, r3
    644e:	4694      	mov	ip, r2
    6450:	e749      	b.n	62e6 <_strtod_l+0x6be>
    6452:	493b      	ldr	r1, [pc, #236]	; (6540 <_strtod_l+0x918>)
    6454:	1acb      	subs	r3, r1, r3
    6456:	0001      	movs	r1, r0
    6458:	4099      	lsls	r1, r3
    645a:	910c      	str	r1, [sp, #48]	; 0x30
    645c:	9014      	str	r0, [sp, #80]	; 0x50
    645e:	e757      	b.n	6310 <_strtod_l+0x6e8>
    6460:	2300      	movs	r3, #0
    6462:	930c      	str	r3, [sp, #48]	; 0x30
    6464:	e7fa      	b.n	645c <_strtod_l+0x834>
    6466:	9a08      	ldr	r2, [sp, #32]
    6468:	9920      	ldr	r1, [sp, #128]	; 0x80
    646a:	9804      	ldr	r0, [sp, #16]
    646c:	f001 f85a 	bl	7524 <__lshift>
    6470:	9020      	str	r0, [sp, #128]	; 0x80
    6472:	2800      	cmp	r0, #0
    6474:	d183      	bne.n	637e <_strtod_l+0x756>
    6476:	e632      	b.n	60de <_strtod_l+0x4b6>
    6478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    647a:	9907      	ldr	r1, [sp, #28]
    647c:	9804      	ldr	r0, [sp, #16]
    647e:	f000 ffff 	bl	7480 <__pow5mult>
    6482:	9007      	str	r0, [sp, #28]
    6484:	2800      	cmp	r0, #0
    6486:	d000      	beq.n	648a <_strtod_l+0x862>
    6488:	e77c      	b.n	6384 <_strtod_l+0x75c>
    648a:	e628      	b.n	60de <_strtod_l+0x4b6>
    648c:	2800      	cmp	r0, #0
    648e:	d000      	beq.n	6492 <_strtod_l+0x86a>
    6490:	e095      	b.n	65be <_strtod_l+0x996>
    6492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6494:	033b      	lsls	r3, r7, #12
    6496:	2a00      	cmp	r2, #0
    6498:	d024      	beq.n	64e4 <_strtod_l+0x8bc>
    649a:	492a      	ldr	r1, [pc, #168]	; (6544 <_strtod_l+0x91c>)
    649c:	003a      	movs	r2, r7
    649e:	0b1b      	lsrs	r3, r3, #12
    64a0:	428b      	cmp	r3, r1
    64a2:	d15e      	bne.n	6562 <_strtod_l+0x93a>
    64a4:	9b06      	ldr	r3, [sp, #24]
    64a6:	3801      	subs	r0, #1
    64a8:	46b4      	mov	ip, r6
    64aa:	0001      	movs	r1, r0
    64ac:	2b00      	cmp	r3, #0
    64ae:	d00a      	beq.n	64c6 <_strtod_l+0x89e>
    64b0:	25d4      	movs	r5, #212	; 0xd4
    64b2:	4b22      	ldr	r3, [pc, #136]	; (653c <_strtod_l+0x914>)
    64b4:	04ed      	lsls	r5, r5, #19
    64b6:	403b      	ands	r3, r7
    64b8:	42ab      	cmp	r3, r5
    64ba:	d804      	bhi.n	64c6 <_strtod_l+0x89e>
    64bc:	316c      	adds	r1, #108	; 0x6c
    64be:	0d1b      	lsrs	r3, r3, #20
    64c0:	1acb      	subs	r3, r1, r3
    64c2:	0001      	movs	r1, r0
    64c4:	4099      	lsls	r1, r3
    64c6:	4561      	cmp	r1, ip
    64c8:	d14b      	bne.n	6562 <_strtod_l+0x93a>
    64ca:	4b1f      	ldr	r3, [pc, #124]	; (6548 <_strtod_l+0x920>)
    64cc:	429a      	cmp	r2, r3
    64ce:	d102      	bne.n	64d6 <_strtod_l+0x8ae>
    64d0:	1c4b      	adds	r3, r1, #1
    64d2:	d100      	bne.n	64d6 <_strtod_l+0x8ae>
    64d4:	e603      	b.n	60de <_strtod_l+0x4b6>
    64d6:	4b19      	ldr	r3, [pc, #100]	; (653c <_strtod_l+0x914>)
    64d8:	2600      	movs	r6, #0
    64da:	401a      	ands	r2, r3
    64dc:	2380      	movs	r3, #128	; 0x80
    64de:	035b      	lsls	r3, r3, #13
    64e0:	18d7      	adds	r7, r2, r3
    64e2:	e796      	b.n	6412 <_strtod_l+0x7ea>
    64e4:	2b00      	cmp	r3, #0
    64e6:	d13c      	bne.n	6562 <_strtod_l+0x93a>
    64e8:	2e00      	cmp	r6, #0
    64ea:	d13a      	bne.n	6562 <_strtod_l+0x93a>
    64ec:	9a06      	ldr	r2, [sp, #24]
    64ee:	4b13      	ldr	r3, [pc, #76]	; (653c <_strtod_l+0x914>)
    64f0:	2a00      	cmp	r2, #0
    64f2:	d02d      	beq.n	6550 <_strtod_l+0x928>
    64f4:	001a      	movs	r2, r3
    64f6:	21d6      	movs	r1, #214	; 0xd6
    64f8:	403a      	ands	r2, r7
    64fa:	04c9      	lsls	r1, r1, #19
    64fc:	428a      	cmp	r2, r1
    64fe:	dc27      	bgt.n	6550 <_strtod_l+0x928>
    6500:	23dc      	movs	r3, #220	; 0xdc
    6502:	049b      	lsls	r3, r3, #18
    6504:	429a      	cmp	r2, r3
    6506:	dc00      	bgt.n	650a <_strtod_l+0x8e2>
    6508:	e658      	b.n	61bc <_strtod_l+0x594>
    650a:	4b10      	ldr	r3, [pc, #64]	; (654c <_strtod_l+0x924>)
    650c:	0030      	movs	r0, r6
    650e:	9311      	str	r3, [sp, #68]	; 0x44
    6510:	2300      	movs	r3, #0
    6512:	9310      	str	r3, [sp, #64]	; 0x40
    6514:	0039      	movs	r1, r7
    6516:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6518:	9b11      	ldr	r3, [sp, #68]	; 0x44
    651a:	f7fe fa0d 	bl	4938 <__aeabi_dmul>
    651e:	0006      	movs	r6, r0
    6520:	1e0f      	subs	r7, r1, #0
    6522:	d000      	beq.n	6526 <_strtod_l+0x8fe>
    6524:	e5e4      	b.n	60f0 <_strtod_l+0x4c8>
    6526:	2800      	cmp	r0, #0
    6528:	d000      	beq.n	652c <_strtod_l+0x904>
    652a:	e5e1      	b.n	60f0 <_strtod_l+0x4c8>
    652c:	2322      	movs	r3, #34	; 0x22
    652e:	9a04      	ldr	r2, [sp, #16]
    6530:	6013      	str	r3, [r2, #0]
    6532:	e5dd      	b.n	60f0 <_strtod_l+0x4c8>
    6534:	00007ef8 	.word	0x00007ef8
    6538:	fffffc02 	.word	0xfffffc02
    653c:	7ff00000 	.word	0x7ff00000
    6540:	fffffbe2 	.word	0xfffffbe2
    6544:	000fffff 	.word	0x000fffff
    6548:	7fefffff 	.word	0x7fefffff
    654c:	39500000 	.word	0x39500000
    6550:	2601      	movs	r6, #1
    6552:	4aa9      	ldr	r2, [pc, #676]	; (67f8 <_strtod_l+0xbd0>)
    6554:	403b      	ands	r3, r7
    6556:	189b      	adds	r3, r3, r2
    6558:	4aa8      	ldr	r2, [pc, #672]	; (67fc <_strtod_l+0xbd4>)
    655a:	4276      	negs	r6, r6
    655c:	431a      	orrs	r2, r3
    655e:	0017      	movs	r7, r2
    6560:	e757      	b.n	6412 <_strtod_l+0x7ea>
    6562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6564:	2b00      	cmp	r3, #0
    6566:	d013      	beq.n	6590 <_strtod_l+0x968>
    6568:	423b      	tst	r3, r7
    656a:	d100      	bne.n	656e <_strtod_l+0x946>
    656c:	e751      	b.n	6412 <_strtod_l+0x7ea>
    656e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6570:	9a06      	ldr	r2, [sp, #24]
    6572:	0030      	movs	r0, r6
    6574:	0039      	movs	r1, r7
    6576:	2b00      	cmp	r3, #0
    6578:	d00f      	beq.n	659a <_strtod_l+0x972>
    657a:	f7ff fb3d 	bl	5bf8 <sulp>
    657e:	0002      	movs	r2, r0
    6580:	000b      	movs	r3, r1
    6582:	980e      	ldr	r0, [sp, #56]	; 0x38
    6584:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6586:	f7fd fb93 	bl	3cb0 <__aeabi_dadd>
    658a:	0006      	movs	r6, r0
    658c:	000f      	movs	r7, r1
    658e:	e740      	b.n	6412 <_strtod_l+0x7ea>
    6590:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6592:	4233      	tst	r3, r6
    6594:	d100      	bne.n	6598 <_strtod_l+0x970>
    6596:	e73c      	b.n	6412 <_strtod_l+0x7ea>
    6598:	e7e9      	b.n	656e <_strtod_l+0x946>
    659a:	f7ff fb2d 	bl	5bf8 <sulp>
    659e:	0002      	movs	r2, r0
    65a0:	000b      	movs	r3, r1
    65a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    65a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    65a6:	f7fe fc47 	bl	4e38 <__aeabi_dsub>
    65aa:	2200      	movs	r2, #0
    65ac:	2300      	movs	r3, #0
    65ae:	0006      	movs	r6, r0
    65b0:	000f      	movs	r7, r1
    65b2:	f7ff f8b9 	bl	5728 <__aeabi_dcmpeq>
    65b6:	2800      	cmp	r0, #0
    65b8:	d000      	beq.n	65bc <_strtod_l+0x994>
    65ba:	e5ff      	b.n	61bc <_strtod_l+0x594>
    65bc:	e729      	b.n	6412 <_strtod_l+0x7ea>
    65be:	9905      	ldr	r1, [sp, #20]
    65c0:	0020      	movs	r0, r4
    65c2:	f001 f943 	bl	784c <__ratio>
    65c6:	2380      	movs	r3, #128	; 0x80
    65c8:	2200      	movs	r2, #0
    65ca:	05db      	lsls	r3, r3, #23
    65cc:	9008      	str	r0, [sp, #32]
    65ce:	9109      	str	r1, [sp, #36]	; 0x24
    65d0:	f7ff f8ba 	bl	5748 <__aeabi_dcmple>
    65d4:	2800      	cmp	r0, #0
    65d6:	d075      	beq.n	66c4 <_strtod_l+0xa9c>
    65d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    65da:	2b00      	cmp	r3, #0
    65dc:	d043      	beq.n	6666 <_strtod_l+0xa3e>
    65de:	2200      	movs	r2, #0
    65e0:	4b87      	ldr	r3, [pc, #540]	; (6800 <_strtod_l+0xbd8>)
    65e2:	920c      	str	r2, [sp, #48]	; 0x30
    65e4:	930d      	str	r3, [sp, #52]	; 0x34
    65e6:	4b86      	ldr	r3, [pc, #536]	; (6800 <_strtod_l+0xbd8>)
    65e8:	9308      	str	r3, [sp, #32]
    65ea:	4b86      	ldr	r3, [pc, #536]	; (6804 <_strtod_l+0xbdc>)
    65ec:	403b      	ands	r3, r7
    65ee:	9314      	str	r3, [sp, #80]	; 0x50
    65f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    65f2:	4b85      	ldr	r3, [pc, #532]	; (6808 <_strtod_l+0xbe0>)
    65f4:	429a      	cmp	r2, r3
    65f6:	d000      	beq.n	65fa <_strtod_l+0x9d2>
    65f8:	e0b1      	b.n	675e <_strtod_l+0xb36>
    65fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    65fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    65fe:	9210      	str	r2, [sp, #64]	; 0x40
    6600:	9311      	str	r3, [sp, #68]	; 0x44
    6602:	4b82      	ldr	r3, [pc, #520]	; (680c <_strtod_l+0xbe4>)
    6604:	0030      	movs	r0, r6
    6606:	18ff      	adds	r7, r7, r3
    6608:	0039      	movs	r1, r7
    660a:	f001 f859 	bl	76c0 <__ulp>
    660e:	0002      	movs	r2, r0
    6610:	000b      	movs	r3, r1
    6612:	980c      	ldr	r0, [sp, #48]	; 0x30
    6614:	990d      	ldr	r1, [sp, #52]	; 0x34
    6616:	f7fe f98f 	bl	4938 <__aeabi_dmul>
    661a:	0032      	movs	r2, r6
    661c:	003b      	movs	r3, r7
    661e:	f7fd fb47 	bl	3cb0 <__aeabi_dadd>
    6622:	4a78      	ldr	r2, [pc, #480]	; (6804 <_strtod_l+0xbdc>)
    6624:	4b7a      	ldr	r3, [pc, #488]	; (6810 <_strtod_l+0xbe8>)
    6626:	0006      	movs	r6, r0
    6628:	400a      	ands	r2, r1
    662a:	429a      	cmp	r2, r3
    662c:	d962      	bls.n	66f4 <_strtod_l+0xacc>
    662e:	4b79      	ldr	r3, [pc, #484]	; (6814 <_strtod_l+0xbec>)
    6630:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6632:	429a      	cmp	r2, r3
    6634:	d103      	bne.n	663e <_strtod_l+0xa16>
    6636:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6638:	3301      	adds	r3, #1
    663a:	d100      	bne.n	663e <_strtod_l+0xa16>
    663c:	e54f      	b.n	60de <_strtod_l+0x4b6>
    663e:	2601      	movs	r6, #1
    6640:	4f74      	ldr	r7, [pc, #464]	; (6814 <_strtod_l+0xbec>)
    6642:	4276      	negs	r6, r6
    6644:	9920      	ldr	r1, [sp, #128]	; 0x80
    6646:	9804      	ldr	r0, [sp, #16]
    6648:	f000 fda4 	bl	7194 <_Bfree>
    664c:	9907      	ldr	r1, [sp, #28]
    664e:	9804      	ldr	r0, [sp, #16]
    6650:	f000 fda0 	bl	7194 <_Bfree>
    6654:	9905      	ldr	r1, [sp, #20]
    6656:	9804      	ldr	r0, [sp, #16]
    6658:	f000 fd9c 	bl	7194 <_Bfree>
    665c:	0021      	movs	r1, r4
    665e:	9804      	ldr	r0, [sp, #16]
    6660:	f000 fd98 	bl	7194 <_Bfree>
    6664:	e60d      	b.n	6282 <_strtod_l+0x65a>
    6666:	2e00      	cmp	r6, #0
    6668:	d11d      	bne.n	66a6 <_strtod_l+0xa7e>
    666a:	033b      	lsls	r3, r7, #12
    666c:	d120      	bne.n	66b0 <_strtod_l+0xa88>
    666e:	9808      	ldr	r0, [sp, #32]
    6670:	9909      	ldr	r1, [sp, #36]	; 0x24
    6672:	2200      	movs	r2, #0
    6674:	4b62      	ldr	r3, [pc, #392]	; (6800 <_strtod_l+0xbd8>)
    6676:	f7ff f85d 	bl	5734 <__aeabi_dcmplt>
    667a:	2800      	cmp	r0, #0
    667c:	d11e      	bne.n	66bc <_strtod_l+0xa94>
    667e:	9808      	ldr	r0, [sp, #32]
    6680:	9909      	ldr	r1, [sp, #36]	; 0x24
    6682:	2200      	movs	r2, #0
    6684:	4b64      	ldr	r3, [pc, #400]	; (6818 <_strtod_l+0xbf0>)
    6686:	f7fe f957 	bl	4938 <__aeabi_dmul>
    668a:	0005      	movs	r5, r0
    668c:	9108      	str	r1, [sp, #32]
    668e:	2280      	movs	r2, #128	; 0x80
    6690:	0612      	lsls	r2, r2, #24
    6692:	4694      	mov	ip, r2
    6694:	9b08      	ldr	r3, [sp, #32]
    6696:	951c      	str	r5, [sp, #112]	; 0x70
    6698:	4463      	add	r3, ip
    669a:	931d      	str	r3, [sp, #116]	; 0x74
    669c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    669e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    66a0:	920c      	str	r2, [sp, #48]	; 0x30
    66a2:	930d      	str	r3, [sp, #52]	; 0x34
    66a4:	e7a1      	b.n	65ea <_strtod_l+0x9c2>
    66a6:	2e01      	cmp	r6, #1
    66a8:	d102      	bne.n	66b0 <_strtod_l+0xa88>
    66aa:	2f00      	cmp	r7, #0
    66ac:	d100      	bne.n	66b0 <_strtod_l+0xa88>
    66ae:	e585      	b.n	61bc <_strtod_l+0x594>
    66b0:	2200      	movs	r2, #0
    66b2:	4b5a      	ldr	r3, [pc, #360]	; (681c <_strtod_l+0xbf4>)
    66b4:	2500      	movs	r5, #0
    66b6:	920c      	str	r2, [sp, #48]	; 0x30
    66b8:	930d      	str	r3, [sp, #52]	; 0x34
    66ba:	e794      	b.n	65e6 <_strtod_l+0x9be>
    66bc:	4b56      	ldr	r3, [pc, #344]	; (6818 <_strtod_l+0xbf0>)
    66be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    66c0:	9308      	str	r3, [sp, #32]
    66c2:	e7e4      	b.n	668e <_strtod_l+0xa66>
    66c4:	4b54      	ldr	r3, [pc, #336]	; (6818 <_strtod_l+0xbf0>)
    66c6:	9808      	ldr	r0, [sp, #32]
    66c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    66ca:	2200      	movs	r2, #0
    66cc:	f7fe f934 	bl	4938 <__aeabi_dmul>
    66d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66d2:	0005      	movs	r5, r0
    66d4:	9108      	str	r1, [sp, #32]
    66d6:	2b00      	cmp	r3, #0
    66d8:	d107      	bne.n	66ea <_strtod_l+0xac2>
    66da:	2380      	movs	r3, #128	; 0x80
    66dc:	061b      	lsls	r3, r3, #24
    66de:	18cb      	adds	r3, r1, r3
    66e0:	9016      	str	r0, [sp, #88]	; 0x58
    66e2:	9317      	str	r3, [sp, #92]	; 0x5c
    66e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    66e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    66e8:	e7da      	b.n	66a0 <_strtod_l+0xa78>
    66ea:	0002      	movs	r2, r0
    66ec:	9b08      	ldr	r3, [sp, #32]
    66ee:	9216      	str	r2, [sp, #88]	; 0x58
    66f0:	9317      	str	r3, [sp, #92]	; 0x5c
    66f2:	e7f7      	b.n	66e4 <_strtod_l+0xabc>
    66f4:	23d4      	movs	r3, #212	; 0xd4
    66f6:	049b      	lsls	r3, r3, #18
    66f8:	18cf      	adds	r7, r1, r3
    66fa:	9b06      	ldr	r3, [sp, #24]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d1a1      	bne.n	6644 <_strtod_l+0xa1c>
    6700:	4b40      	ldr	r3, [pc, #256]	; (6804 <_strtod_l+0xbdc>)
    6702:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6704:	970c      	str	r7, [sp, #48]	; 0x30
    6706:	403b      	ands	r3, r7
    6708:	429a      	cmp	r2, r3
    670a:	d19b      	bne.n	6644 <_strtod_l+0xa1c>
    670c:	9908      	ldr	r1, [sp, #32]
    670e:	0028      	movs	r0, r5
    6710:	f7fe fea8 	bl	5464 <__aeabi_d2iz>
    6714:	f7fe feda 	bl	54cc <__aeabi_i2d>
    6718:	000b      	movs	r3, r1
    671a:	0002      	movs	r2, r0
    671c:	9908      	ldr	r1, [sp, #32]
    671e:	0028      	movs	r0, r5
    6720:	f7fe fb8a 	bl	4e38 <__aeabi_dsub>
    6724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6726:	9008      	str	r0, [sp, #32]
    6728:	9109      	str	r1, [sp, #36]	; 0x24
    672a:	2b00      	cmp	r3, #0
    672c:	d104      	bne.n	6738 <_strtod_l+0xb10>
    672e:	2e00      	cmp	r6, #0
    6730:	d102      	bne.n	6738 <_strtod_l+0xb10>
    6732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6734:	031b      	lsls	r3, r3, #12
    6736:	d058      	beq.n	67ea <_strtod_l+0xbc2>
    6738:	9808      	ldr	r0, [sp, #32]
    673a:	9909      	ldr	r1, [sp, #36]	; 0x24
    673c:	4a38      	ldr	r2, [pc, #224]	; (6820 <_strtod_l+0xbf8>)
    673e:	4b39      	ldr	r3, [pc, #228]	; (6824 <_strtod_l+0xbfc>)
    6740:	f7fe fff8 	bl	5734 <__aeabi_dcmplt>
    6744:	2800      	cmp	r0, #0
    6746:	d000      	beq.n	674a <_strtod_l+0xb22>
    6748:	e4d2      	b.n	60f0 <_strtod_l+0x4c8>
    674a:	9808      	ldr	r0, [sp, #32]
    674c:	9909      	ldr	r1, [sp, #36]	; 0x24
    674e:	4a36      	ldr	r2, [pc, #216]	; (6828 <_strtod_l+0xc00>)
    6750:	4b31      	ldr	r3, [pc, #196]	; (6818 <_strtod_l+0xbf0>)
    6752:	f7ff f803 	bl	575c <__aeabi_dcmpgt>
    6756:	2800      	cmp	r0, #0
    6758:	d100      	bne.n	675c <_strtod_l+0xb34>
    675a:	e773      	b.n	6644 <_strtod_l+0xa1c>
    675c:	e4c8      	b.n	60f0 <_strtod_l+0x4c8>
    675e:	9b06      	ldr	r3, [sp, #24]
    6760:	2b00      	cmp	r3, #0
    6762:	d02a      	beq.n	67ba <_strtod_l+0xb92>
    6764:	23d4      	movs	r3, #212	; 0xd4
    6766:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6768:	04db      	lsls	r3, r3, #19
    676a:	429a      	cmp	r2, r3
    676c:	d825      	bhi.n	67ba <_strtod_l+0xb92>
    676e:	4a2f      	ldr	r2, [pc, #188]	; (682c <_strtod_l+0xc04>)
    6770:	4b2f      	ldr	r3, [pc, #188]	; (6830 <_strtod_l+0xc08>)
    6772:	0028      	movs	r0, r5
    6774:	9908      	ldr	r1, [sp, #32]
    6776:	f7fe ffe7 	bl	5748 <__aeabi_dcmple>
    677a:	2800      	cmp	r0, #0
    677c:	d016      	beq.n	67ac <_strtod_l+0xb84>
    677e:	0028      	movs	r0, r5
    6780:	9908      	ldr	r1, [sp, #32]
    6782:	f7fc ff05 	bl	3590 <__aeabi_d2uiz>
    6786:	2800      	cmp	r0, #0
    6788:	d100      	bne.n	678c <_strtod_l+0xb64>
    678a:	3001      	adds	r0, #1
    678c:	f001 fa20 	bl	7bd0 <__aeabi_ui2d>
    6790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6792:	0005      	movs	r5, r0
    6794:	9108      	str	r1, [sp, #32]
    6796:	2b00      	cmp	r3, #0
    6798:	d122      	bne.n	67e0 <_strtod_l+0xbb8>
    679a:	2380      	movs	r3, #128	; 0x80
    679c:	061b      	lsls	r3, r3, #24
    679e:	18cb      	adds	r3, r1, r3
    67a0:	9018      	str	r0, [sp, #96]	; 0x60
    67a2:	9319      	str	r3, [sp, #100]	; 0x64
    67a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    67a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    67a8:	920c      	str	r2, [sp, #48]	; 0x30
    67aa:	930d      	str	r3, [sp, #52]	; 0x34
    67ac:	22d6      	movs	r2, #214	; 0xd6
    67ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    67b0:	04d2      	lsls	r2, r2, #19
    67b2:	189b      	adds	r3, r3, r2
    67b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    67b6:	1a9b      	subs	r3, r3, r2
    67b8:	930d      	str	r3, [sp, #52]	; 0x34
    67ba:	980e      	ldr	r0, [sp, #56]	; 0x38
    67bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    67be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    67c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    67c2:	f000 ff7d 	bl	76c0 <__ulp>
    67c6:	0002      	movs	r2, r0
    67c8:	000b      	movs	r3, r1
    67ca:	0030      	movs	r0, r6
    67cc:	0039      	movs	r1, r7
    67ce:	f7fe f8b3 	bl	4938 <__aeabi_dmul>
    67d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    67d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67d6:	f7fd fa6b 	bl	3cb0 <__aeabi_dadd>
    67da:	0006      	movs	r6, r0
    67dc:	000f      	movs	r7, r1
    67de:	e78c      	b.n	66fa <_strtod_l+0xad2>
    67e0:	0002      	movs	r2, r0
    67e2:	9b08      	ldr	r3, [sp, #32]
    67e4:	9218      	str	r2, [sp, #96]	; 0x60
    67e6:	9319      	str	r3, [sp, #100]	; 0x64
    67e8:	e7dc      	b.n	67a4 <_strtod_l+0xb7c>
    67ea:	4a0d      	ldr	r2, [pc, #52]	; (6820 <_strtod_l+0xbf8>)
    67ec:	4b11      	ldr	r3, [pc, #68]	; (6834 <_strtod_l+0xc0c>)
    67ee:	9808      	ldr	r0, [sp, #32]
    67f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    67f2:	f7fe ff9f 	bl	5734 <__aeabi_dcmplt>
    67f6:	e7ae      	b.n	6756 <_strtod_l+0xb2e>
    67f8:	fff00000 	.word	0xfff00000
    67fc:	000fffff 	.word	0x000fffff
    6800:	3ff00000 	.word	0x3ff00000
    6804:	7ff00000 	.word	0x7ff00000
    6808:	7fe00000 	.word	0x7fe00000
    680c:	fcb00000 	.word	0xfcb00000
    6810:	7c9fffff 	.word	0x7c9fffff
    6814:	7fefffff 	.word	0x7fefffff
    6818:	3fe00000 	.word	0x3fe00000
    681c:	bff00000 	.word	0xbff00000
    6820:	94a03595 	.word	0x94a03595
    6824:	3fdfffff 	.word	0x3fdfffff
    6828:	35afe535 	.word	0x35afe535
    682c:	ffc00000 	.word	0xffc00000
    6830:	41dfffff 	.word	0x41dfffff
    6834:	3fcfffff 	.word	0x3fcfffff

00006838 <strtof>:
    6838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    683a:	4f23      	ldr	r7, [pc, #140]	; (68c8 <strtof+0x90>)
    683c:	0004      	movs	r4, r0
    683e:	6838      	ldr	r0, [r7, #0]
    6840:	000a      	movs	r2, r1
    6842:	6a03      	ldr	r3, [r0, #32]
    6844:	2b00      	cmp	r3, #0
    6846:	d100      	bne.n	684a <strtof+0x12>
    6848:	4b20      	ldr	r3, [pc, #128]	; (68cc <strtof+0x94>)
    684a:	0021      	movs	r1, r4
    684c:	f7ff f9ec 	bl	5c28 <_strtod_l>
    6850:	0005      	movs	r5, r0
    6852:	000c      	movs	r4, r1
    6854:	0002      	movs	r2, r0
    6856:	000b      	movs	r3, r1
    6858:	0028      	movs	r0, r5
    685a:	0021      	movs	r1, r4
    685c:	f001 f998 	bl	7b90 <__aeabi_dcmpun>
    6860:	2800      	cmp	r0, #0
    6862:	d005      	beq.n	6870 <strtof+0x38>
    6864:	2000      	movs	r0, #0
    6866:	f001 f85f 	bl	7928 <nanf>
    686a:	9001      	str	r0, [sp, #4]
    686c:	9801      	ldr	r0, [sp, #4]
    686e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6870:	0021      	movs	r1, r4
    6872:	0028      	movs	r0, r5
    6874:	f7fe febe 	bl	55f4 <__aeabi_d2f>
    6878:	9001      	str	r0, [sp, #4]
    687a:	9b01      	ldr	r3, [sp, #4]
    687c:	4914      	ldr	r1, [pc, #80]	; (68d0 <strtof+0x98>)
    687e:	005e      	lsls	r6, r3, #1
    6880:	0876      	lsrs	r6, r6, #1
    6882:	1c30      	adds	r0, r6, #0
    6884:	f001 f96c 	bl	7b60 <__aeabi_fcmpun>
    6888:	2800      	cmp	r0, #0
    688a:	d1ef      	bne.n	686c <strtof+0x34>
    688c:	4910      	ldr	r1, [pc, #64]	; (68d0 <strtof+0x98>)
    688e:	1c30      	adds	r0, r6, #0
    6890:	f001 f8a0 	bl	79d4 <__aeabi_fcmple>
    6894:	2800      	cmp	r0, #0
    6896:	d1e9      	bne.n	686c <strtof+0x34>
    6898:	2201      	movs	r2, #1
    689a:	0064      	lsls	r4, r4, #1
    689c:	0864      	lsrs	r4, r4, #1
    689e:	4252      	negs	r2, r2
    68a0:	4b0c      	ldr	r3, [pc, #48]	; (68d4 <strtof+0x9c>)
    68a2:	0028      	movs	r0, r5
    68a4:	0021      	movs	r1, r4
    68a6:	f001 f973 	bl	7b90 <__aeabi_dcmpun>
    68aa:	2800      	cmp	r0, #0
    68ac:	d108      	bne.n	68c0 <strtof+0x88>
    68ae:	2201      	movs	r2, #1
    68b0:	4b08      	ldr	r3, [pc, #32]	; (68d4 <strtof+0x9c>)
    68b2:	4252      	negs	r2, r2
    68b4:	0028      	movs	r0, r5
    68b6:	0021      	movs	r1, r4
    68b8:	f7fe ff46 	bl	5748 <__aeabi_dcmple>
    68bc:	2800      	cmp	r0, #0
    68be:	d0d5      	beq.n	686c <strtof+0x34>
    68c0:	2222      	movs	r2, #34	; 0x22
    68c2:	683b      	ldr	r3, [r7, #0]
    68c4:	601a      	str	r2, [r3, #0]
    68c6:	e7d1      	b.n	686c <strtof+0x34>
    68c8:	200000e0 	.word	0x200000e0
    68cc:	20000144 	.word	0x20000144
    68d0:	7f7fffff 	.word	0x7f7fffff
    68d4:	7fefffff 	.word	0x7fefffff

000068d8 <_strtol_l.isra.0>:
    68d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68da:	001f      	movs	r7, r3
    68dc:	000e      	movs	r6, r1
    68de:	b087      	sub	sp, #28
    68e0:	9005      	str	r0, [sp, #20]
    68e2:	9103      	str	r1, [sp, #12]
    68e4:	9202      	str	r2, [sp, #8]
    68e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    68e8:	7834      	ldrb	r4, [r6, #0]
    68ea:	f000 fbf4 	bl	70d6 <__locale_ctype_ptr_l>
    68ee:	2208      	movs	r2, #8
    68f0:	1900      	adds	r0, r0, r4
    68f2:	7843      	ldrb	r3, [r0, #1]
    68f4:	1c75      	adds	r5, r6, #1
    68f6:	4013      	ands	r3, r2
    68f8:	d10c      	bne.n	6914 <_strtol_l.isra.0+0x3c>
    68fa:	2c2d      	cmp	r4, #45	; 0x2d
    68fc:	d10c      	bne.n	6918 <_strtol_l.isra.0+0x40>
    68fe:	3301      	adds	r3, #1
    6900:	782c      	ldrb	r4, [r5, #0]
    6902:	9301      	str	r3, [sp, #4]
    6904:	1cb5      	adds	r5, r6, #2
    6906:	2f00      	cmp	r7, #0
    6908:	d00c      	beq.n	6924 <_strtol_l.isra.0+0x4c>
    690a:	2f10      	cmp	r7, #16
    690c:	d114      	bne.n	6938 <_strtol_l.isra.0+0x60>
    690e:	2c30      	cmp	r4, #48	; 0x30
    6910:	d00a      	beq.n	6928 <_strtol_l.isra.0+0x50>
    6912:	e011      	b.n	6938 <_strtol_l.isra.0+0x60>
    6914:	002e      	movs	r6, r5
    6916:	e7e6      	b.n	68e6 <_strtol_l.isra.0+0xe>
    6918:	9301      	str	r3, [sp, #4]
    691a:	2c2b      	cmp	r4, #43	; 0x2b
    691c:	d1f3      	bne.n	6906 <_strtol_l.isra.0+0x2e>
    691e:	782c      	ldrb	r4, [r5, #0]
    6920:	1cb5      	adds	r5, r6, #2
    6922:	e7f0      	b.n	6906 <_strtol_l.isra.0+0x2e>
    6924:	2c30      	cmp	r4, #48	; 0x30
    6926:	d12f      	bne.n	6988 <_strtol_l.isra.0+0xb0>
    6928:	2220      	movs	r2, #32
    692a:	782b      	ldrb	r3, [r5, #0]
    692c:	4393      	bics	r3, r2
    692e:	2b58      	cmp	r3, #88	; 0x58
    6930:	d151      	bne.n	69d6 <_strtol_l.isra.0+0xfe>
    6932:	2710      	movs	r7, #16
    6934:	786c      	ldrb	r4, [r5, #1]
    6936:	3502      	adds	r5, #2
    6938:	9b01      	ldr	r3, [sp, #4]
    693a:	4a29      	ldr	r2, [pc, #164]	; (69e0 <_strtol_l.isra.0+0x108>)
    693c:	0039      	movs	r1, r7
    693e:	189e      	adds	r6, r3, r2
    6940:	0030      	movs	r0, r6
    6942:	f7fc fd35 	bl	33b0 <__aeabi_uidivmod>
    6946:	0030      	movs	r0, r6
    6948:	9104      	str	r1, [sp, #16]
    694a:	0039      	movs	r1, r7
    694c:	f7fc fcaa 	bl	32a4 <__udivsi3>
    6950:	2101      	movs	r1, #1
    6952:	2300      	movs	r3, #0
    6954:	4249      	negs	r1, r1
    6956:	0002      	movs	r2, r0
    6958:	468c      	mov	ip, r1
    695a:	0018      	movs	r0, r3
    695c:	0021      	movs	r1, r4
    695e:	3930      	subs	r1, #48	; 0x30
    6960:	2909      	cmp	r1, #9
    6962:	d813      	bhi.n	698c <_strtol_l.isra.0+0xb4>
    6964:	000c      	movs	r4, r1
    6966:	42a7      	cmp	r7, r4
    6968:	dd1c      	ble.n	69a4 <_strtol_l.isra.0+0xcc>
    696a:	1c59      	adds	r1, r3, #1
    696c:	d009      	beq.n	6982 <_strtol_l.isra.0+0xaa>
    696e:	4663      	mov	r3, ip
    6970:	4282      	cmp	r2, r0
    6972:	d306      	bcc.n	6982 <_strtol_l.isra.0+0xaa>
    6974:	d102      	bne.n	697c <_strtol_l.isra.0+0xa4>
    6976:	9904      	ldr	r1, [sp, #16]
    6978:	42a1      	cmp	r1, r4
    697a:	db02      	blt.n	6982 <_strtol_l.isra.0+0xaa>
    697c:	2301      	movs	r3, #1
    697e:	4378      	muls	r0, r7
    6980:	1820      	adds	r0, r4, r0
    6982:	782c      	ldrb	r4, [r5, #0]
    6984:	3501      	adds	r5, #1
    6986:	e7e9      	b.n	695c <_strtol_l.isra.0+0x84>
    6988:	270a      	movs	r7, #10
    698a:	e7d5      	b.n	6938 <_strtol_l.isra.0+0x60>
    698c:	0021      	movs	r1, r4
    698e:	3941      	subs	r1, #65	; 0x41
    6990:	2919      	cmp	r1, #25
    6992:	d801      	bhi.n	6998 <_strtol_l.isra.0+0xc0>
    6994:	3c37      	subs	r4, #55	; 0x37
    6996:	e7e6      	b.n	6966 <_strtol_l.isra.0+0x8e>
    6998:	0021      	movs	r1, r4
    699a:	3961      	subs	r1, #97	; 0x61
    699c:	2919      	cmp	r1, #25
    699e:	d801      	bhi.n	69a4 <_strtol_l.isra.0+0xcc>
    69a0:	3c57      	subs	r4, #87	; 0x57
    69a2:	e7e0      	b.n	6966 <_strtol_l.isra.0+0x8e>
    69a4:	1c5a      	adds	r2, r3, #1
    69a6:	d108      	bne.n	69ba <_strtol_l.isra.0+0xe2>
    69a8:	9a05      	ldr	r2, [sp, #20]
    69aa:	3323      	adds	r3, #35	; 0x23
    69ac:	6013      	str	r3, [r2, #0]
    69ae:	9b02      	ldr	r3, [sp, #8]
    69b0:	0030      	movs	r0, r6
    69b2:	2b00      	cmp	r3, #0
    69b4:	d10b      	bne.n	69ce <_strtol_l.isra.0+0xf6>
    69b6:	b007      	add	sp, #28
    69b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69ba:	9a01      	ldr	r2, [sp, #4]
    69bc:	2a00      	cmp	r2, #0
    69be:	d000      	beq.n	69c2 <_strtol_l.isra.0+0xea>
    69c0:	4240      	negs	r0, r0
    69c2:	9a02      	ldr	r2, [sp, #8]
    69c4:	2a00      	cmp	r2, #0
    69c6:	d0f6      	beq.n	69b6 <_strtol_l.isra.0+0xde>
    69c8:	9a03      	ldr	r2, [sp, #12]
    69ca:	2b00      	cmp	r3, #0
    69cc:	d000      	beq.n	69d0 <_strtol_l.isra.0+0xf8>
    69ce:	1e6a      	subs	r2, r5, #1
    69d0:	9b02      	ldr	r3, [sp, #8]
    69d2:	601a      	str	r2, [r3, #0]
    69d4:	e7ef      	b.n	69b6 <_strtol_l.isra.0+0xde>
    69d6:	2430      	movs	r4, #48	; 0x30
    69d8:	2f00      	cmp	r7, #0
    69da:	d1ad      	bne.n	6938 <_strtol_l.isra.0+0x60>
    69dc:	3708      	adds	r7, #8
    69de:	e7ab      	b.n	6938 <_strtol_l.isra.0+0x60>
    69e0:	7fffffff 	.word	0x7fffffff

000069e4 <strtol>:
    69e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    69e6:	0013      	movs	r3, r2
    69e8:	4a06      	ldr	r2, [pc, #24]	; (6a04 <strtol+0x20>)
    69ea:	0005      	movs	r5, r0
    69ec:	6810      	ldr	r0, [r2, #0]
    69ee:	6a04      	ldr	r4, [r0, #32]
    69f0:	2c00      	cmp	r4, #0
    69f2:	d100      	bne.n	69f6 <strtol+0x12>
    69f4:	4c04      	ldr	r4, [pc, #16]	; (6a08 <strtol+0x24>)
    69f6:	000a      	movs	r2, r1
    69f8:	9400      	str	r4, [sp, #0]
    69fa:	0029      	movs	r1, r5
    69fc:	f7ff ff6c 	bl	68d8 <_strtol_l.isra.0>
    6a00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	200000e0 	.word	0x200000e0
    6a08:	20000144 	.word	0x20000144

00006a0c <__utoa>:
    6a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a0e:	0017      	movs	r7, r2
    6a10:	b08f      	sub	sp, #60	; 0x3c
    6a12:	2225      	movs	r2, #37	; 0x25
    6a14:	0006      	movs	r6, r0
    6a16:	000d      	movs	r5, r1
    6a18:	a804      	add	r0, sp, #16
    6a1a:	4918      	ldr	r1, [pc, #96]	; (6a7c <__utoa+0x70>)
    6a1c:	f7ff f820 	bl	5a60 <memcpy>
    6a20:	aa04      	add	r2, sp, #16
    6a22:	1ebb      	subs	r3, r7, #2
    6a24:	2400      	movs	r4, #0
    6a26:	9203      	str	r2, [sp, #12]
    6a28:	2b22      	cmp	r3, #34	; 0x22
    6a2a:	d905      	bls.n	6a38 <__utoa+0x2c>
    6a2c:	702c      	strb	r4, [r5, #0]
    6a2e:	0025      	movs	r5, r4
    6a30:	0028      	movs	r0, r5
    6a32:	b00f      	add	sp, #60	; 0x3c
    6a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a36:	9c01      	ldr	r4, [sp, #4]
    6a38:	1c63      	adds	r3, r4, #1
    6a3a:	9301      	str	r3, [sp, #4]
    6a3c:	18eb      	adds	r3, r5, r3
    6a3e:	9300      	str	r3, [sp, #0]
    6a40:	0030      	movs	r0, r6
    6a42:	3b01      	subs	r3, #1
    6a44:	0039      	movs	r1, r7
    6a46:	9302      	str	r3, [sp, #8]
    6a48:	f7fc fcb2 	bl	33b0 <__aeabi_uidivmod>
    6a4c:	9b03      	ldr	r3, [sp, #12]
    6a4e:	9a02      	ldr	r2, [sp, #8]
    6a50:	5c5b      	ldrb	r3, [r3, r1]
    6a52:	0030      	movs	r0, r6
    6a54:	7013      	strb	r3, [r2, #0]
    6a56:	0039      	movs	r1, r7
    6a58:	f7fc fc24 	bl	32a4 <__udivsi3>
    6a5c:	1e06      	subs	r6, r0, #0
    6a5e:	d1ea      	bne.n	6a36 <__utoa+0x2a>
    6a60:	9b00      	ldr	r3, [sp, #0]
    6a62:	7018      	strb	r0, [r3, #0]
    6a64:	002b      	movs	r3, r5
    6a66:	1b5a      	subs	r2, r3, r5
    6a68:	4294      	cmp	r4, r2
    6a6a:	dde1      	ble.n	6a30 <__utoa+0x24>
    6a6c:	781a      	ldrb	r2, [r3, #0]
    6a6e:	5d29      	ldrb	r1, [r5, r4]
    6a70:	7019      	strb	r1, [r3, #0]
    6a72:	552a      	strb	r2, [r5, r4]
    6a74:	3301      	adds	r3, #1
    6a76:	3c01      	subs	r4, #1
    6a78:	e7f5      	b.n	6a66 <__utoa+0x5a>
    6a7a:	46c0      	nop			; (mov r8, r8)
    6a7c:	00007f20 	.word	0x00007f20

00006a80 <rshift>:
    6a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a82:	0006      	movs	r6, r0
    6a84:	6905      	ldr	r5, [r0, #16]
    6a86:	3614      	adds	r6, #20
    6a88:	114b      	asrs	r3, r1, #5
    6a8a:	0034      	movs	r4, r6
    6a8c:	42ab      	cmp	r3, r5
    6a8e:	da1a      	bge.n	6ac6 <rshift+0x46>
    6a90:	221f      	movs	r2, #31
    6a92:	00ad      	lsls	r5, r5, #2
    6a94:	009b      	lsls	r3, r3, #2
    6a96:	1975      	adds	r5, r6, r5
    6a98:	18f3      	adds	r3, r6, r3
    6a9a:	4011      	ands	r1, r2
    6a9c:	d107      	bne.n	6aae <rshift+0x2e>
    6a9e:	001a      	movs	r2, r3
    6aa0:	0033      	movs	r3, r6
    6aa2:	001c      	movs	r4, r3
    6aa4:	4295      	cmp	r5, r2
    6aa6:	d90e      	bls.n	6ac6 <rshift+0x46>
    6aa8:	ca02      	ldmia	r2!, {r1}
    6aaa:	c302      	stmia	r3!, {r1}
    6aac:	e7f9      	b.n	6aa2 <rshift+0x22>
    6aae:	cb04      	ldmia	r3!, {r2}
    6ab0:	2720      	movs	r7, #32
    6ab2:	40ca      	lsrs	r2, r1
    6ab4:	46b4      	mov	ip, r6
    6ab6:	1a7f      	subs	r7, r7, r1
    6ab8:	4664      	mov	r4, ip
    6aba:	429d      	cmp	r5, r3
    6abc:	d809      	bhi.n	6ad2 <rshift+0x52>
    6abe:	6022      	str	r2, [r4, #0]
    6ac0:	2a00      	cmp	r2, #0
    6ac2:	d000      	beq.n	6ac6 <rshift+0x46>
    6ac4:	3404      	adds	r4, #4
    6ac6:	1ba3      	subs	r3, r4, r6
    6ac8:	109b      	asrs	r3, r3, #2
    6aca:	6103      	str	r3, [r0, #16]
    6acc:	d100      	bne.n	6ad0 <rshift+0x50>
    6ace:	6143      	str	r3, [r0, #20]
    6ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ad2:	681c      	ldr	r4, [r3, #0]
    6ad4:	40bc      	lsls	r4, r7
    6ad6:	4322      	orrs	r2, r4
    6ad8:	4664      	mov	r4, ip
    6ada:	c404      	stmia	r4!, {r2}
    6adc:	cb04      	ldmia	r3!, {r2}
    6ade:	46a4      	mov	ip, r4
    6ae0:	40ca      	lsrs	r2, r1
    6ae2:	e7e9      	b.n	6ab8 <rshift+0x38>

00006ae4 <__hexdig_fun>:
    6ae4:	0003      	movs	r3, r0
    6ae6:	3b30      	subs	r3, #48	; 0x30
    6ae8:	2b09      	cmp	r3, #9
    6aea:	d803      	bhi.n	6af4 <__hexdig_fun+0x10>
    6aec:	3820      	subs	r0, #32
    6aee:	b2c3      	uxtb	r3, r0
    6af0:	0018      	movs	r0, r3
    6af2:	4770      	bx	lr
    6af4:	0003      	movs	r3, r0
    6af6:	3b61      	subs	r3, #97	; 0x61
    6af8:	2b05      	cmp	r3, #5
    6afa:	d801      	bhi.n	6b00 <__hexdig_fun+0x1c>
    6afc:	3847      	subs	r0, #71	; 0x47
    6afe:	e7f6      	b.n	6aee <__hexdig_fun+0xa>
    6b00:	0002      	movs	r2, r0
    6b02:	3a41      	subs	r2, #65	; 0x41
    6b04:	2300      	movs	r3, #0
    6b06:	2a05      	cmp	r2, #5
    6b08:	d8f2      	bhi.n	6af0 <__hexdig_fun+0xc>
    6b0a:	3827      	subs	r0, #39	; 0x27
    6b0c:	e7ef      	b.n	6aee <__hexdig_fun+0xa>

00006b0e <__gethex>:
    6b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b10:	b08d      	sub	sp, #52	; 0x34
    6b12:	9005      	str	r0, [sp, #20]
    6b14:	9814      	ldr	r0, [sp, #80]	; 0x50
    6b16:	9109      	str	r1, [sp, #36]	; 0x24
    6b18:	9202      	str	r2, [sp, #8]
    6b1a:	930a      	str	r3, [sp, #40]	; 0x28
    6b1c:	f000 faec 	bl	70f8 <__localeconv_l>
    6b20:	6803      	ldr	r3, [r0, #0]
    6b22:	0018      	movs	r0, r3
    6b24:	9307      	str	r3, [sp, #28]
    6b26:	f7ff f82a 	bl	5b7e <strlen>
    6b2a:	2202      	movs	r2, #2
    6b2c:	9b07      	ldr	r3, [sp, #28]
    6b2e:	4252      	negs	r2, r2
    6b30:	181b      	adds	r3, r3, r0
    6b32:	3b01      	subs	r3, #1
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	9004      	str	r0, [sp, #16]
    6b38:	930b      	str	r3, [sp, #44]	; 0x2c
    6b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b3c:	6819      	ldr	r1, [r3, #0]
    6b3e:	1c8b      	adds	r3, r1, #2
    6b40:	1a52      	subs	r2, r2, r1
    6b42:	18d1      	adds	r1, r2, r3
    6b44:	9301      	str	r3, [sp, #4]
    6b46:	9108      	str	r1, [sp, #32]
    6b48:	9901      	ldr	r1, [sp, #4]
    6b4a:	3301      	adds	r3, #1
    6b4c:	7808      	ldrb	r0, [r1, #0]
    6b4e:	2830      	cmp	r0, #48	; 0x30
    6b50:	d0f7      	beq.n	6b42 <__gethex+0x34>
    6b52:	f7ff ffc7 	bl	6ae4 <__hexdig_fun>
    6b56:	1e07      	subs	r7, r0, #0
    6b58:	d000      	beq.n	6b5c <__gethex+0x4e>
    6b5a:	e06b      	b.n	6c34 <__gethex+0x126>
    6b5c:	9a04      	ldr	r2, [sp, #16]
    6b5e:	9907      	ldr	r1, [sp, #28]
    6b60:	9801      	ldr	r0, [sp, #4]
    6b62:	f000 fef3 	bl	794c <strncmp>
    6b66:	2800      	cmp	r0, #0
    6b68:	d000      	beq.n	6b6c <__gethex+0x5e>
    6b6a:	e06b      	b.n	6c44 <__gethex+0x136>
    6b6c:	9b01      	ldr	r3, [sp, #4]
    6b6e:	9a04      	ldr	r2, [sp, #16]
    6b70:	189c      	adds	r4, r3, r2
    6b72:	7820      	ldrb	r0, [r4, #0]
    6b74:	f7ff ffb6 	bl	6ae4 <__hexdig_fun>
    6b78:	2800      	cmp	r0, #0
    6b7a:	d067      	beq.n	6c4c <__gethex+0x13e>
    6b7c:	9401      	str	r4, [sp, #4]
    6b7e:	9b01      	ldr	r3, [sp, #4]
    6b80:	7818      	ldrb	r0, [r3, #0]
    6b82:	2830      	cmp	r0, #48	; 0x30
    6b84:	d052      	beq.n	6c2c <__gethex+0x11e>
    6b86:	f7ff ffad 	bl	6ae4 <__hexdig_fun>
    6b8a:	4243      	negs	r3, r0
    6b8c:	4143      	adcs	r3, r0
    6b8e:	9303      	str	r3, [sp, #12]
    6b90:	2301      	movs	r3, #1
    6b92:	0026      	movs	r6, r4
    6b94:	9308      	str	r3, [sp, #32]
    6b96:	9c01      	ldr	r4, [sp, #4]
    6b98:	7820      	ldrb	r0, [r4, #0]
    6b9a:	f7ff ffa3 	bl	6ae4 <__hexdig_fun>
    6b9e:	2800      	cmp	r0, #0
    6ba0:	d14c      	bne.n	6c3c <__gethex+0x12e>
    6ba2:	9a04      	ldr	r2, [sp, #16]
    6ba4:	9907      	ldr	r1, [sp, #28]
    6ba6:	0020      	movs	r0, r4
    6ba8:	f000 fed0 	bl	794c <strncmp>
    6bac:	2800      	cmp	r0, #0
    6bae:	d109      	bne.n	6bc4 <__gethex+0xb6>
    6bb0:	2e00      	cmp	r6, #0
    6bb2:	d109      	bne.n	6bc8 <__gethex+0xba>
    6bb4:	9b04      	ldr	r3, [sp, #16]
    6bb6:	18e4      	adds	r4, r4, r3
    6bb8:	0026      	movs	r6, r4
    6bba:	7820      	ldrb	r0, [r4, #0]
    6bbc:	f7ff ff92 	bl	6ae4 <__hexdig_fun>
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d13d      	bne.n	6c40 <__gethex+0x132>
    6bc4:	1e37      	subs	r7, r6, #0
    6bc6:	d001      	beq.n	6bcc <__gethex+0xbe>
    6bc8:	1b37      	subs	r7, r6, r4
    6bca:	00bf      	lsls	r7, r7, #2
    6bcc:	7823      	ldrb	r3, [r4, #0]
    6bce:	2b50      	cmp	r3, #80	; 0x50
    6bd0:	d001      	beq.n	6bd6 <__gethex+0xc8>
    6bd2:	2b70      	cmp	r3, #112	; 0x70
    6bd4:	d147      	bne.n	6c66 <__gethex+0x158>
    6bd6:	7863      	ldrb	r3, [r4, #1]
    6bd8:	2b2b      	cmp	r3, #43	; 0x2b
    6bda:	d03d      	beq.n	6c58 <__gethex+0x14a>
    6bdc:	2b2d      	cmp	r3, #45	; 0x2d
    6bde:	d037      	beq.n	6c50 <__gethex+0x142>
    6be0:	2300      	movs	r3, #0
    6be2:	1c66      	adds	r6, r4, #1
    6be4:	9306      	str	r3, [sp, #24]
    6be6:	7830      	ldrb	r0, [r6, #0]
    6be8:	f7ff ff7c 	bl	6ae4 <__hexdig_fun>
    6bec:	1e43      	subs	r3, r0, #1
    6bee:	b2db      	uxtb	r3, r3
    6bf0:	2b18      	cmp	r3, #24
    6bf2:	d838      	bhi.n	6c66 <__gethex+0x158>
    6bf4:	3810      	subs	r0, #16
    6bf6:	0005      	movs	r5, r0
    6bf8:	3601      	adds	r6, #1
    6bfa:	7830      	ldrb	r0, [r6, #0]
    6bfc:	f7ff ff72 	bl	6ae4 <__hexdig_fun>
    6c00:	1e43      	subs	r3, r0, #1
    6c02:	b2db      	uxtb	r3, r3
    6c04:	2b18      	cmp	r3, #24
    6c06:	d929      	bls.n	6c5c <__gethex+0x14e>
    6c08:	9b06      	ldr	r3, [sp, #24]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d000      	beq.n	6c10 <__gethex+0x102>
    6c0e:	426d      	negs	r5, r5
    6c10:	197f      	adds	r7, r7, r5
    6c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6c14:	601e      	str	r6, [r3, #0]
    6c16:	9b03      	ldr	r3, [sp, #12]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d026      	beq.n	6c6a <__gethex+0x15c>
    6c1c:	2600      	movs	r6, #0
    6c1e:	9b08      	ldr	r3, [sp, #32]
    6c20:	42b3      	cmp	r3, r6
    6c22:	d100      	bne.n	6c26 <__gethex+0x118>
    6c24:	3606      	adds	r6, #6
    6c26:	0030      	movs	r0, r6
    6c28:	b00d      	add	sp, #52	; 0x34
    6c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c2c:	9b01      	ldr	r3, [sp, #4]
    6c2e:	3301      	adds	r3, #1
    6c30:	9301      	str	r3, [sp, #4]
    6c32:	e7a4      	b.n	6b7e <__gethex+0x70>
    6c34:	2300      	movs	r3, #0
    6c36:	9303      	str	r3, [sp, #12]
    6c38:	001e      	movs	r6, r3
    6c3a:	e7ac      	b.n	6b96 <__gethex+0x88>
    6c3c:	3401      	adds	r4, #1
    6c3e:	e7ab      	b.n	6b98 <__gethex+0x8a>
    6c40:	3401      	adds	r4, #1
    6c42:	e7ba      	b.n	6bba <__gethex+0xac>
    6c44:	9c01      	ldr	r4, [sp, #4]
    6c46:	2301      	movs	r3, #1
    6c48:	9303      	str	r3, [sp, #12]
    6c4a:	e7bf      	b.n	6bcc <__gethex+0xbe>
    6c4c:	0007      	movs	r7, r0
    6c4e:	e7fa      	b.n	6c46 <__gethex+0x138>
    6c50:	2301      	movs	r3, #1
    6c52:	9306      	str	r3, [sp, #24]
    6c54:	1ca6      	adds	r6, r4, #2
    6c56:	e7c6      	b.n	6be6 <__gethex+0xd8>
    6c58:	2300      	movs	r3, #0
    6c5a:	e7fa      	b.n	6c52 <__gethex+0x144>
    6c5c:	230a      	movs	r3, #10
    6c5e:	435d      	muls	r5, r3
    6c60:	182d      	adds	r5, r5, r0
    6c62:	3d10      	subs	r5, #16
    6c64:	e7c8      	b.n	6bf8 <__gethex+0xea>
    6c66:	0026      	movs	r6, r4
    6c68:	e7d3      	b.n	6c12 <__gethex+0x104>
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	9903      	ldr	r1, [sp, #12]
    6c6e:	1ae3      	subs	r3, r4, r3
    6c70:	3b01      	subs	r3, #1
    6c72:	2b07      	cmp	r3, #7
    6c74:	dc47      	bgt.n	6d06 <__gethex+0x1f8>
    6c76:	9805      	ldr	r0, [sp, #20]
    6c78:	f000 fa54 	bl	7124 <_Balloc>
    6c7c:	0003      	movs	r3, r0
    6c7e:	3314      	adds	r3, #20
    6c80:	9303      	str	r3, [sp, #12]
    6c82:	9308      	str	r3, [sp, #32]
    6c84:	2300      	movs	r3, #0
    6c86:	0005      	movs	r5, r0
    6c88:	001e      	movs	r6, r3
    6c8a:	9306      	str	r3, [sp, #24]
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	42a3      	cmp	r3, r4
    6c90:	d33c      	bcc.n	6d0c <__gethex+0x1fe>
    6c92:	9c08      	ldr	r4, [sp, #32]
    6c94:	9b03      	ldr	r3, [sp, #12]
    6c96:	c440      	stmia	r4!, {r6}
    6c98:	1ae4      	subs	r4, r4, r3
    6c9a:	10a4      	asrs	r4, r4, #2
    6c9c:	612c      	str	r4, [r5, #16]
    6c9e:	0030      	movs	r0, r6
    6ca0:	f000 fb0c 	bl	72bc <__hi0bits>
    6ca4:	9b02      	ldr	r3, [sp, #8]
    6ca6:	0164      	lsls	r4, r4, #5
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	1a26      	subs	r6, r4, r0
    6cac:	9301      	str	r3, [sp, #4]
    6cae:	429e      	cmp	r6, r3
    6cb0:	dd5f      	ble.n	6d72 <__gethex+0x264>
    6cb2:	1af6      	subs	r6, r6, r3
    6cb4:	0031      	movs	r1, r6
    6cb6:	0028      	movs	r0, r5
    6cb8:	f000 fe05 	bl	78c6 <__any_on>
    6cbc:	1e04      	subs	r4, r0, #0
    6cbe:	d00f      	beq.n	6ce0 <__gethex+0x1d2>
    6cc0:	2401      	movs	r4, #1
    6cc2:	211f      	movs	r1, #31
    6cc4:	0020      	movs	r0, r4
    6cc6:	1e73      	subs	r3, r6, #1
    6cc8:	4019      	ands	r1, r3
    6cca:	4088      	lsls	r0, r1
    6ccc:	0001      	movs	r1, r0
    6cce:	115a      	asrs	r2, r3, #5
    6cd0:	9803      	ldr	r0, [sp, #12]
    6cd2:	0092      	lsls	r2, r2, #2
    6cd4:	5812      	ldr	r2, [r2, r0]
    6cd6:	420a      	tst	r2, r1
    6cd8:	d002      	beq.n	6ce0 <__gethex+0x1d2>
    6cda:	42a3      	cmp	r3, r4
    6cdc:	dc41      	bgt.n	6d62 <__gethex+0x254>
    6cde:	2402      	movs	r4, #2
    6ce0:	0031      	movs	r1, r6
    6ce2:	0028      	movs	r0, r5
    6ce4:	f7ff fecc 	bl	6a80 <rshift>
    6ce8:	19bf      	adds	r7, r7, r6
    6cea:	9b02      	ldr	r3, [sp, #8]
    6cec:	689b      	ldr	r3, [r3, #8]
    6cee:	9304      	str	r3, [sp, #16]
    6cf0:	429f      	cmp	r7, r3
    6cf2:	dd4e      	ble.n	6d92 <__gethex+0x284>
    6cf4:	0029      	movs	r1, r5
    6cf6:	9805      	ldr	r0, [sp, #20]
    6cf8:	f000 fa4c 	bl	7194 <_Bfree>
    6cfc:	2300      	movs	r3, #0
    6cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6d00:	26a3      	movs	r6, #163	; 0xa3
    6d02:	6013      	str	r3, [r2, #0]
    6d04:	e78f      	b.n	6c26 <__gethex+0x118>
    6d06:	3101      	adds	r1, #1
    6d08:	105b      	asrs	r3, r3, #1
    6d0a:	e7b2      	b.n	6c72 <__gethex+0x164>
    6d0c:	1e63      	subs	r3, r4, #1
    6d0e:	9309      	str	r3, [sp, #36]	; 0x24
    6d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6d12:	781b      	ldrb	r3, [r3, #0]
    6d14:	4293      	cmp	r3, r2
    6d16:	d015      	beq.n	6d44 <__gethex+0x236>
    6d18:	9b06      	ldr	r3, [sp, #24]
    6d1a:	2b20      	cmp	r3, #32
    6d1c:	d105      	bne.n	6d2a <__gethex+0x21c>
    6d1e:	9b08      	ldr	r3, [sp, #32]
    6d20:	601e      	str	r6, [r3, #0]
    6d22:	2600      	movs	r6, #0
    6d24:	3304      	adds	r3, #4
    6d26:	9308      	str	r3, [sp, #32]
    6d28:	9606      	str	r6, [sp, #24]
    6d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d2c:	7818      	ldrb	r0, [r3, #0]
    6d2e:	f7ff fed9 	bl	6ae4 <__hexdig_fun>
    6d32:	230f      	movs	r3, #15
    6d34:	4018      	ands	r0, r3
    6d36:	9b06      	ldr	r3, [sp, #24]
    6d38:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6d3a:	4098      	lsls	r0, r3
    6d3c:	3304      	adds	r3, #4
    6d3e:	4306      	orrs	r6, r0
    6d40:	9306      	str	r3, [sp, #24]
    6d42:	e7a3      	b.n	6c8c <__gethex+0x17e>
    6d44:	2301      	movs	r3, #1
    6d46:	9a04      	ldr	r2, [sp, #16]
    6d48:	1a9c      	subs	r4, r3, r2
    6d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d4c:	191c      	adds	r4, r3, r4
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	42a3      	cmp	r3, r4
    6d52:	d8e1      	bhi.n	6d18 <__gethex+0x20a>
    6d54:	9907      	ldr	r1, [sp, #28]
    6d56:	0020      	movs	r0, r4
    6d58:	f000 fdf8 	bl	794c <strncmp>
    6d5c:	2800      	cmp	r0, #0
    6d5e:	d095      	beq.n	6c8c <__gethex+0x17e>
    6d60:	e7da      	b.n	6d18 <__gethex+0x20a>
    6d62:	1eb1      	subs	r1, r6, #2
    6d64:	0028      	movs	r0, r5
    6d66:	f000 fdae 	bl	78c6 <__any_on>
    6d6a:	2800      	cmp	r0, #0
    6d6c:	d0b7      	beq.n	6cde <__gethex+0x1d0>
    6d6e:	2403      	movs	r4, #3
    6d70:	e7b6      	b.n	6ce0 <__gethex+0x1d2>
    6d72:	9b01      	ldr	r3, [sp, #4]
    6d74:	2400      	movs	r4, #0
    6d76:	429e      	cmp	r6, r3
    6d78:	dab7      	bge.n	6cea <__gethex+0x1dc>
    6d7a:	1b9e      	subs	r6, r3, r6
    6d7c:	0029      	movs	r1, r5
    6d7e:	0032      	movs	r2, r6
    6d80:	9805      	ldr	r0, [sp, #20]
    6d82:	f000 fbcf 	bl	7524 <__lshift>
    6d86:	0003      	movs	r3, r0
    6d88:	3314      	adds	r3, #20
    6d8a:	0005      	movs	r5, r0
    6d8c:	1bbf      	subs	r7, r7, r6
    6d8e:	9303      	str	r3, [sp, #12]
    6d90:	e7ab      	b.n	6cea <__gethex+0x1dc>
    6d92:	9b02      	ldr	r3, [sp, #8]
    6d94:	685e      	ldr	r6, [r3, #4]
    6d96:	42b7      	cmp	r7, r6
    6d98:	da6b      	bge.n	6e72 <__gethex+0x364>
    6d9a:	9b01      	ldr	r3, [sp, #4]
    6d9c:	1bf6      	subs	r6, r6, r7
    6d9e:	42b3      	cmp	r3, r6
    6da0:	dc32      	bgt.n	6e08 <__gethex+0x2fa>
    6da2:	9b02      	ldr	r3, [sp, #8]
    6da4:	68db      	ldr	r3, [r3, #12]
    6da6:	2b02      	cmp	r3, #2
    6da8:	d026      	beq.n	6df8 <__gethex+0x2ea>
    6daa:	2b03      	cmp	r3, #3
    6dac:	d028      	beq.n	6e00 <__gethex+0x2f2>
    6dae:	2b01      	cmp	r3, #1
    6db0:	d119      	bne.n	6de6 <__gethex+0x2d8>
    6db2:	9b01      	ldr	r3, [sp, #4]
    6db4:	42b3      	cmp	r3, r6
    6db6:	d116      	bne.n	6de6 <__gethex+0x2d8>
    6db8:	2b01      	cmp	r3, #1
    6dba:	dc0d      	bgt.n	6dd8 <__gethex+0x2ca>
    6dbc:	9b02      	ldr	r3, [sp, #8]
    6dbe:	2662      	movs	r6, #98	; 0x62
    6dc0:	685b      	ldr	r3, [r3, #4]
    6dc2:	9301      	str	r3, [sp, #4]
    6dc4:	9a01      	ldr	r2, [sp, #4]
    6dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6dc8:	601a      	str	r2, [r3, #0]
    6dca:	2301      	movs	r3, #1
    6dcc:	9a03      	ldr	r2, [sp, #12]
    6dce:	612b      	str	r3, [r5, #16]
    6dd0:	6013      	str	r3, [r2, #0]
    6dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6dd4:	601d      	str	r5, [r3, #0]
    6dd6:	e726      	b.n	6c26 <__gethex+0x118>
    6dd8:	9901      	ldr	r1, [sp, #4]
    6dda:	0028      	movs	r0, r5
    6ddc:	3901      	subs	r1, #1
    6dde:	f000 fd72 	bl	78c6 <__any_on>
    6de2:	2800      	cmp	r0, #0
    6de4:	d1ea      	bne.n	6dbc <__gethex+0x2ae>
    6de6:	0029      	movs	r1, r5
    6de8:	9805      	ldr	r0, [sp, #20]
    6dea:	f000 f9d3 	bl	7194 <_Bfree>
    6dee:	2300      	movs	r3, #0
    6df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6df2:	2650      	movs	r6, #80	; 0x50
    6df4:	6013      	str	r3, [r2, #0]
    6df6:	e716      	b.n	6c26 <__gethex+0x118>
    6df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d0de      	beq.n	6dbc <__gethex+0x2ae>
    6dfe:	e7f2      	b.n	6de6 <__gethex+0x2d8>
    6e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6e02:	2b00      	cmp	r3, #0
    6e04:	d1da      	bne.n	6dbc <__gethex+0x2ae>
    6e06:	e7ee      	b.n	6de6 <__gethex+0x2d8>
    6e08:	1e77      	subs	r7, r6, #1
    6e0a:	2c00      	cmp	r4, #0
    6e0c:	d12f      	bne.n	6e6e <__gethex+0x360>
    6e0e:	2f00      	cmp	r7, #0
    6e10:	d004      	beq.n	6e1c <__gethex+0x30e>
    6e12:	0039      	movs	r1, r7
    6e14:	0028      	movs	r0, r5
    6e16:	f000 fd56 	bl	78c6 <__any_on>
    6e1a:	0004      	movs	r4, r0
    6e1c:	231f      	movs	r3, #31
    6e1e:	117a      	asrs	r2, r7, #5
    6e20:	401f      	ands	r7, r3
    6e22:	3b1e      	subs	r3, #30
    6e24:	40bb      	lsls	r3, r7
    6e26:	9903      	ldr	r1, [sp, #12]
    6e28:	0092      	lsls	r2, r2, #2
    6e2a:	5852      	ldr	r2, [r2, r1]
    6e2c:	421a      	tst	r2, r3
    6e2e:	d001      	beq.n	6e34 <__gethex+0x326>
    6e30:	2302      	movs	r3, #2
    6e32:	431c      	orrs	r4, r3
    6e34:	9b01      	ldr	r3, [sp, #4]
    6e36:	0031      	movs	r1, r6
    6e38:	1b9b      	subs	r3, r3, r6
    6e3a:	2602      	movs	r6, #2
    6e3c:	0028      	movs	r0, r5
    6e3e:	9301      	str	r3, [sp, #4]
    6e40:	f7ff fe1e 	bl	6a80 <rshift>
    6e44:	9b02      	ldr	r3, [sp, #8]
    6e46:	685f      	ldr	r7, [r3, #4]
    6e48:	2c00      	cmp	r4, #0
    6e4a:	d041      	beq.n	6ed0 <__gethex+0x3c2>
    6e4c:	9b02      	ldr	r3, [sp, #8]
    6e4e:	68db      	ldr	r3, [r3, #12]
    6e50:	2b02      	cmp	r3, #2
    6e52:	d010      	beq.n	6e76 <__gethex+0x368>
    6e54:	2b03      	cmp	r3, #3
    6e56:	d012      	beq.n	6e7e <__gethex+0x370>
    6e58:	2b01      	cmp	r3, #1
    6e5a:	d106      	bne.n	6e6a <__gethex+0x35c>
    6e5c:	07a2      	lsls	r2, r4, #30
    6e5e:	d504      	bpl.n	6e6a <__gethex+0x35c>
    6e60:	9a03      	ldr	r2, [sp, #12]
    6e62:	6812      	ldr	r2, [r2, #0]
    6e64:	4314      	orrs	r4, r2
    6e66:	421c      	tst	r4, r3
    6e68:	d10c      	bne.n	6e84 <__gethex+0x376>
    6e6a:	2310      	movs	r3, #16
    6e6c:	e02f      	b.n	6ece <__gethex+0x3c0>
    6e6e:	2401      	movs	r4, #1
    6e70:	e7d4      	b.n	6e1c <__gethex+0x30e>
    6e72:	2601      	movs	r6, #1
    6e74:	e7e8      	b.n	6e48 <__gethex+0x33a>
    6e76:	2301      	movs	r3, #1
    6e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6e7a:	1a9b      	subs	r3, r3, r2
    6e7c:	9313      	str	r3, [sp, #76]	; 0x4c
    6e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6e80:	2b00      	cmp	r3, #0
    6e82:	d0f2      	beq.n	6e6a <__gethex+0x35c>
    6e84:	692c      	ldr	r4, [r5, #16]
    6e86:	00a3      	lsls	r3, r4, #2
    6e88:	9304      	str	r3, [sp, #16]
    6e8a:	002b      	movs	r3, r5
    6e8c:	00a2      	lsls	r2, r4, #2
    6e8e:	3314      	adds	r3, #20
    6e90:	1899      	adds	r1, r3, r2
    6e92:	2200      	movs	r2, #0
    6e94:	4694      	mov	ip, r2
    6e96:	681a      	ldr	r2, [r3, #0]
    6e98:	1c50      	adds	r0, r2, #1
    6e9a:	d01e      	beq.n	6eda <__gethex+0x3cc>
    6e9c:	3201      	adds	r2, #1
    6e9e:	601a      	str	r2, [r3, #0]
    6ea0:	002b      	movs	r3, r5
    6ea2:	3314      	adds	r3, #20
    6ea4:	2e02      	cmp	r6, #2
    6ea6:	d13b      	bne.n	6f20 <__gethex+0x412>
    6ea8:	9a02      	ldr	r2, [sp, #8]
    6eaa:	9901      	ldr	r1, [sp, #4]
    6eac:	6812      	ldr	r2, [r2, #0]
    6eae:	3a01      	subs	r2, #1
    6eb0:	4291      	cmp	r1, r2
    6eb2:	d10b      	bne.n	6ecc <__gethex+0x3be>
    6eb4:	114a      	asrs	r2, r1, #5
    6eb6:	211f      	movs	r1, #31
    6eb8:	9801      	ldr	r0, [sp, #4]
    6eba:	0092      	lsls	r2, r2, #2
    6ebc:	4001      	ands	r1, r0
    6ebe:	2001      	movs	r0, #1
    6ec0:	0004      	movs	r4, r0
    6ec2:	408c      	lsls	r4, r1
    6ec4:	58d3      	ldr	r3, [r2, r3]
    6ec6:	4223      	tst	r3, r4
    6ec8:	d000      	beq.n	6ecc <__gethex+0x3be>
    6eca:	2601      	movs	r6, #1
    6ecc:	2320      	movs	r3, #32
    6ece:	431e      	orrs	r6, r3
    6ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ed2:	601d      	str	r5, [r3, #0]
    6ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ed6:	601f      	str	r7, [r3, #0]
    6ed8:	e6a5      	b.n	6c26 <__gethex+0x118>
    6eda:	4662      	mov	r2, ip
    6edc:	c304      	stmia	r3!, {r2}
    6ede:	4299      	cmp	r1, r3
    6ee0:	d8d9      	bhi.n	6e96 <__gethex+0x388>
    6ee2:	68ab      	ldr	r3, [r5, #8]
    6ee4:	429c      	cmp	r4, r3
    6ee6:	db12      	blt.n	6f0e <__gethex+0x400>
    6ee8:	686b      	ldr	r3, [r5, #4]
    6eea:	9805      	ldr	r0, [sp, #20]
    6eec:	1c59      	adds	r1, r3, #1
    6eee:	f000 f919 	bl	7124 <_Balloc>
    6ef2:	0029      	movs	r1, r5
    6ef4:	692b      	ldr	r3, [r5, #16]
    6ef6:	9003      	str	r0, [sp, #12]
    6ef8:	1c9a      	adds	r2, r3, #2
    6efa:	0092      	lsls	r2, r2, #2
    6efc:	310c      	adds	r1, #12
    6efe:	300c      	adds	r0, #12
    6f00:	f7fe fdae 	bl	5a60 <memcpy>
    6f04:	0029      	movs	r1, r5
    6f06:	9805      	ldr	r0, [sp, #20]
    6f08:	f000 f944 	bl	7194 <_Bfree>
    6f0c:	9d03      	ldr	r5, [sp, #12]
    6f0e:	692b      	ldr	r3, [r5, #16]
    6f10:	1c5a      	adds	r2, r3, #1
    6f12:	612a      	str	r2, [r5, #16]
    6f14:	2201      	movs	r2, #1
    6f16:	3304      	adds	r3, #4
    6f18:	009b      	lsls	r3, r3, #2
    6f1a:	18eb      	adds	r3, r5, r3
    6f1c:	605a      	str	r2, [r3, #4]
    6f1e:	e7bf      	b.n	6ea0 <__gethex+0x392>
    6f20:	692a      	ldr	r2, [r5, #16]
    6f22:	4294      	cmp	r4, r2
    6f24:	da0a      	bge.n	6f3c <__gethex+0x42e>
    6f26:	2101      	movs	r1, #1
    6f28:	0028      	movs	r0, r5
    6f2a:	f7ff fda9 	bl	6a80 <rshift>
    6f2e:	9b02      	ldr	r3, [sp, #8]
    6f30:	3701      	adds	r7, #1
    6f32:	689b      	ldr	r3, [r3, #8]
    6f34:	429f      	cmp	r7, r3
    6f36:	dd00      	ble.n	6f3a <__gethex+0x42c>
    6f38:	e6dc      	b.n	6cf4 <__gethex+0x1e6>
    6f3a:	e7c6      	b.n	6eca <__gethex+0x3bc>
    6f3c:	241f      	movs	r4, #31
    6f3e:	9a01      	ldr	r2, [sp, #4]
    6f40:	2601      	movs	r6, #1
    6f42:	4022      	ands	r2, r4
    6f44:	1e14      	subs	r4, r2, #0
    6f46:	d0c1      	beq.n	6ecc <__gethex+0x3be>
    6f48:	9a04      	ldr	r2, [sp, #16]
    6f4a:	189b      	adds	r3, r3, r2
    6f4c:	3b04      	subs	r3, #4
    6f4e:	6818      	ldr	r0, [r3, #0]
    6f50:	f000 f9b4 	bl	72bc <__hi0bits>
    6f54:	2120      	movs	r1, #32
    6f56:	1b0c      	subs	r4, r1, r4
    6f58:	42a0      	cmp	r0, r4
    6f5a:	dbe4      	blt.n	6f26 <__gethex+0x418>
    6f5c:	e7b6      	b.n	6ecc <__gethex+0x3be>

00006f5e <L_shift>:
    6f5e:	2308      	movs	r3, #8
    6f60:	b570      	push	{r4, r5, r6, lr}
    6f62:	2520      	movs	r5, #32
    6f64:	1a9a      	subs	r2, r3, r2
    6f66:	0092      	lsls	r2, r2, #2
    6f68:	1aad      	subs	r5, r5, r2
    6f6a:	6843      	ldr	r3, [r0, #4]
    6f6c:	6806      	ldr	r6, [r0, #0]
    6f6e:	001c      	movs	r4, r3
    6f70:	40ac      	lsls	r4, r5
    6f72:	40d3      	lsrs	r3, r2
    6f74:	4334      	orrs	r4, r6
    6f76:	c010      	stmia	r0!, {r4}
    6f78:	6003      	str	r3, [r0, #0]
    6f7a:	4288      	cmp	r0, r1
    6f7c:	d3f5      	bcc.n	6f6a <L_shift+0xc>
    6f7e:	bd70      	pop	{r4, r5, r6, pc}

00006f80 <__match>:
    6f80:	b530      	push	{r4, r5, lr}
    6f82:	6803      	ldr	r3, [r0, #0]
    6f84:	780c      	ldrb	r4, [r1, #0]
    6f86:	3301      	adds	r3, #1
    6f88:	2c00      	cmp	r4, #0
    6f8a:	d102      	bne.n	6f92 <__match+0x12>
    6f8c:	6003      	str	r3, [r0, #0]
    6f8e:	2001      	movs	r0, #1
    6f90:	bd30      	pop	{r4, r5, pc}
    6f92:	781a      	ldrb	r2, [r3, #0]
    6f94:	0015      	movs	r5, r2
    6f96:	3d41      	subs	r5, #65	; 0x41
    6f98:	2d19      	cmp	r5, #25
    6f9a:	d800      	bhi.n	6f9e <__match+0x1e>
    6f9c:	3220      	adds	r2, #32
    6f9e:	3101      	adds	r1, #1
    6fa0:	42a2      	cmp	r2, r4
    6fa2:	d0ef      	beq.n	6f84 <__match+0x4>
    6fa4:	2000      	movs	r0, #0
    6fa6:	e7f3      	b.n	6f90 <__match+0x10>

00006fa8 <__hexnan>:
    6fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6faa:	b08b      	sub	sp, #44	; 0x2c
    6fac:	9201      	str	r2, [sp, #4]
    6fae:	680a      	ldr	r2, [r1, #0]
    6fb0:	9901      	ldr	r1, [sp, #4]
    6fb2:	1153      	asrs	r3, r2, #5
    6fb4:	009b      	lsls	r3, r3, #2
    6fb6:	18cb      	adds	r3, r1, r3
    6fb8:	9303      	str	r3, [sp, #12]
    6fba:	231f      	movs	r3, #31
    6fbc:	401a      	ands	r2, r3
    6fbe:	9008      	str	r0, [sp, #32]
    6fc0:	9206      	str	r2, [sp, #24]
    6fc2:	d002      	beq.n	6fca <__hexnan+0x22>
    6fc4:	9b03      	ldr	r3, [sp, #12]
    6fc6:	3304      	adds	r3, #4
    6fc8:	9303      	str	r3, [sp, #12]
    6fca:	9b03      	ldr	r3, [sp, #12]
    6fcc:	2500      	movs	r5, #0
    6fce:	1f1e      	subs	r6, r3, #4
    6fd0:	0037      	movs	r7, r6
    6fd2:	0034      	movs	r4, r6
    6fd4:	9b08      	ldr	r3, [sp, #32]
    6fd6:	6035      	str	r5, [r6, #0]
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	9507      	str	r5, [sp, #28]
    6fdc:	9304      	str	r3, [sp, #16]
    6fde:	9502      	str	r5, [sp, #8]
    6fe0:	9b04      	ldr	r3, [sp, #16]
    6fe2:	3301      	adds	r3, #1
    6fe4:	9309      	str	r3, [sp, #36]	; 0x24
    6fe6:	9b04      	ldr	r3, [sp, #16]
    6fe8:	785b      	ldrb	r3, [r3, #1]
    6fea:	9305      	str	r3, [sp, #20]
    6fec:	2b00      	cmp	r3, #0
    6fee:	d028      	beq.n	7042 <__hexnan+0x9a>
    6ff0:	9805      	ldr	r0, [sp, #20]
    6ff2:	f7ff fd77 	bl	6ae4 <__hexdig_fun>
    6ff6:	2800      	cmp	r0, #0
    6ff8:	d145      	bne.n	7086 <__hexnan+0xde>
    6ffa:	9b05      	ldr	r3, [sp, #20]
    6ffc:	2b20      	cmp	r3, #32
    6ffe:	d819      	bhi.n	7034 <__hexnan+0x8c>
    7000:	9b02      	ldr	r3, [sp, #8]
    7002:	9a07      	ldr	r2, [sp, #28]
    7004:	4293      	cmp	r3, r2
    7006:	dd12      	ble.n	702e <__hexnan+0x86>
    7008:	42bc      	cmp	r4, r7
    700a:	d206      	bcs.n	701a <__hexnan+0x72>
    700c:	2d07      	cmp	r5, #7
    700e:	dc04      	bgt.n	701a <__hexnan+0x72>
    7010:	002a      	movs	r2, r5
    7012:	0039      	movs	r1, r7
    7014:	0020      	movs	r0, r4
    7016:	f7ff ffa2 	bl	6f5e <L_shift>
    701a:	9b01      	ldr	r3, [sp, #4]
    701c:	2508      	movs	r5, #8
    701e:	429c      	cmp	r4, r3
    7020:	d905      	bls.n	702e <__hexnan+0x86>
    7022:	1f27      	subs	r7, r4, #4
    7024:	2500      	movs	r5, #0
    7026:	003c      	movs	r4, r7
    7028:	9b02      	ldr	r3, [sp, #8]
    702a:	603d      	str	r5, [r7, #0]
    702c:	9307      	str	r3, [sp, #28]
    702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7030:	9304      	str	r3, [sp, #16]
    7032:	e7d5      	b.n	6fe0 <__hexnan+0x38>
    7034:	9b05      	ldr	r3, [sp, #20]
    7036:	2b29      	cmp	r3, #41	; 0x29
    7038:	d14a      	bne.n	70d0 <__hexnan+0x128>
    703a:	9b04      	ldr	r3, [sp, #16]
    703c:	9a08      	ldr	r2, [sp, #32]
    703e:	3302      	adds	r3, #2
    7040:	6013      	str	r3, [r2, #0]
    7042:	9b02      	ldr	r3, [sp, #8]
    7044:	2b00      	cmp	r3, #0
    7046:	d043      	beq.n	70d0 <__hexnan+0x128>
    7048:	42bc      	cmp	r4, r7
    704a:	d206      	bcs.n	705a <__hexnan+0xb2>
    704c:	2d07      	cmp	r5, #7
    704e:	dc04      	bgt.n	705a <__hexnan+0xb2>
    7050:	002a      	movs	r2, r5
    7052:	0039      	movs	r1, r7
    7054:	0020      	movs	r0, r4
    7056:	f7ff ff82 	bl	6f5e <L_shift>
    705a:	9b01      	ldr	r3, [sp, #4]
    705c:	429c      	cmp	r4, r3
    705e:	d926      	bls.n	70ae <__hexnan+0x106>
    7060:	cc04      	ldmia	r4!, {r2}
    7062:	601a      	str	r2, [r3, #0]
    7064:	3304      	adds	r3, #4
    7066:	42a6      	cmp	r6, r4
    7068:	d2fa      	bcs.n	7060 <__hexnan+0xb8>
    706a:	2200      	movs	r2, #0
    706c:	c304      	stmia	r3!, {r2}
    706e:	429e      	cmp	r6, r3
    7070:	d2fc      	bcs.n	706c <__hexnan+0xc4>
    7072:	6833      	ldr	r3, [r6, #0]
    7074:	2b00      	cmp	r3, #0
    7076:	d104      	bne.n	7082 <__hexnan+0xda>
    7078:	9b01      	ldr	r3, [sp, #4]
    707a:	429e      	cmp	r6, r3
    707c:	d126      	bne.n	70cc <__hexnan+0x124>
    707e:	2301      	movs	r3, #1
    7080:	6033      	str	r3, [r6, #0]
    7082:	2005      	movs	r0, #5
    7084:	e025      	b.n	70d2 <__hexnan+0x12a>
    7086:	9b02      	ldr	r3, [sp, #8]
    7088:	3501      	adds	r5, #1
    708a:	3301      	adds	r3, #1
    708c:	9302      	str	r3, [sp, #8]
    708e:	2d08      	cmp	r5, #8
    7090:	dd06      	ble.n	70a0 <__hexnan+0xf8>
    7092:	9b01      	ldr	r3, [sp, #4]
    7094:	429c      	cmp	r4, r3
    7096:	d9ca      	bls.n	702e <__hexnan+0x86>
    7098:	2300      	movs	r3, #0
    709a:	2501      	movs	r5, #1
    709c:	3c04      	subs	r4, #4
    709e:	6023      	str	r3, [r4, #0]
    70a0:	220f      	movs	r2, #15
    70a2:	6823      	ldr	r3, [r4, #0]
    70a4:	4010      	ands	r0, r2
    70a6:	011b      	lsls	r3, r3, #4
    70a8:	4318      	orrs	r0, r3
    70aa:	6020      	str	r0, [r4, #0]
    70ac:	e7bf      	b.n	702e <__hexnan+0x86>
    70ae:	9b06      	ldr	r3, [sp, #24]
    70b0:	2b00      	cmp	r3, #0
    70b2:	d0de      	beq.n	7072 <__hexnan+0xca>
    70b4:	2120      	movs	r1, #32
    70b6:	9a06      	ldr	r2, [sp, #24]
    70b8:	9b03      	ldr	r3, [sp, #12]
    70ba:	1a89      	subs	r1, r1, r2
    70bc:	2201      	movs	r2, #1
    70be:	4252      	negs	r2, r2
    70c0:	40ca      	lsrs	r2, r1
    70c2:	3b04      	subs	r3, #4
    70c4:	6819      	ldr	r1, [r3, #0]
    70c6:	400a      	ands	r2, r1
    70c8:	601a      	str	r2, [r3, #0]
    70ca:	e7d2      	b.n	7072 <__hexnan+0xca>
    70cc:	3e04      	subs	r6, #4
    70ce:	e7d0      	b.n	7072 <__hexnan+0xca>
    70d0:	2004      	movs	r0, #4
    70d2:	b00b      	add	sp, #44	; 0x2c
    70d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000070d6 <__locale_ctype_ptr_l>:
    70d6:	30ec      	adds	r0, #236	; 0xec
    70d8:	6800      	ldr	r0, [r0, #0]
    70da:	4770      	bx	lr

000070dc <__locale_ctype_ptr>:
    70dc:	4b04      	ldr	r3, [pc, #16]	; (70f0 <__locale_ctype_ptr+0x14>)
    70de:	681b      	ldr	r3, [r3, #0]
    70e0:	6a1b      	ldr	r3, [r3, #32]
    70e2:	2b00      	cmp	r3, #0
    70e4:	d100      	bne.n	70e8 <__locale_ctype_ptr+0xc>
    70e6:	4b03      	ldr	r3, [pc, #12]	; (70f4 <__locale_ctype_ptr+0x18>)
    70e8:	33ec      	adds	r3, #236	; 0xec
    70ea:	6818      	ldr	r0, [r3, #0]
    70ec:	4770      	bx	lr
    70ee:	46c0      	nop			; (mov r8, r8)
    70f0:	200000e0 	.word	0x200000e0
    70f4:	20000144 	.word	0x20000144

000070f8 <__localeconv_l>:
    70f8:	30f0      	adds	r0, #240	; 0xf0
    70fa:	4770      	bx	lr

000070fc <__ascii_mbtowc>:
    70fc:	b082      	sub	sp, #8
    70fe:	2900      	cmp	r1, #0
    7100:	d100      	bne.n	7104 <__ascii_mbtowc+0x8>
    7102:	a901      	add	r1, sp, #4
    7104:	1e10      	subs	r0, r2, #0
    7106:	d006      	beq.n	7116 <__ascii_mbtowc+0x1a>
    7108:	2b00      	cmp	r3, #0
    710a:	d006      	beq.n	711a <__ascii_mbtowc+0x1e>
    710c:	7813      	ldrb	r3, [r2, #0]
    710e:	600b      	str	r3, [r1, #0]
    7110:	7810      	ldrb	r0, [r2, #0]
    7112:	1e43      	subs	r3, r0, #1
    7114:	4198      	sbcs	r0, r3
    7116:	b002      	add	sp, #8
    7118:	4770      	bx	lr
    711a:	2002      	movs	r0, #2
    711c:	4240      	negs	r0, r0
    711e:	e7fa      	b.n	7116 <__ascii_mbtowc+0x1a>

00007120 <__malloc_lock>:
    7120:	4770      	bx	lr

00007122 <__malloc_unlock>:
    7122:	4770      	bx	lr

00007124 <_Balloc>:
    7124:	b570      	push	{r4, r5, r6, lr}
    7126:	6a46      	ldr	r6, [r0, #36]	; 0x24
    7128:	0004      	movs	r4, r0
    712a:	000d      	movs	r5, r1
    712c:	2e00      	cmp	r6, #0
    712e:	d107      	bne.n	7140 <_Balloc+0x1c>
    7130:	2010      	movs	r0, #16
    7132:	f7fe fc8b 	bl	5a4c <malloc>
    7136:	6260      	str	r0, [r4, #36]	; 0x24
    7138:	6046      	str	r6, [r0, #4]
    713a:	6086      	str	r6, [r0, #8]
    713c:	6006      	str	r6, [r0, #0]
    713e:	60c6      	str	r6, [r0, #12]
    7140:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7142:	68f3      	ldr	r3, [r6, #12]
    7144:	2b00      	cmp	r3, #0
    7146:	d013      	beq.n	7170 <_Balloc+0x4c>
    7148:	6a63      	ldr	r3, [r4, #36]	; 0x24
    714a:	00aa      	lsls	r2, r5, #2
    714c:	68db      	ldr	r3, [r3, #12]
    714e:	189b      	adds	r3, r3, r2
    7150:	6818      	ldr	r0, [r3, #0]
    7152:	2800      	cmp	r0, #0
    7154:	d118      	bne.n	7188 <_Balloc+0x64>
    7156:	2101      	movs	r1, #1
    7158:	000e      	movs	r6, r1
    715a:	40ae      	lsls	r6, r5
    715c:	1d72      	adds	r2, r6, #5
    715e:	0092      	lsls	r2, r2, #2
    7160:	0020      	movs	r0, r4
    7162:	f000 fbd2 	bl	790a <_calloc_r>
    7166:	2800      	cmp	r0, #0
    7168:	d00c      	beq.n	7184 <_Balloc+0x60>
    716a:	6045      	str	r5, [r0, #4]
    716c:	6086      	str	r6, [r0, #8]
    716e:	e00d      	b.n	718c <_Balloc+0x68>
    7170:	2221      	movs	r2, #33	; 0x21
    7172:	2104      	movs	r1, #4
    7174:	0020      	movs	r0, r4
    7176:	f000 fbc8 	bl	790a <_calloc_r>
    717a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    717c:	60f0      	str	r0, [r6, #12]
    717e:	68db      	ldr	r3, [r3, #12]
    7180:	2b00      	cmp	r3, #0
    7182:	d1e1      	bne.n	7148 <_Balloc+0x24>
    7184:	2000      	movs	r0, #0
    7186:	bd70      	pop	{r4, r5, r6, pc}
    7188:	6802      	ldr	r2, [r0, #0]
    718a:	601a      	str	r2, [r3, #0]
    718c:	2300      	movs	r3, #0
    718e:	6103      	str	r3, [r0, #16]
    7190:	60c3      	str	r3, [r0, #12]
    7192:	e7f8      	b.n	7186 <_Balloc+0x62>

00007194 <_Bfree>:
    7194:	b570      	push	{r4, r5, r6, lr}
    7196:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7198:	0006      	movs	r6, r0
    719a:	000d      	movs	r5, r1
    719c:	2c00      	cmp	r4, #0
    719e:	d107      	bne.n	71b0 <_Bfree+0x1c>
    71a0:	2010      	movs	r0, #16
    71a2:	f7fe fc53 	bl	5a4c <malloc>
    71a6:	6270      	str	r0, [r6, #36]	; 0x24
    71a8:	6044      	str	r4, [r0, #4]
    71aa:	6084      	str	r4, [r0, #8]
    71ac:	6004      	str	r4, [r0, #0]
    71ae:	60c4      	str	r4, [r0, #12]
    71b0:	2d00      	cmp	r5, #0
    71b2:	d007      	beq.n	71c4 <_Bfree+0x30>
    71b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    71b6:	686a      	ldr	r2, [r5, #4]
    71b8:	68db      	ldr	r3, [r3, #12]
    71ba:	0092      	lsls	r2, r2, #2
    71bc:	189b      	adds	r3, r3, r2
    71be:	681a      	ldr	r2, [r3, #0]
    71c0:	602a      	str	r2, [r5, #0]
    71c2:	601d      	str	r5, [r3, #0]
    71c4:	bd70      	pop	{r4, r5, r6, pc}

000071c6 <__multadd>:
    71c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71c8:	001e      	movs	r6, r3
    71ca:	2314      	movs	r3, #20
    71cc:	469c      	mov	ip, r3
    71ce:	0007      	movs	r7, r0
    71d0:	000c      	movs	r4, r1
    71d2:	2000      	movs	r0, #0
    71d4:	690d      	ldr	r5, [r1, #16]
    71d6:	448c      	add	ip, r1
    71d8:	4663      	mov	r3, ip
    71da:	8819      	ldrh	r1, [r3, #0]
    71dc:	681b      	ldr	r3, [r3, #0]
    71de:	4351      	muls	r1, r2
    71e0:	0c1b      	lsrs	r3, r3, #16
    71e2:	4353      	muls	r3, r2
    71e4:	1989      	adds	r1, r1, r6
    71e6:	0c0e      	lsrs	r6, r1, #16
    71e8:	199b      	adds	r3, r3, r6
    71ea:	b289      	uxth	r1, r1
    71ec:	0c1e      	lsrs	r6, r3, #16
    71ee:	041b      	lsls	r3, r3, #16
    71f0:	185b      	adds	r3, r3, r1
    71f2:	4661      	mov	r1, ip
    71f4:	3001      	adds	r0, #1
    71f6:	c108      	stmia	r1!, {r3}
    71f8:	468c      	mov	ip, r1
    71fa:	4285      	cmp	r5, r0
    71fc:	dcec      	bgt.n	71d8 <__multadd+0x12>
    71fe:	2e00      	cmp	r6, #0
    7200:	d01b      	beq.n	723a <__multadd+0x74>
    7202:	68a3      	ldr	r3, [r4, #8]
    7204:	429d      	cmp	r5, r3
    7206:	db12      	blt.n	722e <__multadd+0x68>
    7208:	6863      	ldr	r3, [r4, #4]
    720a:	0038      	movs	r0, r7
    720c:	1c59      	adds	r1, r3, #1
    720e:	f7ff ff89 	bl	7124 <_Balloc>
    7212:	0021      	movs	r1, r4
    7214:	6923      	ldr	r3, [r4, #16]
    7216:	9001      	str	r0, [sp, #4]
    7218:	1c9a      	adds	r2, r3, #2
    721a:	0092      	lsls	r2, r2, #2
    721c:	310c      	adds	r1, #12
    721e:	300c      	adds	r0, #12
    7220:	f7fe fc1e 	bl	5a60 <memcpy>
    7224:	0021      	movs	r1, r4
    7226:	0038      	movs	r0, r7
    7228:	f7ff ffb4 	bl	7194 <_Bfree>
    722c:	9c01      	ldr	r4, [sp, #4]
    722e:	1d2b      	adds	r3, r5, #4
    7230:	009b      	lsls	r3, r3, #2
    7232:	18e3      	adds	r3, r4, r3
    7234:	3501      	adds	r5, #1
    7236:	605e      	str	r6, [r3, #4]
    7238:	6125      	str	r5, [r4, #16]
    723a:	0020      	movs	r0, r4
    723c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000723e <__s2b>:
    723e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7240:	0006      	movs	r6, r0
    7242:	0018      	movs	r0, r3
    7244:	000c      	movs	r4, r1
    7246:	3008      	adds	r0, #8
    7248:	2109      	movs	r1, #9
    724a:	9301      	str	r3, [sp, #4]
    724c:	0015      	movs	r5, r2
    724e:	f7fc f8b3 	bl	33b8 <__divsi3>
    7252:	2301      	movs	r3, #1
    7254:	2100      	movs	r1, #0
    7256:	4283      	cmp	r3, r0
    7258:	db20      	blt.n	729c <__s2b+0x5e>
    725a:	0030      	movs	r0, r6
    725c:	f7ff ff62 	bl	7124 <_Balloc>
    7260:	9b08      	ldr	r3, [sp, #32]
    7262:	6143      	str	r3, [r0, #20]
    7264:	2301      	movs	r3, #1
    7266:	6103      	str	r3, [r0, #16]
    7268:	2d09      	cmp	r5, #9
    726a:	dd1a      	ble.n	72a2 <__s2b+0x64>
    726c:	0023      	movs	r3, r4
    726e:	3309      	adds	r3, #9
    7270:	001f      	movs	r7, r3
    7272:	9300      	str	r3, [sp, #0]
    7274:	1964      	adds	r4, r4, r5
    7276:	783b      	ldrb	r3, [r7, #0]
    7278:	0001      	movs	r1, r0
    727a:	3b30      	subs	r3, #48	; 0x30
    727c:	220a      	movs	r2, #10
    727e:	0030      	movs	r0, r6
    7280:	3701      	adds	r7, #1
    7282:	f7ff ffa0 	bl	71c6 <__multadd>
    7286:	42a7      	cmp	r7, r4
    7288:	d1f5      	bne.n	7276 <__s2b+0x38>
    728a:	002c      	movs	r4, r5
    728c:	9b00      	ldr	r3, [sp, #0]
    728e:	3c08      	subs	r4, #8
    7290:	191c      	adds	r4, r3, r4
    7292:	002f      	movs	r7, r5
    7294:	9b01      	ldr	r3, [sp, #4]
    7296:	429f      	cmp	r7, r3
    7298:	db06      	blt.n	72a8 <__s2b+0x6a>
    729a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    729c:	005b      	lsls	r3, r3, #1
    729e:	3101      	adds	r1, #1
    72a0:	e7d9      	b.n	7256 <__s2b+0x18>
    72a2:	340a      	adds	r4, #10
    72a4:	2509      	movs	r5, #9
    72a6:	e7f4      	b.n	7292 <__s2b+0x54>
    72a8:	1b63      	subs	r3, r4, r5
    72aa:	5ddb      	ldrb	r3, [r3, r7]
    72ac:	0001      	movs	r1, r0
    72ae:	3b30      	subs	r3, #48	; 0x30
    72b0:	220a      	movs	r2, #10
    72b2:	0030      	movs	r0, r6
    72b4:	f7ff ff87 	bl	71c6 <__multadd>
    72b8:	3701      	adds	r7, #1
    72ba:	e7eb      	b.n	7294 <__s2b+0x56>

000072bc <__hi0bits>:
    72bc:	0003      	movs	r3, r0
    72be:	0c02      	lsrs	r2, r0, #16
    72c0:	2000      	movs	r0, #0
    72c2:	4282      	cmp	r2, r0
    72c4:	d101      	bne.n	72ca <__hi0bits+0xe>
    72c6:	041b      	lsls	r3, r3, #16
    72c8:	3010      	adds	r0, #16
    72ca:	0e1a      	lsrs	r2, r3, #24
    72cc:	d101      	bne.n	72d2 <__hi0bits+0x16>
    72ce:	3008      	adds	r0, #8
    72d0:	021b      	lsls	r3, r3, #8
    72d2:	0f1a      	lsrs	r2, r3, #28
    72d4:	d101      	bne.n	72da <__hi0bits+0x1e>
    72d6:	3004      	adds	r0, #4
    72d8:	011b      	lsls	r3, r3, #4
    72da:	0f9a      	lsrs	r2, r3, #30
    72dc:	d101      	bne.n	72e2 <__hi0bits+0x26>
    72de:	3002      	adds	r0, #2
    72e0:	009b      	lsls	r3, r3, #2
    72e2:	2b00      	cmp	r3, #0
    72e4:	db03      	blt.n	72ee <__hi0bits+0x32>
    72e6:	3001      	adds	r0, #1
    72e8:	005b      	lsls	r3, r3, #1
    72ea:	d400      	bmi.n	72ee <__hi0bits+0x32>
    72ec:	2020      	movs	r0, #32
    72ee:	4770      	bx	lr

000072f0 <__lo0bits>:
    72f0:	2207      	movs	r2, #7
    72f2:	6803      	ldr	r3, [r0, #0]
    72f4:	b510      	push	{r4, lr}
    72f6:	0001      	movs	r1, r0
    72f8:	401a      	ands	r2, r3
    72fa:	d00d      	beq.n	7318 <__lo0bits+0x28>
    72fc:	2401      	movs	r4, #1
    72fe:	2000      	movs	r0, #0
    7300:	4223      	tst	r3, r4
    7302:	d105      	bne.n	7310 <__lo0bits+0x20>
    7304:	3002      	adds	r0, #2
    7306:	4203      	tst	r3, r0
    7308:	d003      	beq.n	7312 <__lo0bits+0x22>
    730a:	40e3      	lsrs	r3, r4
    730c:	0020      	movs	r0, r4
    730e:	600b      	str	r3, [r1, #0]
    7310:	bd10      	pop	{r4, pc}
    7312:	089b      	lsrs	r3, r3, #2
    7314:	600b      	str	r3, [r1, #0]
    7316:	e7fb      	b.n	7310 <__lo0bits+0x20>
    7318:	b29c      	uxth	r4, r3
    731a:	0010      	movs	r0, r2
    731c:	2c00      	cmp	r4, #0
    731e:	d101      	bne.n	7324 <__lo0bits+0x34>
    7320:	2010      	movs	r0, #16
    7322:	0c1b      	lsrs	r3, r3, #16
    7324:	b2da      	uxtb	r2, r3
    7326:	2a00      	cmp	r2, #0
    7328:	d101      	bne.n	732e <__lo0bits+0x3e>
    732a:	3008      	adds	r0, #8
    732c:	0a1b      	lsrs	r3, r3, #8
    732e:	071a      	lsls	r2, r3, #28
    7330:	d101      	bne.n	7336 <__lo0bits+0x46>
    7332:	3004      	adds	r0, #4
    7334:	091b      	lsrs	r3, r3, #4
    7336:	079a      	lsls	r2, r3, #30
    7338:	d101      	bne.n	733e <__lo0bits+0x4e>
    733a:	3002      	adds	r0, #2
    733c:	089b      	lsrs	r3, r3, #2
    733e:	07da      	lsls	r2, r3, #31
    7340:	d4e8      	bmi.n	7314 <__lo0bits+0x24>
    7342:	085b      	lsrs	r3, r3, #1
    7344:	d001      	beq.n	734a <__lo0bits+0x5a>
    7346:	3001      	adds	r0, #1
    7348:	e7e4      	b.n	7314 <__lo0bits+0x24>
    734a:	2020      	movs	r0, #32
    734c:	e7e0      	b.n	7310 <__lo0bits+0x20>

0000734e <__i2b>:
    734e:	b510      	push	{r4, lr}
    7350:	000c      	movs	r4, r1
    7352:	2101      	movs	r1, #1
    7354:	f7ff fee6 	bl	7124 <_Balloc>
    7358:	2301      	movs	r3, #1
    735a:	6144      	str	r4, [r0, #20]
    735c:	6103      	str	r3, [r0, #16]
    735e:	bd10      	pop	{r4, pc}

00007360 <__multiply>:
    7360:	b5f0      	push	{r4, r5, r6, r7, lr}
    7362:	690b      	ldr	r3, [r1, #16]
    7364:	0015      	movs	r5, r2
    7366:	6912      	ldr	r2, [r2, #16]
    7368:	b089      	sub	sp, #36	; 0x24
    736a:	000c      	movs	r4, r1
    736c:	4293      	cmp	r3, r2
    736e:	da01      	bge.n	7374 <__multiply+0x14>
    7370:	002c      	movs	r4, r5
    7372:	000d      	movs	r5, r1
    7374:	6927      	ldr	r7, [r4, #16]
    7376:	692e      	ldr	r6, [r5, #16]
    7378:	68a2      	ldr	r2, [r4, #8]
    737a:	19bb      	adds	r3, r7, r6
    737c:	6861      	ldr	r1, [r4, #4]
    737e:	9301      	str	r3, [sp, #4]
    7380:	4293      	cmp	r3, r2
    7382:	dd00      	ble.n	7386 <__multiply+0x26>
    7384:	3101      	adds	r1, #1
    7386:	f7ff fecd 	bl	7124 <_Balloc>
    738a:	0003      	movs	r3, r0
    738c:	3314      	adds	r3, #20
    738e:	9300      	str	r3, [sp, #0]
    7390:	9a00      	ldr	r2, [sp, #0]
    7392:	19bb      	adds	r3, r7, r6
    7394:	4694      	mov	ip, r2
    7396:	009b      	lsls	r3, r3, #2
    7398:	449c      	add	ip, r3
    739a:	0013      	movs	r3, r2
    739c:	2200      	movs	r2, #0
    739e:	9004      	str	r0, [sp, #16]
    73a0:	4563      	cmp	r3, ip
    73a2:	d31c      	bcc.n	73de <__multiply+0x7e>
    73a4:	002a      	movs	r2, r5
    73a6:	3414      	adds	r4, #20
    73a8:	00bf      	lsls	r7, r7, #2
    73aa:	19e3      	adds	r3, r4, r7
    73ac:	3214      	adds	r2, #20
    73ae:	00b6      	lsls	r6, r6, #2
    73b0:	9305      	str	r3, [sp, #20]
    73b2:	1993      	adds	r3, r2, r6
    73b4:	9402      	str	r4, [sp, #8]
    73b6:	9306      	str	r3, [sp, #24]
    73b8:	9b06      	ldr	r3, [sp, #24]
    73ba:	429a      	cmp	r2, r3
    73bc:	d311      	bcc.n	73e2 <__multiply+0x82>
    73be:	9b01      	ldr	r3, [sp, #4]
    73c0:	2b00      	cmp	r3, #0
    73c2:	dd06      	ble.n	73d2 <__multiply+0x72>
    73c4:	2304      	movs	r3, #4
    73c6:	425b      	negs	r3, r3
    73c8:	449c      	add	ip, r3
    73ca:	4663      	mov	r3, ip
    73cc:	681b      	ldr	r3, [r3, #0]
    73ce:	2b00      	cmp	r3, #0
    73d0:	d051      	beq.n	7476 <__multiply+0x116>
    73d2:	9b04      	ldr	r3, [sp, #16]
    73d4:	9a01      	ldr	r2, [sp, #4]
    73d6:	0018      	movs	r0, r3
    73d8:	611a      	str	r2, [r3, #16]
    73da:	b009      	add	sp, #36	; 0x24
    73dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73de:	c304      	stmia	r3!, {r2}
    73e0:	e7de      	b.n	73a0 <__multiply+0x40>
    73e2:	8814      	ldrh	r4, [r2, #0]
    73e4:	2c00      	cmp	r4, #0
    73e6:	d01e      	beq.n	7426 <__multiply+0xc6>
    73e8:	2600      	movs	r6, #0
    73ea:	9d00      	ldr	r5, [sp, #0]
    73ec:	9f02      	ldr	r7, [sp, #8]
    73ee:	cf01      	ldmia	r7!, {r0}
    73f0:	9507      	str	r5, [sp, #28]
    73f2:	cd08      	ldmia	r5!, {r3}
    73f4:	9303      	str	r3, [sp, #12]
    73f6:	b283      	uxth	r3, r0
    73f8:	4363      	muls	r3, r4
    73fa:	0019      	movs	r1, r3
    73fc:	466b      	mov	r3, sp
    73fe:	0c00      	lsrs	r0, r0, #16
    7400:	899b      	ldrh	r3, [r3, #12]
    7402:	4360      	muls	r0, r4
    7404:	18cb      	adds	r3, r1, r3
    7406:	9903      	ldr	r1, [sp, #12]
    7408:	199b      	adds	r3, r3, r6
    740a:	0c09      	lsrs	r1, r1, #16
    740c:	1841      	adds	r1, r0, r1
    740e:	0c18      	lsrs	r0, r3, #16
    7410:	1809      	adds	r1, r1, r0
    7412:	0c0e      	lsrs	r6, r1, #16
    7414:	b29b      	uxth	r3, r3
    7416:	0409      	lsls	r1, r1, #16
    7418:	430b      	orrs	r3, r1
    741a:	9907      	ldr	r1, [sp, #28]
    741c:	600b      	str	r3, [r1, #0]
    741e:	9b05      	ldr	r3, [sp, #20]
    7420:	42bb      	cmp	r3, r7
    7422:	d8e4      	bhi.n	73ee <__multiply+0x8e>
    7424:	602e      	str	r6, [r5, #0]
    7426:	6813      	ldr	r3, [r2, #0]
    7428:	0c1b      	lsrs	r3, r3, #16
    742a:	9303      	str	r3, [sp, #12]
    742c:	d01e      	beq.n	746c <__multiply+0x10c>
    742e:	2600      	movs	r6, #0
    7430:	9b00      	ldr	r3, [sp, #0]
    7432:	9c02      	ldr	r4, [sp, #8]
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	9800      	ldr	r0, [sp, #0]
    7438:	0007      	movs	r7, r0
    743a:	8821      	ldrh	r1, [r4, #0]
    743c:	9d03      	ldr	r5, [sp, #12]
    743e:	b29b      	uxth	r3, r3
    7440:	4369      	muls	r1, r5
    7442:	c820      	ldmia	r0!, {r5}
    7444:	0c2d      	lsrs	r5, r5, #16
    7446:	1949      	adds	r1, r1, r5
    7448:	198e      	adds	r6, r1, r6
    744a:	0431      	lsls	r1, r6, #16
    744c:	430b      	orrs	r3, r1
    744e:	603b      	str	r3, [r7, #0]
    7450:	cc08      	ldmia	r4!, {r3}
    7452:	9903      	ldr	r1, [sp, #12]
    7454:	0c1b      	lsrs	r3, r3, #16
    7456:	434b      	muls	r3, r1
    7458:	6879      	ldr	r1, [r7, #4]
    745a:	0c36      	lsrs	r6, r6, #16
    745c:	b289      	uxth	r1, r1
    745e:	185b      	adds	r3, r3, r1
    7460:	9905      	ldr	r1, [sp, #20]
    7462:	199b      	adds	r3, r3, r6
    7464:	0c1e      	lsrs	r6, r3, #16
    7466:	42a1      	cmp	r1, r4
    7468:	d8e6      	bhi.n	7438 <__multiply+0xd8>
    746a:	6003      	str	r3, [r0, #0]
    746c:	9b00      	ldr	r3, [sp, #0]
    746e:	3204      	adds	r2, #4
    7470:	3304      	adds	r3, #4
    7472:	9300      	str	r3, [sp, #0]
    7474:	e7a0      	b.n	73b8 <__multiply+0x58>
    7476:	9b01      	ldr	r3, [sp, #4]
    7478:	3b01      	subs	r3, #1
    747a:	9301      	str	r3, [sp, #4]
    747c:	e79f      	b.n	73be <__multiply+0x5e>
	...

00007480 <__pow5mult>:
    7480:	2303      	movs	r3, #3
    7482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7484:	4013      	ands	r3, r2
    7486:	0005      	movs	r5, r0
    7488:	000e      	movs	r6, r1
    748a:	0014      	movs	r4, r2
    748c:	2b00      	cmp	r3, #0
    748e:	d008      	beq.n	74a2 <__pow5mult+0x22>
    7490:	4922      	ldr	r1, [pc, #136]	; (751c <__pow5mult+0x9c>)
    7492:	3b01      	subs	r3, #1
    7494:	009a      	lsls	r2, r3, #2
    7496:	5852      	ldr	r2, [r2, r1]
    7498:	2300      	movs	r3, #0
    749a:	0031      	movs	r1, r6
    749c:	f7ff fe93 	bl	71c6 <__multadd>
    74a0:	0006      	movs	r6, r0
    74a2:	10a3      	asrs	r3, r4, #2
    74a4:	9301      	str	r3, [sp, #4]
    74a6:	d036      	beq.n	7516 <__pow5mult+0x96>
    74a8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    74aa:	2c00      	cmp	r4, #0
    74ac:	d107      	bne.n	74be <__pow5mult+0x3e>
    74ae:	2010      	movs	r0, #16
    74b0:	f7fe facc 	bl	5a4c <malloc>
    74b4:	6268      	str	r0, [r5, #36]	; 0x24
    74b6:	6044      	str	r4, [r0, #4]
    74b8:	6084      	str	r4, [r0, #8]
    74ba:	6004      	str	r4, [r0, #0]
    74bc:	60c4      	str	r4, [r0, #12]
    74be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    74c0:	68bc      	ldr	r4, [r7, #8]
    74c2:	2c00      	cmp	r4, #0
    74c4:	d107      	bne.n	74d6 <__pow5mult+0x56>
    74c6:	4916      	ldr	r1, [pc, #88]	; (7520 <__pow5mult+0xa0>)
    74c8:	0028      	movs	r0, r5
    74ca:	f7ff ff40 	bl	734e <__i2b>
    74ce:	2300      	movs	r3, #0
    74d0:	0004      	movs	r4, r0
    74d2:	60b8      	str	r0, [r7, #8]
    74d4:	6003      	str	r3, [r0, #0]
    74d6:	2201      	movs	r2, #1
    74d8:	9b01      	ldr	r3, [sp, #4]
    74da:	4213      	tst	r3, r2
    74dc:	d00a      	beq.n	74f4 <__pow5mult+0x74>
    74de:	0031      	movs	r1, r6
    74e0:	0022      	movs	r2, r4
    74e2:	0028      	movs	r0, r5
    74e4:	f7ff ff3c 	bl	7360 <__multiply>
    74e8:	0007      	movs	r7, r0
    74ea:	0031      	movs	r1, r6
    74ec:	0028      	movs	r0, r5
    74ee:	f7ff fe51 	bl	7194 <_Bfree>
    74f2:	003e      	movs	r6, r7
    74f4:	9b01      	ldr	r3, [sp, #4]
    74f6:	105b      	asrs	r3, r3, #1
    74f8:	9301      	str	r3, [sp, #4]
    74fa:	d00c      	beq.n	7516 <__pow5mult+0x96>
    74fc:	6820      	ldr	r0, [r4, #0]
    74fe:	2800      	cmp	r0, #0
    7500:	d107      	bne.n	7512 <__pow5mult+0x92>
    7502:	0022      	movs	r2, r4
    7504:	0021      	movs	r1, r4
    7506:	0028      	movs	r0, r5
    7508:	f7ff ff2a 	bl	7360 <__multiply>
    750c:	2300      	movs	r3, #0
    750e:	6020      	str	r0, [r4, #0]
    7510:	6003      	str	r3, [r0, #0]
    7512:	0004      	movs	r4, r0
    7514:	e7df      	b.n	74d6 <__pow5mult+0x56>
    7516:	0030      	movs	r0, r6
    7518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    751a:	46c0      	nop			; (mov r8, r8)
    751c:	000080a8 	.word	0x000080a8
    7520:	00000271 	.word	0x00000271

00007524 <__lshift>:
    7524:	b5f0      	push	{r4, r5, r6, r7, lr}
    7526:	000d      	movs	r5, r1
    7528:	0017      	movs	r7, r2
    752a:	692b      	ldr	r3, [r5, #16]
    752c:	1154      	asrs	r4, r2, #5
    752e:	b085      	sub	sp, #20
    7530:	18e3      	adds	r3, r4, r3
    7532:	9302      	str	r3, [sp, #8]
    7534:	3301      	adds	r3, #1
    7536:	9301      	str	r3, [sp, #4]
    7538:	6849      	ldr	r1, [r1, #4]
    753a:	68ab      	ldr	r3, [r5, #8]
    753c:	9003      	str	r0, [sp, #12]
    753e:	9a01      	ldr	r2, [sp, #4]
    7540:	4293      	cmp	r3, r2
    7542:	db34      	blt.n	75ae <__lshift+0x8a>
    7544:	9803      	ldr	r0, [sp, #12]
    7546:	f7ff fded 	bl	7124 <_Balloc>
    754a:	2300      	movs	r3, #0
    754c:	0002      	movs	r2, r0
    754e:	0006      	movs	r6, r0
    7550:	0019      	movs	r1, r3
    7552:	3214      	adds	r2, #20
    7554:	42a3      	cmp	r3, r4
    7556:	db2d      	blt.n	75b4 <__lshift+0x90>
    7558:	43e3      	mvns	r3, r4
    755a:	17db      	asrs	r3, r3, #31
    755c:	401c      	ands	r4, r3
    755e:	002b      	movs	r3, r5
    7560:	211f      	movs	r1, #31
    7562:	00a4      	lsls	r4, r4, #2
    7564:	1914      	adds	r4, r2, r4
    7566:	692a      	ldr	r2, [r5, #16]
    7568:	3314      	adds	r3, #20
    756a:	0092      	lsls	r2, r2, #2
    756c:	189a      	adds	r2, r3, r2
    756e:	400f      	ands	r7, r1
    7570:	d024      	beq.n	75bc <__lshift+0x98>
    7572:	3101      	adds	r1, #1
    7574:	1bc9      	subs	r1, r1, r7
    7576:	468c      	mov	ip, r1
    7578:	2100      	movs	r1, #0
    757a:	6818      	ldr	r0, [r3, #0]
    757c:	40b8      	lsls	r0, r7
    757e:	4301      	orrs	r1, r0
    7580:	4660      	mov	r0, ip
    7582:	6021      	str	r1, [r4, #0]
    7584:	cb02      	ldmia	r3!, {r1}
    7586:	3404      	adds	r4, #4
    7588:	40c1      	lsrs	r1, r0
    758a:	429a      	cmp	r2, r3
    758c:	d8f5      	bhi.n	757a <__lshift+0x56>
    758e:	6021      	str	r1, [r4, #0]
    7590:	2900      	cmp	r1, #0
    7592:	d002      	beq.n	759a <__lshift+0x76>
    7594:	9b02      	ldr	r3, [sp, #8]
    7596:	3302      	adds	r3, #2
    7598:	9301      	str	r3, [sp, #4]
    759a:	9b01      	ldr	r3, [sp, #4]
    759c:	9803      	ldr	r0, [sp, #12]
    759e:	3b01      	subs	r3, #1
    75a0:	6133      	str	r3, [r6, #16]
    75a2:	0029      	movs	r1, r5
    75a4:	f7ff fdf6 	bl	7194 <_Bfree>
    75a8:	0030      	movs	r0, r6
    75aa:	b005      	add	sp, #20
    75ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75ae:	3101      	adds	r1, #1
    75b0:	005b      	lsls	r3, r3, #1
    75b2:	e7c4      	b.n	753e <__lshift+0x1a>
    75b4:	0098      	lsls	r0, r3, #2
    75b6:	5011      	str	r1, [r2, r0]
    75b8:	3301      	adds	r3, #1
    75ba:	e7cb      	b.n	7554 <__lshift+0x30>
    75bc:	cb02      	ldmia	r3!, {r1}
    75be:	c402      	stmia	r4!, {r1}
    75c0:	429a      	cmp	r2, r3
    75c2:	d8fb      	bhi.n	75bc <__lshift+0x98>
    75c4:	e7e9      	b.n	759a <__lshift+0x76>

000075c6 <__mcmp>:
    75c6:	690a      	ldr	r2, [r1, #16]
    75c8:	6903      	ldr	r3, [r0, #16]
    75ca:	b530      	push	{r4, r5, lr}
    75cc:	1a9b      	subs	r3, r3, r2
    75ce:	d10e      	bne.n	75ee <__mcmp+0x28>
    75d0:	0092      	lsls	r2, r2, #2
    75d2:	3014      	adds	r0, #20
    75d4:	3114      	adds	r1, #20
    75d6:	1884      	adds	r4, r0, r2
    75d8:	1889      	adds	r1, r1, r2
    75da:	3c04      	subs	r4, #4
    75dc:	3904      	subs	r1, #4
    75de:	6822      	ldr	r2, [r4, #0]
    75e0:	680d      	ldr	r5, [r1, #0]
    75e2:	42aa      	cmp	r2, r5
    75e4:	d005      	beq.n	75f2 <__mcmp+0x2c>
    75e6:	42aa      	cmp	r2, r5
    75e8:	4192      	sbcs	r2, r2
    75ea:	2301      	movs	r3, #1
    75ec:	4313      	orrs	r3, r2
    75ee:	0018      	movs	r0, r3
    75f0:	bd30      	pop	{r4, r5, pc}
    75f2:	42a0      	cmp	r0, r4
    75f4:	d3f1      	bcc.n	75da <__mcmp+0x14>
    75f6:	e7fa      	b.n	75ee <__mcmp+0x28>

000075f8 <__mdiff>:
    75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fa:	000d      	movs	r5, r1
    75fc:	b085      	sub	sp, #20
    75fe:	0007      	movs	r7, r0
    7600:	0011      	movs	r1, r2
    7602:	0028      	movs	r0, r5
    7604:	0014      	movs	r4, r2
    7606:	f7ff ffde 	bl	75c6 <__mcmp>
    760a:	1e06      	subs	r6, r0, #0
    760c:	d108      	bne.n	7620 <__mdiff+0x28>
    760e:	0001      	movs	r1, r0
    7610:	0038      	movs	r0, r7
    7612:	f7ff fd87 	bl	7124 <_Balloc>
    7616:	2301      	movs	r3, #1
    7618:	6146      	str	r6, [r0, #20]
    761a:	6103      	str	r3, [r0, #16]
    761c:	b005      	add	sp, #20
    761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7620:	2301      	movs	r3, #1
    7622:	9301      	str	r3, [sp, #4]
    7624:	2800      	cmp	r0, #0
    7626:	db04      	blt.n	7632 <__mdiff+0x3a>
    7628:	0023      	movs	r3, r4
    762a:	002c      	movs	r4, r5
    762c:	001d      	movs	r5, r3
    762e:	2300      	movs	r3, #0
    7630:	9301      	str	r3, [sp, #4]
    7632:	6861      	ldr	r1, [r4, #4]
    7634:	0038      	movs	r0, r7
    7636:	f7ff fd75 	bl	7124 <_Balloc>
    763a:	002f      	movs	r7, r5
    763c:	2200      	movs	r2, #0
    763e:	9b01      	ldr	r3, [sp, #4]
    7640:	6926      	ldr	r6, [r4, #16]
    7642:	60c3      	str	r3, [r0, #12]
    7644:	3414      	adds	r4, #20
    7646:	00b3      	lsls	r3, r6, #2
    7648:	18e3      	adds	r3, r4, r3
    764a:	9302      	str	r3, [sp, #8]
    764c:	692b      	ldr	r3, [r5, #16]
    764e:	3714      	adds	r7, #20
    7650:	009b      	lsls	r3, r3, #2
    7652:	18fb      	adds	r3, r7, r3
    7654:	9303      	str	r3, [sp, #12]
    7656:	0003      	movs	r3, r0
    7658:	4694      	mov	ip, r2
    765a:	3314      	adds	r3, #20
    765c:	cc20      	ldmia	r4!, {r5}
    765e:	cf04      	ldmia	r7!, {r2}
    7660:	9201      	str	r2, [sp, #4]
    7662:	b2aa      	uxth	r2, r5
    7664:	4494      	add	ip, r2
    7666:	466a      	mov	r2, sp
    7668:	4661      	mov	r1, ip
    766a:	8892      	ldrh	r2, [r2, #4]
    766c:	0c2d      	lsrs	r5, r5, #16
    766e:	1a8a      	subs	r2, r1, r2
    7670:	9901      	ldr	r1, [sp, #4]
    7672:	0c09      	lsrs	r1, r1, #16
    7674:	1a69      	subs	r1, r5, r1
    7676:	1415      	asrs	r5, r2, #16
    7678:	1949      	adds	r1, r1, r5
    767a:	140d      	asrs	r5, r1, #16
    767c:	b292      	uxth	r2, r2
    767e:	0409      	lsls	r1, r1, #16
    7680:	430a      	orrs	r2, r1
    7682:	601a      	str	r2, [r3, #0]
    7684:	9a03      	ldr	r2, [sp, #12]
    7686:	46ac      	mov	ip, r5
    7688:	3304      	adds	r3, #4
    768a:	42ba      	cmp	r2, r7
    768c:	d8e6      	bhi.n	765c <__mdiff+0x64>
    768e:	9902      	ldr	r1, [sp, #8]
    7690:	001a      	movs	r2, r3
    7692:	428c      	cmp	r4, r1
    7694:	d305      	bcc.n	76a2 <__mdiff+0xaa>
    7696:	3a04      	subs	r2, #4
    7698:	6813      	ldr	r3, [r2, #0]
    769a:	2b00      	cmp	r3, #0
    769c:	d00e      	beq.n	76bc <__mdiff+0xc4>
    769e:	6106      	str	r6, [r0, #16]
    76a0:	e7bc      	b.n	761c <__mdiff+0x24>
    76a2:	cc04      	ldmia	r4!, {r2}
    76a4:	b291      	uxth	r1, r2
    76a6:	4461      	add	r1, ip
    76a8:	140d      	asrs	r5, r1, #16
    76aa:	0c12      	lsrs	r2, r2, #16
    76ac:	1952      	adds	r2, r2, r5
    76ae:	1415      	asrs	r5, r2, #16
    76b0:	b289      	uxth	r1, r1
    76b2:	0412      	lsls	r2, r2, #16
    76b4:	430a      	orrs	r2, r1
    76b6:	46ac      	mov	ip, r5
    76b8:	c304      	stmia	r3!, {r2}
    76ba:	e7e8      	b.n	768e <__mdiff+0x96>
    76bc:	3e01      	subs	r6, #1
    76be:	e7ea      	b.n	7696 <__mdiff+0x9e>

000076c0 <__ulp>:
    76c0:	000b      	movs	r3, r1
    76c2:	4910      	ldr	r1, [pc, #64]	; (7704 <__ulp+0x44>)
    76c4:	b510      	push	{r4, lr}
    76c6:	4019      	ands	r1, r3
    76c8:	4b0f      	ldr	r3, [pc, #60]	; (7708 <__ulp+0x48>)
    76ca:	18c9      	adds	r1, r1, r3
    76cc:	2900      	cmp	r1, #0
    76ce:	dd04      	ble.n	76da <__ulp+0x1a>
    76d0:	2200      	movs	r2, #0
    76d2:	000b      	movs	r3, r1
    76d4:	0010      	movs	r0, r2
    76d6:	0019      	movs	r1, r3
    76d8:	bd10      	pop	{r4, pc}
    76da:	4249      	negs	r1, r1
    76dc:	1509      	asrs	r1, r1, #20
    76de:	2200      	movs	r2, #0
    76e0:	2300      	movs	r3, #0
    76e2:	2913      	cmp	r1, #19
    76e4:	dc04      	bgt.n	76f0 <__ulp+0x30>
    76e6:	2080      	movs	r0, #128	; 0x80
    76e8:	0300      	lsls	r0, r0, #12
    76ea:	4108      	asrs	r0, r1
    76ec:	0003      	movs	r3, r0
    76ee:	e7f1      	b.n	76d4 <__ulp+0x14>
    76f0:	3914      	subs	r1, #20
    76f2:	2001      	movs	r0, #1
    76f4:	291e      	cmp	r1, #30
    76f6:	dc02      	bgt.n	76fe <__ulp+0x3e>
    76f8:	241f      	movs	r4, #31
    76fa:	1a61      	subs	r1, r4, r1
    76fc:	4088      	lsls	r0, r1
    76fe:	0002      	movs	r2, r0
    7700:	e7e8      	b.n	76d4 <__ulp+0x14>
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	7ff00000 	.word	0x7ff00000
    7708:	fcc00000 	.word	0xfcc00000

0000770c <__b2d>:
    770c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    770e:	0006      	movs	r6, r0
    7710:	6903      	ldr	r3, [r0, #16]
    7712:	3614      	adds	r6, #20
    7714:	009b      	lsls	r3, r3, #2
    7716:	18f3      	adds	r3, r6, r3
    7718:	1f1d      	subs	r5, r3, #4
    771a:	682c      	ldr	r4, [r5, #0]
    771c:	000f      	movs	r7, r1
    771e:	0020      	movs	r0, r4
    7720:	9301      	str	r3, [sp, #4]
    7722:	f7ff fdcb 	bl	72bc <__hi0bits>
    7726:	2320      	movs	r3, #32
    7728:	1a1b      	subs	r3, r3, r0
    772a:	603b      	str	r3, [r7, #0]
    772c:	491c      	ldr	r1, [pc, #112]	; (77a0 <__b2d+0x94>)
    772e:	280a      	cmp	r0, #10
    7730:	dc16      	bgt.n	7760 <__b2d+0x54>
    7732:	230b      	movs	r3, #11
    7734:	0027      	movs	r7, r4
    7736:	1a1b      	subs	r3, r3, r0
    7738:	40df      	lsrs	r7, r3
    773a:	4339      	orrs	r1, r7
    773c:	469c      	mov	ip, r3
    773e:	000b      	movs	r3, r1
    7740:	2100      	movs	r1, #0
    7742:	42ae      	cmp	r6, r5
    7744:	d202      	bcs.n	774c <__b2d+0x40>
    7746:	9901      	ldr	r1, [sp, #4]
    7748:	3908      	subs	r1, #8
    774a:	6809      	ldr	r1, [r1, #0]
    774c:	3015      	adds	r0, #21
    774e:	4084      	lsls	r4, r0
    7750:	4660      	mov	r0, ip
    7752:	40c1      	lsrs	r1, r0
    7754:	430c      	orrs	r4, r1
    7756:	0022      	movs	r2, r4
    7758:	0010      	movs	r0, r2
    775a:	0019      	movs	r1, r3
    775c:	b003      	add	sp, #12
    775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7760:	2700      	movs	r7, #0
    7762:	42ae      	cmp	r6, r5
    7764:	d202      	bcs.n	776c <__b2d+0x60>
    7766:	9d01      	ldr	r5, [sp, #4]
    7768:	3d08      	subs	r5, #8
    776a:	682f      	ldr	r7, [r5, #0]
    776c:	380b      	subs	r0, #11
    776e:	4684      	mov	ip, r0
    7770:	1e03      	subs	r3, r0, #0
    7772:	d012      	beq.n	779a <__b2d+0x8e>
    7774:	409c      	lsls	r4, r3
    7776:	2020      	movs	r0, #32
    7778:	4321      	orrs	r1, r4
    777a:	003c      	movs	r4, r7
    777c:	1ac0      	subs	r0, r0, r3
    777e:	40c4      	lsrs	r4, r0
    7780:	4321      	orrs	r1, r4
    7782:	000b      	movs	r3, r1
    7784:	2100      	movs	r1, #0
    7786:	42b5      	cmp	r5, r6
    7788:	d901      	bls.n	778e <__b2d+0x82>
    778a:	3d04      	subs	r5, #4
    778c:	6829      	ldr	r1, [r5, #0]
    778e:	4664      	mov	r4, ip
    7790:	40c1      	lsrs	r1, r0
    7792:	40a7      	lsls	r7, r4
    7794:	430f      	orrs	r7, r1
    7796:	003a      	movs	r2, r7
    7798:	e7de      	b.n	7758 <__b2d+0x4c>
    779a:	4321      	orrs	r1, r4
    779c:	000b      	movs	r3, r1
    779e:	e7fa      	b.n	7796 <__b2d+0x8a>
    77a0:	3ff00000 	.word	0x3ff00000

000077a4 <__d2b>:
    77a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77a6:	001d      	movs	r5, r3
    77a8:	2101      	movs	r1, #1
    77aa:	9f08      	ldr	r7, [sp, #32]
    77ac:	0014      	movs	r4, r2
    77ae:	f7ff fcb9 	bl	7124 <_Balloc>
    77b2:	032b      	lsls	r3, r5, #12
    77b4:	006d      	lsls	r5, r5, #1
    77b6:	0006      	movs	r6, r0
    77b8:	0b1b      	lsrs	r3, r3, #12
    77ba:	0d6d      	lsrs	r5, r5, #21
    77bc:	d124      	bne.n	7808 <__d2b+0x64>
    77be:	9301      	str	r3, [sp, #4]
    77c0:	2c00      	cmp	r4, #0
    77c2:	d027      	beq.n	7814 <__d2b+0x70>
    77c4:	4668      	mov	r0, sp
    77c6:	9400      	str	r4, [sp, #0]
    77c8:	f7ff fd92 	bl	72f0 <__lo0bits>
    77cc:	9c00      	ldr	r4, [sp, #0]
    77ce:	2800      	cmp	r0, #0
    77d0:	d01e      	beq.n	7810 <__d2b+0x6c>
    77d2:	9b01      	ldr	r3, [sp, #4]
    77d4:	2120      	movs	r1, #32
    77d6:	001a      	movs	r2, r3
    77d8:	1a09      	subs	r1, r1, r0
    77da:	408a      	lsls	r2, r1
    77dc:	40c3      	lsrs	r3, r0
    77de:	4322      	orrs	r2, r4
    77e0:	6172      	str	r2, [r6, #20]
    77e2:	9301      	str	r3, [sp, #4]
    77e4:	9c01      	ldr	r4, [sp, #4]
    77e6:	61b4      	str	r4, [r6, #24]
    77e8:	1e63      	subs	r3, r4, #1
    77ea:	419c      	sbcs	r4, r3
    77ec:	3401      	adds	r4, #1
    77ee:	6134      	str	r4, [r6, #16]
    77f0:	2d00      	cmp	r5, #0
    77f2:	d018      	beq.n	7826 <__d2b+0x82>
    77f4:	4b12      	ldr	r3, [pc, #72]	; (7840 <__d2b+0x9c>)
    77f6:	18ed      	adds	r5, r5, r3
    77f8:	2335      	movs	r3, #53	; 0x35
    77fa:	182d      	adds	r5, r5, r0
    77fc:	603d      	str	r5, [r7, #0]
    77fe:	1a18      	subs	r0, r3, r0
    7800:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7802:	6018      	str	r0, [r3, #0]
    7804:	0030      	movs	r0, r6
    7806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7808:	2280      	movs	r2, #128	; 0x80
    780a:	0352      	lsls	r2, r2, #13
    780c:	4313      	orrs	r3, r2
    780e:	e7d6      	b.n	77be <__d2b+0x1a>
    7810:	6174      	str	r4, [r6, #20]
    7812:	e7e7      	b.n	77e4 <__d2b+0x40>
    7814:	a801      	add	r0, sp, #4
    7816:	f7ff fd6b 	bl	72f0 <__lo0bits>
    781a:	2401      	movs	r4, #1
    781c:	9b01      	ldr	r3, [sp, #4]
    781e:	6134      	str	r4, [r6, #16]
    7820:	6173      	str	r3, [r6, #20]
    7822:	3020      	adds	r0, #32
    7824:	e7e4      	b.n	77f0 <__d2b+0x4c>
    7826:	4b07      	ldr	r3, [pc, #28]	; (7844 <__d2b+0xa0>)
    7828:	18c0      	adds	r0, r0, r3
    782a:	4b07      	ldr	r3, [pc, #28]	; (7848 <__d2b+0xa4>)
    782c:	6038      	str	r0, [r7, #0]
    782e:	18e3      	adds	r3, r4, r3
    7830:	009b      	lsls	r3, r3, #2
    7832:	18f3      	adds	r3, r6, r3
    7834:	6958      	ldr	r0, [r3, #20]
    7836:	f7ff fd41 	bl	72bc <__hi0bits>
    783a:	0164      	lsls	r4, r4, #5
    783c:	1a20      	subs	r0, r4, r0
    783e:	e7df      	b.n	7800 <__d2b+0x5c>
    7840:	fffffbcd 	.word	0xfffffbcd
    7844:	fffffbce 	.word	0xfffffbce
    7848:	3fffffff 	.word	0x3fffffff

0000784c <__ratio>:
    784c:	b5f0      	push	{r4, r5, r6, r7, lr}
    784e:	b085      	sub	sp, #20
    7850:	000f      	movs	r7, r1
    7852:	a902      	add	r1, sp, #8
    7854:	0006      	movs	r6, r0
    7856:	f7ff ff59 	bl	770c <__b2d>
    785a:	0004      	movs	r4, r0
    785c:	000d      	movs	r5, r1
    785e:	0038      	movs	r0, r7
    7860:	a903      	add	r1, sp, #12
    7862:	9400      	str	r4, [sp, #0]
    7864:	9501      	str	r5, [sp, #4]
    7866:	f7ff ff51 	bl	770c <__b2d>
    786a:	6936      	ldr	r6, [r6, #16]
    786c:	693f      	ldr	r7, [r7, #16]
    786e:	0002      	movs	r2, r0
    7870:	1bf7      	subs	r7, r6, r7
    7872:	017e      	lsls	r6, r7, #5
    7874:	46b4      	mov	ip, r6
    7876:	9f03      	ldr	r7, [sp, #12]
    7878:	9e02      	ldr	r6, [sp, #8]
    787a:	000b      	movs	r3, r1
    787c:	1bf6      	subs	r6, r6, r7
    787e:	4466      	add	r6, ip
    7880:	0537      	lsls	r7, r6, #20
    7882:	2e00      	cmp	r6, #0
    7884:	dd07      	ble.n	7896 <__ratio+0x4a>
    7886:	1979      	adds	r1, r7, r5
    7888:	9101      	str	r1, [sp, #4]
    788a:	9800      	ldr	r0, [sp, #0]
    788c:	9901      	ldr	r1, [sp, #4]
    788e:	f7fc fd1f 	bl	42d0 <__aeabi_ddiv>
    7892:	b005      	add	sp, #20
    7894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7896:	1bcb      	subs	r3, r1, r7
    7898:	e7f7      	b.n	788a <__ratio+0x3e>

0000789a <__copybits>:
    789a:	0013      	movs	r3, r2
    789c:	3901      	subs	r1, #1
    789e:	b510      	push	{r4, lr}
    78a0:	1149      	asrs	r1, r1, #5
    78a2:	6912      	ldr	r2, [r2, #16]
    78a4:	3101      	adds	r1, #1
    78a6:	0089      	lsls	r1, r1, #2
    78a8:	3314      	adds	r3, #20
    78aa:	0092      	lsls	r2, r2, #2
    78ac:	1841      	adds	r1, r0, r1
    78ae:	189a      	adds	r2, r3, r2
    78b0:	429a      	cmp	r2, r3
    78b2:	d803      	bhi.n	78bc <__copybits+0x22>
    78b4:	2300      	movs	r3, #0
    78b6:	4281      	cmp	r1, r0
    78b8:	d803      	bhi.n	78c2 <__copybits+0x28>
    78ba:	bd10      	pop	{r4, pc}
    78bc:	cb10      	ldmia	r3!, {r4}
    78be:	c010      	stmia	r0!, {r4}
    78c0:	e7f6      	b.n	78b0 <__copybits+0x16>
    78c2:	c008      	stmia	r0!, {r3}
    78c4:	e7f7      	b.n	78b6 <__copybits+0x1c>

000078c6 <__any_on>:
    78c6:	0002      	movs	r2, r0
    78c8:	6900      	ldr	r0, [r0, #16]
    78ca:	b510      	push	{r4, lr}
    78cc:	3214      	adds	r2, #20
    78ce:	114b      	asrs	r3, r1, #5
    78d0:	4298      	cmp	r0, r3
    78d2:	db12      	blt.n	78fa <__any_on+0x34>
    78d4:	dd0b      	ble.n	78ee <__any_on+0x28>
    78d6:	201f      	movs	r0, #31
    78d8:	4001      	ands	r1, r0
    78da:	d008      	beq.n	78ee <__any_on+0x28>
    78dc:	0098      	lsls	r0, r3, #2
    78de:	5884      	ldr	r4, [r0, r2]
    78e0:	0020      	movs	r0, r4
    78e2:	40c8      	lsrs	r0, r1
    78e4:	4088      	lsls	r0, r1
    78e6:	0001      	movs	r1, r0
    78e8:	2001      	movs	r0, #1
    78ea:	428c      	cmp	r4, r1
    78ec:	d104      	bne.n	78f8 <__any_on+0x32>
    78ee:	009b      	lsls	r3, r3, #2
    78f0:	18d3      	adds	r3, r2, r3
    78f2:	4293      	cmp	r3, r2
    78f4:	d803      	bhi.n	78fe <__any_on+0x38>
    78f6:	2000      	movs	r0, #0
    78f8:	bd10      	pop	{r4, pc}
    78fa:	0003      	movs	r3, r0
    78fc:	e7f7      	b.n	78ee <__any_on+0x28>
    78fe:	3b04      	subs	r3, #4
    7900:	6819      	ldr	r1, [r3, #0]
    7902:	2900      	cmp	r1, #0
    7904:	d0f5      	beq.n	78f2 <__any_on+0x2c>
    7906:	2001      	movs	r0, #1
    7908:	e7f6      	b.n	78f8 <__any_on+0x32>

0000790a <_calloc_r>:
    790a:	434a      	muls	r2, r1
    790c:	b570      	push	{r4, r5, r6, lr}
    790e:	0011      	movs	r1, r2
    7910:	0014      	movs	r4, r2
    7912:	f7fe f8b7 	bl	5a84 <_malloc_r>
    7916:	1e05      	subs	r5, r0, #0
    7918:	d003      	beq.n	7922 <_calloc_r+0x18>
    791a:	0022      	movs	r2, r4
    791c:	2100      	movs	r1, #0
    791e:	f7fe f8a8 	bl	5a72 <memset>
    7922:	0028      	movs	r0, r5
    7924:	bd70      	pop	{r4, r5, r6, pc}
	...

00007928 <nanf>:
    7928:	4800      	ldr	r0, [pc, #0]	; (792c <nanf+0x4>)
    792a:	4770      	bx	lr
    792c:	7fc00000 	.word	0x7fc00000

00007930 <strchr>:
    7930:	b2c9      	uxtb	r1, r1
    7932:	7803      	ldrb	r3, [r0, #0]
    7934:	2b00      	cmp	r3, #0
    7936:	d004      	beq.n	7942 <strchr+0x12>
    7938:	4299      	cmp	r1, r3
    793a:	d100      	bne.n	793e <strchr+0xe>
    793c:	4770      	bx	lr
    793e:	3001      	adds	r0, #1
    7940:	e7f7      	b.n	7932 <strchr+0x2>
    7942:	424b      	negs	r3, r1
    7944:	4159      	adcs	r1, r3
    7946:	4249      	negs	r1, r1
    7948:	4008      	ands	r0, r1
    794a:	e7f7      	b.n	793c <strchr+0xc>

0000794c <strncmp>:
    794c:	2300      	movs	r3, #0
    794e:	b530      	push	{r4, r5, lr}
    7950:	429a      	cmp	r2, r3
    7952:	d00a      	beq.n	796a <strncmp+0x1e>
    7954:	3a01      	subs	r2, #1
    7956:	5cc4      	ldrb	r4, [r0, r3]
    7958:	5ccd      	ldrb	r5, [r1, r3]
    795a:	42ac      	cmp	r4, r5
    795c:	d104      	bne.n	7968 <strncmp+0x1c>
    795e:	429a      	cmp	r2, r3
    7960:	d002      	beq.n	7968 <strncmp+0x1c>
    7962:	3301      	adds	r3, #1
    7964:	2c00      	cmp	r4, #0
    7966:	d1f6      	bne.n	7956 <strncmp+0xa>
    7968:	1b63      	subs	r3, r4, r5
    796a:	0018      	movs	r0, r3
    796c:	bd30      	pop	{r4, r5, pc}

0000796e <__ascii_wctomb>:
    796e:	1e0b      	subs	r3, r1, #0
    7970:	d004      	beq.n	797c <__ascii_wctomb+0xe>
    7972:	2aff      	cmp	r2, #255	; 0xff
    7974:	d904      	bls.n	7980 <__ascii_wctomb+0x12>
    7976:	238a      	movs	r3, #138	; 0x8a
    7978:	6003      	str	r3, [r0, #0]
    797a:	3b8b      	subs	r3, #139	; 0x8b
    797c:	0018      	movs	r0, r3
    797e:	4770      	bx	lr
    7980:	700a      	strb	r2, [r1, #0]
    7982:	2301      	movs	r3, #1
    7984:	e7fa      	b.n	797c <__ascii_wctomb+0xe>
	...

00007988 <__gnu_thumb1_case_uqi>:
    7988:	b402      	push	{r1}
    798a:	4671      	mov	r1, lr
    798c:	0849      	lsrs	r1, r1, #1
    798e:	0049      	lsls	r1, r1, #1
    7990:	5c09      	ldrb	r1, [r1, r0]
    7992:	0049      	lsls	r1, r1, #1
    7994:	448e      	add	lr, r1
    7996:	bc02      	pop	{r1}
    7998:	4770      	bx	lr
    799a:	46c0      	nop			; (mov r8, r8)

0000799c <__aeabi_cfrcmple>:
    799c:	4684      	mov	ip, r0
    799e:	1c08      	adds	r0, r1, #0
    79a0:	4661      	mov	r1, ip
    79a2:	e7ff      	b.n	79a4 <__aeabi_cfcmpeq>

000079a4 <__aeabi_cfcmpeq>:
    79a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    79a6:	f000 f899 	bl	7adc <__lesf2>
    79aa:	2800      	cmp	r0, #0
    79ac:	d401      	bmi.n	79b2 <__aeabi_cfcmpeq+0xe>
    79ae:	2100      	movs	r1, #0
    79b0:	42c8      	cmn	r0, r1
    79b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000079b4 <__aeabi_fcmpeq>:
    79b4:	b510      	push	{r4, lr}
    79b6:	f000 f82b 	bl	7a10 <__eqsf2>
    79ba:	4240      	negs	r0, r0
    79bc:	3001      	adds	r0, #1
    79be:	bd10      	pop	{r4, pc}

000079c0 <__aeabi_fcmplt>:
    79c0:	b510      	push	{r4, lr}
    79c2:	f000 f88b 	bl	7adc <__lesf2>
    79c6:	2800      	cmp	r0, #0
    79c8:	db01      	blt.n	79ce <__aeabi_fcmplt+0xe>
    79ca:	2000      	movs	r0, #0
    79cc:	bd10      	pop	{r4, pc}
    79ce:	2001      	movs	r0, #1
    79d0:	bd10      	pop	{r4, pc}
    79d2:	46c0      	nop			; (mov r8, r8)

000079d4 <__aeabi_fcmple>:
    79d4:	b510      	push	{r4, lr}
    79d6:	f000 f881 	bl	7adc <__lesf2>
    79da:	2800      	cmp	r0, #0
    79dc:	dd01      	ble.n	79e2 <__aeabi_fcmple+0xe>
    79de:	2000      	movs	r0, #0
    79e0:	bd10      	pop	{r4, pc}
    79e2:	2001      	movs	r0, #1
    79e4:	bd10      	pop	{r4, pc}
    79e6:	46c0      	nop			; (mov r8, r8)

000079e8 <__aeabi_fcmpgt>:
    79e8:	b510      	push	{r4, lr}
    79ea:	f000 f837 	bl	7a5c <__gesf2>
    79ee:	2800      	cmp	r0, #0
    79f0:	dc01      	bgt.n	79f6 <__aeabi_fcmpgt+0xe>
    79f2:	2000      	movs	r0, #0
    79f4:	bd10      	pop	{r4, pc}
    79f6:	2001      	movs	r0, #1
    79f8:	bd10      	pop	{r4, pc}
    79fa:	46c0      	nop			; (mov r8, r8)

000079fc <__aeabi_fcmpge>:
    79fc:	b510      	push	{r4, lr}
    79fe:	f000 f82d 	bl	7a5c <__gesf2>
    7a02:	2800      	cmp	r0, #0
    7a04:	da01      	bge.n	7a0a <__aeabi_fcmpge+0xe>
    7a06:	2000      	movs	r0, #0
    7a08:	bd10      	pop	{r4, pc}
    7a0a:	2001      	movs	r0, #1
    7a0c:	bd10      	pop	{r4, pc}
    7a0e:	46c0      	nop			; (mov r8, r8)

00007a10 <__eqsf2>:
    7a10:	b570      	push	{r4, r5, r6, lr}
    7a12:	0042      	lsls	r2, r0, #1
    7a14:	0245      	lsls	r5, r0, #9
    7a16:	024e      	lsls	r6, r1, #9
    7a18:	004c      	lsls	r4, r1, #1
    7a1a:	0fc3      	lsrs	r3, r0, #31
    7a1c:	0a6d      	lsrs	r5, r5, #9
    7a1e:	0e12      	lsrs	r2, r2, #24
    7a20:	0a76      	lsrs	r6, r6, #9
    7a22:	0e24      	lsrs	r4, r4, #24
    7a24:	0fc9      	lsrs	r1, r1, #31
    7a26:	2001      	movs	r0, #1
    7a28:	2aff      	cmp	r2, #255	; 0xff
    7a2a:	d006      	beq.n	7a3a <__eqsf2+0x2a>
    7a2c:	2cff      	cmp	r4, #255	; 0xff
    7a2e:	d003      	beq.n	7a38 <__eqsf2+0x28>
    7a30:	42a2      	cmp	r2, r4
    7a32:	d101      	bne.n	7a38 <__eqsf2+0x28>
    7a34:	42b5      	cmp	r5, r6
    7a36:	d006      	beq.n	7a46 <__eqsf2+0x36>
    7a38:	bd70      	pop	{r4, r5, r6, pc}
    7a3a:	2d00      	cmp	r5, #0
    7a3c:	d1fc      	bne.n	7a38 <__eqsf2+0x28>
    7a3e:	2cff      	cmp	r4, #255	; 0xff
    7a40:	d1fa      	bne.n	7a38 <__eqsf2+0x28>
    7a42:	2e00      	cmp	r6, #0
    7a44:	d1f8      	bne.n	7a38 <__eqsf2+0x28>
    7a46:	428b      	cmp	r3, r1
    7a48:	d006      	beq.n	7a58 <__eqsf2+0x48>
    7a4a:	2001      	movs	r0, #1
    7a4c:	2a00      	cmp	r2, #0
    7a4e:	d1f3      	bne.n	7a38 <__eqsf2+0x28>
    7a50:	0028      	movs	r0, r5
    7a52:	1e45      	subs	r5, r0, #1
    7a54:	41a8      	sbcs	r0, r5
    7a56:	e7ef      	b.n	7a38 <__eqsf2+0x28>
    7a58:	2000      	movs	r0, #0
    7a5a:	e7ed      	b.n	7a38 <__eqsf2+0x28>

00007a5c <__gesf2>:
    7a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a5e:	0042      	lsls	r2, r0, #1
    7a60:	0245      	lsls	r5, r0, #9
    7a62:	024c      	lsls	r4, r1, #9
    7a64:	0fc3      	lsrs	r3, r0, #31
    7a66:	0048      	lsls	r0, r1, #1
    7a68:	0a6d      	lsrs	r5, r5, #9
    7a6a:	0e12      	lsrs	r2, r2, #24
    7a6c:	0a64      	lsrs	r4, r4, #9
    7a6e:	0e00      	lsrs	r0, r0, #24
    7a70:	0fc9      	lsrs	r1, r1, #31
    7a72:	2aff      	cmp	r2, #255	; 0xff
    7a74:	d01e      	beq.n	7ab4 <__gesf2+0x58>
    7a76:	28ff      	cmp	r0, #255	; 0xff
    7a78:	d021      	beq.n	7abe <__gesf2+0x62>
    7a7a:	2a00      	cmp	r2, #0
    7a7c:	d10a      	bne.n	7a94 <__gesf2+0x38>
    7a7e:	426e      	negs	r6, r5
    7a80:	416e      	adcs	r6, r5
    7a82:	b2f6      	uxtb	r6, r6
    7a84:	2800      	cmp	r0, #0
    7a86:	d10f      	bne.n	7aa8 <__gesf2+0x4c>
    7a88:	2c00      	cmp	r4, #0
    7a8a:	d10d      	bne.n	7aa8 <__gesf2+0x4c>
    7a8c:	2000      	movs	r0, #0
    7a8e:	2d00      	cmp	r5, #0
    7a90:	d009      	beq.n	7aa6 <__gesf2+0x4a>
    7a92:	e005      	b.n	7aa0 <__gesf2+0x44>
    7a94:	2800      	cmp	r0, #0
    7a96:	d101      	bne.n	7a9c <__gesf2+0x40>
    7a98:	2c00      	cmp	r4, #0
    7a9a:	d001      	beq.n	7aa0 <__gesf2+0x44>
    7a9c:	428b      	cmp	r3, r1
    7a9e:	d011      	beq.n	7ac4 <__gesf2+0x68>
    7aa0:	2101      	movs	r1, #1
    7aa2:	4258      	negs	r0, r3
    7aa4:	4308      	orrs	r0, r1
    7aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aa8:	2e00      	cmp	r6, #0
    7aaa:	d0f7      	beq.n	7a9c <__gesf2+0x40>
    7aac:	2001      	movs	r0, #1
    7aae:	3901      	subs	r1, #1
    7ab0:	4308      	orrs	r0, r1
    7ab2:	e7f8      	b.n	7aa6 <__gesf2+0x4a>
    7ab4:	2d00      	cmp	r5, #0
    7ab6:	d0de      	beq.n	7a76 <__gesf2+0x1a>
    7ab8:	2002      	movs	r0, #2
    7aba:	4240      	negs	r0, r0
    7abc:	e7f3      	b.n	7aa6 <__gesf2+0x4a>
    7abe:	2c00      	cmp	r4, #0
    7ac0:	d0db      	beq.n	7a7a <__gesf2+0x1e>
    7ac2:	e7f9      	b.n	7ab8 <__gesf2+0x5c>
    7ac4:	4282      	cmp	r2, r0
    7ac6:	dceb      	bgt.n	7aa0 <__gesf2+0x44>
    7ac8:	db04      	blt.n	7ad4 <__gesf2+0x78>
    7aca:	42a5      	cmp	r5, r4
    7acc:	d8e8      	bhi.n	7aa0 <__gesf2+0x44>
    7ace:	2000      	movs	r0, #0
    7ad0:	42a5      	cmp	r5, r4
    7ad2:	d2e8      	bcs.n	7aa6 <__gesf2+0x4a>
    7ad4:	2101      	movs	r1, #1
    7ad6:	1e58      	subs	r0, r3, #1
    7ad8:	4308      	orrs	r0, r1
    7ada:	e7e4      	b.n	7aa6 <__gesf2+0x4a>

00007adc <__lesf2>:
    7adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ade:	0042      	lsls	r2, r0, #1
    7ae0:	024d      	lsls	r5, r1, #9
    7ae2:	004c      	lsls	r4, r1, #1
    7ae4:	0246      	lsls	r6, r0, #9
    7ae6:	0a76      	lsrs	r6, r6, #9
    7ae8:	0e12      	lsrs	r2, r2, #24
    7aea:	0fc3      	lsrs	r3, r0, #31
    7aec:	0a6d      	lsrs	r5, r5, #9
    7aee:	0e24      	lsrs	r4, r4, #24
    7af0:	0fc9      	lsrs	r1, r1, #31
    7af2:	2aff      	cmp	r2, #255	; 0xff
    7af4:	d016      	beq.n	7b24 <__lesf2+0x48>
    7af6:	2cff      	cmp	r4, #255	; 0xff
    7af8:	d018      	beq.n	7b2c <__lesf2+0x50>
    7afa:	2a00      	cmp	r2, #0
    7afc:	d10a      	bne.n	7b14 <__lesf2+0x38>
    7afe:	4270      	negs	r0, r6
    7b00:	4170      	adcs	r0, r6
    7b02:	b2c0      	uxtb	r0, r0
    7b04:	2c00      	cmp	r4, #0
    7b06:	d015      	beq.n	7b34 <__lesf2+0x58>
    7b08:	2800      	cmp	r0, #0
    7b0a:	d005      	beq.n	7b18 <__lesf2+0x3c>
    7b0c:	2001      	movs	r0, #1
    7b0e:	3901      	subs	r1, #1
    7b10:	4308      	orrs	r0, r1
    7b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b14:	2c00      	cmp	r4, #0
    7b16:	d013      	beq.n	7b40 <__lesf2+0x64>
    7b18:	4299      	cmp	r1, r3
    7b1a:	d014      	beq.n	7b46 <__lesf2+0x6a>
    7b1c:	2001      	movs	r0, #1
    7b1e:	425b      	negs	r3, r3
    7b20:	4318      	orrs	r0, r3
    7b22:	e7f6      	b.n	7b12 <__lesf2+0x36>
    7b24:	2002      	movs	r0, #2
    7b26:	2e00      	cmp	r6, #0
    7b28:	d1f3      	bne.n	7b12 <__lesf2+0x36>
    7b2a:	e7e4      	b.n	7af6 <__lesf2+0x1a>
    7b2c:	2002      	movs	r0, #2
    7b2e:	2d00      	cmp	r5, #0
    7b30:	d1ef      	bne.n	7b12 <__lesf2+0x36>
    7b32:	e7e2      	b.n	7afa <__lesf2+0x1e>
    7b34:	2d00      	cmp	r5, #0
    7b36:	d1e7      	bne.n	7b08 <__lesf2+0x2c>
    7b38:	2000      	movs	r0, #0
    7b3a:	2e00      	cmp	r6, #0
    7b3c:	d0e9      	beq.n	7b12 <__lesf2+0x36>
    7b3e:	e7ed      	b.n	7b1c <__lesf2+0x40>
    7b40:	2d00      	cmp	r5, #0
    7b42:	d1e9      	bne.n	7b18 <__lesf2+0x3c>
    7b44:	e7ea      	b.n	7b1c <__lesf2+0x40>
    7b46:	42a2      	cmp	r2, r4
    7b48:	dc06      	bgt.n	7b58 <__lesf2+0x7c>
    7b4a:	dbdf      	blt.n	7b0c <__lesf2+0x30>
    7b4c:	42ae      	cmp	r6, r5
    7b4e:	d803      	bhi.n	7b58 <__lesf2+0x7c>
    7b50:	2000      	movs	r0, #0
    7b52:	42ae      	cmp	r6, r5
    7b54:	d3da      	bcc.n	7b0c <__lesf2+0x30>
    7b56:	e7dc      	b.n	7b12 <__lesf2+0x36>
    7b58:	2001      	movs	r0, #1
    7b5a:	4249      	negs	r1, r1
    7b5c:	4308      	orrs	r0, r1
    7b5e:	e7d8      	b.n	7b12 <__lesf2+0x36>

00007b60 <__aeabi_fcmpun>:
    7b60:	0242      	lsls	r2, r0, #9
    7b62:	024b      	lsls	r3, r1, #9
    7b64:	0040      	lsls	r0, r0, #1
    7b66:	0049      	lsls	r1, r1, #1
    7b68:	0a52      	lsrs	r2, r2, #9
    7b6a:	0e00      	lsrs	r0, r0, #24
    7b6c:	0a5b      	lsrs	r3, r3, #9
    7b6e:	0e09      	lsrs	r1, r1, #24
    7b70:	28ff      	cmp	r0, #255	; 0xff
    7b72:	d003      	beq.n	7b7c <__aeabi_fcmpun+0x1c>
    7b74:	2000      	movs	r0, #0
    7b76:	29ff      	cmp	r1, #255	; 0xff
    7b78:	d006      	beq.n	7b88 <__aeabi_fcmpun+0x28>
    7b7a:	4770      	bx	lr
    7b7c:	38fe      	subs	r0, #254	; 0xfe
    7b7e:	2a00      	cmp	r2, #0
    7b80:	d1fb      	bne.n	7b7a <__aeabi_fcmpun+0x1a>
    7b82:	2000      	movs	r0, #0
    7b84:	29ff      	cmp	r1, #255	; 0xff
    7b86:	d1f8      	bne.n	7b7a <__aeabi_fcmpun+0x1a>
    7b88:	0018      	movs	r0, r3
    7b8a:	1e43      	subs	r3, r0, #1
    7b8c:	4198      	sbcs	r0, r3
    7b8e:	e7f4      	b.n	7b7a <__aeabi_fcmpun+0x1a>

00007b90 <__aeabi_dcmpun>:
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	4e0e      	ldr	r6, [pc, #56]	; (7bcc <__aeabi_dcmpun+0x3c>)
    7b94:	030d      	lsls	r5, r1, #12
    7b96:	031c      	lsls	r4, r3, #12
    7b98:	0049      	lsls	r1, r1, #1
    7b9a:	005b      	lsls	r3, r3, #1
    7b9c:	0b2d      	lsrs	r5, r5, #12
    7b9e:	0d49      	lsrs	r1, r1, #21
    7ba0:	0b24      	lsrs	r4, r4, #12
    7ba2:	0d5b      	lsrs	r3, r3, #21
    7ba4:	42b1      	cmp	r1, r6
    7ba6:	d004      	beq.n	7bb2 <__aeabi_dcmpun+0x22>
    7ba8:	4908      	ldr	r1, [pc, #32]	; (7bcc <__aeabi_dcmpun+0x3c>)
    7baa:	2000      	movs	r0, #0
    7bac:	428b      	cmp	r3, r1
    7bae:	d008      	beq.n	7bc2 <__aeabi_dcmpun+0x32>
    7bb0:	bd70      	pop	{r4, r5, r6, pc}
    7bb2:	4305      	orrs	r5, r0
    7bb4:	2001      	movs	r0, #1
    7bb6:	2d00      	cmp	r5, #0
    7bb8:	d1fa      	bne.n	7bb0 <__aeabi_dcmpun+0x20>
    7bba:	4904      	ldr	r1, [pc, #16]	; (7bcc <__aeabi_dcmpun+0x3c>)
    7bbc:	2000      	movs	r0, #0
    7bbe:	428b      	cmp	r3, r1
    7bc0:	d1f6      	bne.n	7bb0 <__aeabi_dcmpun+0x20>
    7bc2:	4314      	orrs	r4, r2
    7bc4:	0020      	movs	r0, r4
    7bc6:	1e44      	subs	r4, r0, #1
    7bc8:	41a0      	sbcs	r0, r4
    7bca:	e7f1      	b.n	7bb0 <__aeabi_dcmpun+0x20>
    7bcc:	000007ff 	.word	0x000007ff

00007bd0 <__aeabi_ui2d>:
    7bd0:	b510      	push	{r4, lr}
    7bd2:	1e04      	subs	r4, r0, #0
    7bd4:	d028      	beq.n	7c28 <__aeabi_ui2d+0x58>
    7bd6:	f7fd fdd5 	bl	5784 <__clzsi2>
    7bda:	4b15      	ldr	r3, [pc, #84]	; (7c30 <__aeabi_ui2d+0x60>)
    7bdc:	4a15      	ldr	r2, [pc, #84]	; (7c34 <__aeabi_ui2d+0x64>)
    7bde:	1a1b      	subs	r3, r3, r0
    7be0:	1ad2      	subs	r2, r2, r3
    7be2:	2a1f      	cmp	r2, #31
    7be4:	dd15      	ble.n	7c12 <__aeabi_ui2d+0x42>
    7be6:	4a14      	ldr	r2, [pc, #80]	; (7c38 <__aeabi_ui2d+0x68>)
    7be8:	1ad2      	subs	r2, r2, r3
    7bea:	4094      	lsls	r4, r2
    7bec:	2200      	movs	r2, #0
    7bee:	0324      	lsls	r4, r4, #12
    7bf0:	055b      	lsls	r3, r3, #21
    7bf2:	0b24      	lsrs	r4, r4, #12
    7bf4:	0d5b      	lsrs	r3, r3, #21
    7bf6:	2100      	movs	r1, #0
    7bf8:	0010      	movs	r0, r2
    7bfa:	0324      	lsls	r4, r4, #12
    7bfc:	0d0a      	lsrs	r2, r1, #20
    7bfe:	0b24      	lsrs	r4, r4, #12
    7c00:	0512      	lsls	r2, r2, #20
    7c02:	4322      	orrs	r2, r4
    7c04:	4c0d      	ldr	r4, [pc, #52]	; (7c3c <__aeabi_ui2d+0x6c>)
    7c06:	051b      	lsls	r3, r3, #20
    7c08:	4022      	ands	r2, r4
    7c0a:	4313      	orrs	r3, r2
    7c0c:	005b      	lsls	r3, r3, #1
    7c0e:	0859      	lsrs	r1, r3, #1
    7c10:	bd10      	pop	{r4, pc}
    7c12:	0021      	movs	r1, r4
    7c14:	4091      	lsls	r1, r2
    7c16:	000a      	movs	r2, r1
    7c18:	210b      	movs	r1, #11
    7c1a:	1a08      	subs	r0, r1, r0
    7c1c:	40c4      	lsrs	r4, r0
    7c1e:	055b      	lsls	r3, r3, #21
    7c20:	0324      	lsls	r4, r4, #12
    7c22:	0b24      	lsrs	r4, r4, #12
    7c24:	0d5b      	lsrs	r3, r3, #21
    7c26:	e7e6      	b.n	7bf6 <__aeabi_ui2d+0x26>
    7c28:	2300      	movs	r3, #0
    7c2a:	2400      	movs	r4, #0
    7c2c:	2200      	movs	r2, #0
    7c2e:	e7e2      	b.n	7bf6 <__aeabi_ui2d+0x26>
    7c30:	0000041e 	.word	0x0000041e
    7c34:	00000433 	.word	0x00000433
    7c38:	00000413 	.word	0x00000413
    7c3c:	800fffff 	.word	0x800fffff

00007c40 <tud_usbtmc_app_capabilities>:
    7c40:	01000001 00000004 00000000 01050100     ................
	...
    7c58:	444d4153 00003132 0000000a 0000002e     SAMD21..........
    7c68:	00000030 6e64692a 0000003f 7473722a     0...*idn?...*rst
    7c78:	00000000 72756f73 763a3163 3a746c6f     ....sourc1:volt:
    7c88:	2076656c 00000000 72756f73 763a3163     lev ....sourc1:v
    7c98:	3a746c6f 3f76656c 00000000 736e6573     olt:lev?....sens
    7ca8:	6f763a31 003f746c 6f697067 656c3a31     1:volt?.gpio1:le
    7cb8:	00002076 6f697067 656c3a31 00003f76     v ..gpio1:lev?..
    7cc8:	6f697067 69643a31 00002072 00004e49     gpio1:dir ..IN..
    7cd8:	0054554f 6f697067 69643a31 00003f72     OUT.gpio1:dir?..
    7ce8:	616c6564 00002079 00000031              delay ..1...

00007cf4 <desc_device>:
    7cf4:	02000112 40000000 4000cafe 02010200     .......@...@....
    7d04:	00000103                                ....

00007d08 <desc_fs_configuration>:
    7d08:	00270209 80000101 00040932 03fe0300     ..'.....2.......
    7d18:	05070401 00400201 81050700 00004002     ......@......@..
    7d28:	03820507 00160008                       ........

00007d30 <__compound_literal.0>:
    7d30:	00000409 65637845 6174696c 00000073     ....Excelitas...
    7d40:	42435445 76654420 00656369 36373839     ETCB Device.9876
    7d50:	00003435 42435445 42535520 00434d54     54..ETCB USBTMC.
    7d60:	000020a2 00002006 0000203c 0000206a     . ... ..< ..j ..
    7d70:	000020a2 000020a2 00002088 0000203c     . ... ... ..< ..
    7d80:	000020a2 000020a2 000020a2 000020a2     . ... ... ... ..
    7d90:	000020a2 000020a2 000020a2 00002018     . ... ... ... ..
    7da0:	000026a8 00002682 000028aa 0000265c     .&...&...(..\&..
    7db0:	000028aa 000025ce 00002652 000028aa     .(...%..R&...(..
    7dc0:	000025ea 00002602 000028e6 000028d8     .%...&...(...(..
    7dd0:	00002916 000028e6 000029f8 00002a18     .)...(...)...*..
    7de0:	00002928 00002972 00002a2e              ()..r)...*..

00007dec <_usbd_driver>:
    7dec:	000011d1 000013e1 00001221 0000163d     ........!...=...
    7dfc:	0000142d 00000000 000036f8 00003648     -........6..H6..
    7e0c:	00003648 00003646 000036ea 000036ea     H6..F6...6...6..
    7e1c:	000036e0 00003646 000036ea 000036e0     .6..F6...6...6..
    7e2c:	000036ea 00003646 000036f0 000036f0     .6..F6...6...6..
    7e3c:	000036f0 00003780 000044c8 000044aa     .6...7...D...D..
    7e4c:	00004464 00004382 00004464 0000449c     dD...C..dD...D..
    7e5c:	00004464 00004382 000044aa 000044aa     dD...C...D...D..
    7e6c:	0000449c 00004382 0000437a 0000437a     .D...C..zC..zC..
    7e7c:	0000437a 000046e0 00004b28 000049e8     zC...F..(K...I..
    7e8c:	000049e8 000049e4 00004b00 00004b00     .I...I...K...K..
    7e9c:	00004af2 000049e4 00004b00 00004af2     .J...I...K...J..
    7eac:	00004b00 000049e4 00004b08 00004b08     .K...I...K...K..
    7ebc:	00004b08 00004d0c 6900666e 7974696e     .K...M..nf.inity
    7ecc:	006e6100                                .an.

00007ed0 <fpi.6129>:
    7ed0:	00000035 fffffbce 000003cb 00000001     5...............
    7ee0:	00000000                                ....

00007ee4 <fpinan.6165>:
    7ee4:	00000034 fffffbce 000003cb 00000001     4...............
    7ef4:	00000000                                ....

00007ef8 <tinytens>:
    7ef8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    7f08:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    7f18:	64ac6f43 11680628 33323130 37363534     Co.d(.h.01234567
    7f28:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
    7f38:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....

00007f48 <__sf_fake_stderr>:
	...

00007f68 <__sf_fake_stdin>:
	...

00007f88 <__sf_fake_stdout>:
	...
    7fa8:	4f500043 00584953 0000002e 00000000     C.POSIX.........

00007fb8 <__mprec_bigtens>:
    7fb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7fc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7fd8:	7f73bf3c 75154fdd                       <.s..O.u

00007fe0 <__mprec_tens>:
    7fe0:	00000000 3ff00000 00000000 40240000     .......?......$@
    7ff0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8000:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8010:	00000000 412e8480 00000000 416312d0     .......A......cA
    8020:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8030:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8040:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8050:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8060:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8070:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8080:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8090:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    80a0:	79d99db4 44ea7843                       ...yCx.D

000080a8 <p05.6047>:
    80a8:	00000005 00000019 0000007d              ........}...

000080b4 <_ctype_>:
    80b4:	20202000 20202020 28282020 20282828     .         ((((( 
    80c4:	20202020 20202020 20202020 20202020                     
    80d4:	10108820 10101010 10101010 10101010      ...............
    80e4:	04040410 04040404 10040404 10101010     ................
    80f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8104:	01010101 01010101 01010101 10101010     ................
    8114:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8124:	02020202 02020202 02020202 10101010     ................
    8134:	00000020 00000000 00000000 00000000      ...............
	...

000081b8 <_init>:
    81b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ba:	46c0      	nop			; (mov r8, r8)
    81bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    81be:	bc08      	pop	{r3}
    81c0:	469e      	mov	lr, r3
    81c2:	4770      	bx	lr

000081c4 <__init_array_start>:
    81c4:	000000dd 	.word	0x000000dd

000081c8 <_fini>:
    81c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ca:	46c0      	nop			; (mov r8, r8)
    81cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    81ce:	bc08      	pop	{r3}
    81d0:	469e      	mov	lr, r3
    81d2:	4770      	bx	lr

000081d4 <__fini_array_start>:
    81d4:	000000b5 	.word	0x000000b5
